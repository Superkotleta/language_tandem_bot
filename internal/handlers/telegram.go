package handlers

import (
	"fmt"
	"log"
	"strings"

	"language-exchange-bot/internal/database"
	"language-exchange-bot/internal/models"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type TelegramHandler struct {
	bot *tgbotapi.BotAPI
	db  *database.DB
}

func NewTelegramHandler(bot *tgbotapi.BotAPI, db *database.DB) *TelegramHandler {
	return &TelegramHandler{
		bot: bot,
		db:  db,
	}
}

func (h *TelegramHandler) HandleUpdates(updates tgbotapi.UpdatesChannel) {
	for update := range updates {
		if update.Message != nil {
			h.handleMessage(update.Message)
		} else if update.CallbackQuery != nil {
			h.handleCallbackQuery(update.CallbackQuery)
		}
	}
}

func (h *TelegramHandler) handleMessage(message *tgbotapi.Message) {
	// –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	user, err := h.db.FindOrCreateUser(
		message.From.ID,
		message.From.UserName,
		message.From.FirstName,
	)
	if err != nil {
		log.Printf("Error finding/creating user: %v", err)
		return
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
	if message.IsCommand() {
		h.handleCommand(message, user)
		return
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
	h.handleState(message, user)
}

func (h *TelegramHandler) handleCommand(message *tgbotapi.Message, user *models.User) {
	switch message.Command() {
	case "start":
		h.handleStartCommand(message, user)
	case "status":
		h.handleStatusCommand(message, user)
	case "reset":
		h.handleResetCommand(message, user)
	default:
		h.sendMessage(message.Chat.ID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
	}
}

func (h *TelegramHandler) handleStartCommand(message *tgbotapi.Message, user *models.User) {
	welcomeText := fmt.Sprintf(
		"üéâ –ü—Ä–∏–≤–µ—Ç, %s! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Language Exchange Bot!\n\n"+
			"–Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ —Ç–µ–±–µ –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ —è–∑—ã–∫–æ–≤–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏.\n\n"+
			"–î–∞–≤–∞–π –∑–∞–ø–æ–ª–Ω–∏–º —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å! üìù\n\n"+
			"–®–∞–≥ 1: –í—ã–±–µ—Ä–∏ —Å–≤–æ–π —Ä–æ–¥–Ω–æ–π —è–∑—ã–∫:",
		user.FirstName,
	)

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —è–∑—ã–∫–∞–º–∏
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üá∑üá∫ –†—É—Å—Å–∫–∏–π", "lang_native_ru"),
			tgbotapi.NewInlineKeyboardButtonData("üá∫üá∏ English", "lang_native_en"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üá™üá∏ Espa√±ol", "lang_native_es"),
			tgbotapi.NewInlineKeyboardButtonData("üá´üá∑ Fran√ßais", "lang_native_fr"),
		),
	)

	msg := tgbotapi.NewMessage(message.Chat.ID, welcomeText)
	msg.ReplyMarkup = keyboard
	h.bot.Send(msg)

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	h.db.UpdateUserState(user.ID, models.StateWaitingLanguage)
	h.db.UpdateUserStatus(user.ID, models.StatusFilling)
}

func (h *TelegramHandler) handleStatusCommand(message *tgbotapi.Message, user *models.User) {
	statusText := fmt.Sprintf(
		"üìä –¢–≤–æ–π —Å—Ç–∞—Ç—É—Å:\n\n"+
			"üÜî ID: %d\n"+
			"üìù –°—Ç–∞—Ç—É—Å: %s\n"+
			"üîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ: %s\n"+
			"üìà –£—Ä–æ–≤–µ–Ω—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: %d%%",
		user.ID,
		h.getStatusEmoji(user.Status),
		h.getStateDescription(user.State),
		user.ProfileCompletionLevel,
	)

	h.sendMessage(message.Chat.ID, statusText)
}

func (h *TelegramHandler) handleResetCommand(message *tgbotapi.Message, user *models.User) {
	h.db.UpdateUserState(user.ID, models.StateStart)
	h.db.UpdateUserStatus(user.ID, models.StatusNotStarted)

	h.sendMessage(message.Chat.ID, "‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–±—Ä–æ—à–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–Ω–æ–≤–æ.")
}

func (h *TelegramHandler) handleState(message *tgbotapi.Message, user *models.User) {
	switch user.State {
	case models.StateWaitingLanguage:
		h.sendMessage(message.Chat.ID, "üëÜ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–∑ –º–µ–Ω—é –≤—ã—à–µ")
	case models.StateWaitingInterests:
		h.sendMessage(message.Chat.ID, "üëÜ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏–∑ –º–µ–Ω—é –≤—ã—à–µ")
	case models.StateWaitingTime:
		h.sendMessage(message.Chat.ID, "üëÜ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∏–∑ –º–µ–Ω—é –≤—ã—à–µ")
	default:
		h.sendMessage(message.Chat.ID, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º")
	}
}

func (h *TelegramHandler) handleCallbackQuery(callback *tgbotapi.CallbackQuery) {
	// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	user, err := h.db.FindOrCreateUser(
		callback.From.ID,
		callback.From.UserName,
		callback.From.FirstName,
	)
	if err != nil {
		log.Printf("Error finding user: %v", err)
		return
	}

	data := callback.Data

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
	if strings.HasPrefix(data, "lang_native_") {
		lang := strings.TrimPrefix(data, "lang_native_")
		h.handleNativeLanguageSelection(callback, user, lang)
	}
}

func (h *TelegramHandler) handleNativeLanguageSelection(callback *tgbotapi.CallbackQuery, user *models.User, lang string) {
	langNames := map[string]string{
		"ru": "–†—É—Å—Å–∫–∏–π üá∑üá∫",
		"en": "English üá∫üá∏",
		"es": "Espa√±ol üá™üá∏",
		"fr": "Fran√ßais üá´üá∑",
	}

	langName := langNames[lang]

	// –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
	callbackResponse := tgbotapi.NewCallback(callback.ID, fmt.Sprintf("–í—ã–±—Ä–∞–Ω —Ä–æ–¥–Ω–æ–π —è–∑—ã–∫: %s", langName))
	h.bot.Request(callbackResponse)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
	text := fmt.Sprintf("‚úÖ –†–æ–¥–Ω–æ–π —è–∑—ã–∫: %s\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —è–∑—ã–∫, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –∏–∑—É—á–∞—Ç—å:", langName)

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üá∑üá∫ –†—É—Å—Å–∫–∏–π", "lang_target_ru"),
			tgbotapi.NewInlineKeyboardButtonData("üá∫üá∏ English", "lang_target_en"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üá™üá∏ Espa√±ol", "lang_target_es"),
			tgbotapi.NewInlineKeyboardButtonData("üá´üá∑ Fran√ßais", "lang_target_fr"),
		),
	)

	msg := tgbotapi.NewMessage(callback.Message.Chat.ID, text)
	msg.ReplyMarkup = keyboard
	h.bot.Send(msg)

	// TODO: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –≤ –ë–î
	// h.db.SaveNativeLanguage(user.ID, lang)
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
func (h *TelegramHandler) sendMessage(chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, text)
	h.bot.Send(msg)
}

func (h *TelegramHandler) getStatusEmoji(status string) string {
	switch status {
	case models.StatusNotStarted:
		return "üî¥ –ù–µ –Ω–∞—á–∞—Ç"
	case models.StatusFilling:
		return "üü° –ó–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è"
	case models.StatusReady:
		return "üü¢ –ì–æ—Ç–æ–≤ –∫ –ø–æ–¥–±–æ—Ä—É"
	case models.StatusMatched:
		return "üíô –ù–∞–π–¥–µ–Ω –ø–∞—Ä—Ç–Ω–µ—Ä"
	case models.StatusWaiting:
		return "‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏"
	default:
		return status
	}
}

func (h *TelegramHandler) getStateDescription(state string) string {
	switch state {
	case models.StateStart:
		return "–ù–∞—á–∞–ª—å–Ω–æ–µ"
	case models.StateWaitingLanguage:
		return "–í—ã–±–æ—Ä —è–∑—ã–∫–∞"
	case models.StateWaitingInterests:
		return "–í—ã–±–æ—Ä –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤"
	case models.StateWaitingTime:
		return "–í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏"
	case models.StateComplete:
		return "–ó–∞–≤–µ—Ä—à–µ–Ω–æ"
	default:
		return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
	}
}
