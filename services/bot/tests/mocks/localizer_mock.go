package mocks

import (
	"strings"
)

// LocalizerMock –ø—Ä–æ—Å—Ç–æ–π –º–æ–∫ –ª–æ–∫–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
type LocalizerMock struct {
	translations map[string]map[string]string
}

// NewLocalizerMock —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –º–æ–∫ –ª–æ–∫–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
func NewLocalizerMock() *LocalizerMock {
	return &LocalizerMock{
		translations: map[string]map[string]string{
			"en": {
				"welcome_message":         "üëã Hi, {name}! Welcome to Language Exchange Bot!",
				"choose_native_language":  "üåç Choose your native language:",
				"choose_target_language":  "üìö What language are you learning?",
				"profile_summary_title":   "üë§ Your profile",
				"profile_field_native":    "Native language",
				"profile_field_target":    "Learning language",
				"profile_field_interests": "Interests",
				"unknown_command":         "‚ùì Unknown command. Use /start to begin",
			},
			"ru": {
				"welcome_message":         "üëã –ü—Ä–∏–≤–µ—Ç, {name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Language Exchange Bot!",
				"choose_native_language":  "üåç –í—ã–±–µ—Ä–∏ —Å–≤–æ–π —Ä–æ–¥–Ω–æ–π —è–∑—ã–∫:",
				"choose_target_language":  "üìö –ö–∞–∫–æ–π —è–∑—ã–∫ —Ç—ã –∏–∑—É—á–∞–µ—à—å?",
				"profile_summary_title":   "üë§ –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å",
				"profile_field_native":    "–†–æ–¥–Ω–æ–π —è–∑—ã–∫",
				"profile_field_target":    "–ò–∑—É—á–∞–µ–º—ã–π —è–∑—ã–∫",
				"profile_field_interests": "–ò–Ω—Ç–µ—Ä–µ—Å—ã",
				"unknown_command":         "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è –Ω–∞—á–∞–ª–∞",
			},
		},
	}
}

// Get –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è –∫–ª—é—á–∞ –∏ —è–∑—ã–∫–∞
func (l *LocalizerMock) Get(langCode, key string) string {
	if lang, exists := l.translations[langCode]; exists {
		if value, exists := lang[key]; exists {
			return value
		}
	}

	// Fallback –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
	if lang, exists := l.translations["en"]; exists {
		if value, exists := lang[key]; exists {
			return value
		}
	}

	// –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª—é—á
	return key
}

// GetWithParams –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–µ–≤–æ–¥ —Å –∑–∞–º–µ–Ω–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
func (l *LocalizerMock) GetWithParams(langCode, key string, params map[string]string) string {
	text := l.Get(langCode, key)

	// –ó–∞–º–µ–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Ç–µ–∫—Å—Ç–µ
	for paramKey, paramValue := range params {
		placeholder := "{" + paramKey + "}"
		text = strings.ReplaceAll(text, placeholder, paramValue)
	}

	return text
}

// GetLanguageName –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —è–∑—ã–∫–∞
func (l *LocalizerMock) GetLanguageName(langCode, interfaceLangCode string) string {
	names := map[string]map[string]string{
		"en": {"en": "English", "ru": "Russian", "es": "Spanish", "zh": "Chinese"},
		"ru": {"en": "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π", "ru": "–†—É—Å—Å–∫–∏–π", "es": "–ò—Å–ø–∞–Ω—Å–∫–∏–π", "zh": "–ö–∏—Ç–∞–π—Å–∫–∏–π"},
		"es": {"en": "Ingl√©s", "ru": "Ruso", "es": "Espa√±ol", "zh": "Chino"},
		"zh": {"en": "Ëã±ËØ≠", "ru": "‰øÑËØ≠", "es": "Ë•øÁè≠ÁâôËØ≠", "zh": "‰∏≠Êñá"},
	}

	if lang, exists := names[interfaceLangCode]; exists {
		if name, exists := lang[langCode]; exists {
			return name
		}
	}

	// Fallback
	return langCode
}

// GetInterests –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤)
func (l *LocalizerMock) GetInterests(langCode string) (map[int]string, error) {
	interests := map[int]string{
		1: "Movies",
		2: "Music",
		3: "Sports",
		4: "Travel",
		5: "Technology",
		6: "Food",
	}

	if langCode == "ru" {
		interests = map[int]string{
			1: "–§–∏–ª—å–º—ã",
			2: "–ú—É–∑—ã–∫–∞",
			3: "–°–ø–æ—Ä—Ç",
			4: "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è",
			5: "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
			6: "–ï–¥–∞",
		}
	}

	return interests, nil
}
