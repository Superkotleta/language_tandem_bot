package mocks

import (
	"strings"
)

// LocalizerMock –º–æ–∫ –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
type LocalizerMock struct {
	translations map[string]map[string]string
}

// NewLocalizerMock —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –º–æ–∫ –ª–æ–∫–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
func NewLocalizerMock() *LocalizerMock {
	mock := &LocalizerMock{
		translations: make(map[string]map[string]string),
	}

	// –ü—Ä–µ–¥–∑–∞–ø–æ–ª–Ω—è–µ–º –±–∞–∑–æ–≤—ã–º–∏ –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
	mock.seedTranslations()

	return mock
}

// seedTranslations –¥–æ–±–∞–≤–ª—è–µ—Ç –±–∞–∑–æ–≤—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã
func (l *LocalizerMock) seedTranslations() {
	// –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã
	l.translations["en"] = map[string]string{
		"welcome_message":         "Welcome, {name}!",
		"choose_native_language":  "üåç Choose your native language:",
		"choose_target_language":  "üìö What language are you learning?",
		"profile_summary_title":   "üë§ Your profile",
		"profile_field_native":    "Native language",
		"profile_field_target":    "Target language",
		"profile_field_interests": "Interests",
		"language_en":             "English",
		"language_ru":             "Russian",
		"language_es":             "Spanish",
		"language_zh":             "Chinese",
		"interest_movies":         "Movies",
		"interest_music":          "Music",
		"interest_sports":         "Sports",
		"interest_travel":         "Travel",
		"interest_technology":     "Technology",
		"interest_food":           "Food",
	}

	// –†—É—Å—Å–∫–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã
	l.translations["ru"] = map[string]string{
		"welcome_message":         "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {name}!",
		"choose_native_language":  "üåç –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ä–æ–¥–Ω–æ–π —è–∑—ã–∫:",
		"choose_target_language":  "üìö –ö–∞–∫–æ–π —è–∑—ã–∫ –≤—ã –∏–∑—É—á–∞–µ—Ç–µ?",
		"profile_summary_title":   "üë§ –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å",
		"profile_field_native":    "–†–æ–¥–Ω–æ–π —è–∑—ã–∫",
		"profile_field_target":    "–ò–∑—É—á–∞–µ–º—ã–π —è–∑—ã–∫",
		"profile_field_interests": "–ò–Ω—Ç–µ—Ä–µ—Å—ã",
		"language_en":             "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π",
		"language_ru":             "–†—É—Å—Å–∫–∏–π",
		"language_es":             "–ò—Å–ø–∞–Ω—Å–∫–∏–π",
		"language_zh":             "–ö–∏—Ç–∞–π—Å–∫–∏–π",
		"interest_movies":         "–§–∏–ª—å–º—ã",
		"interest_music":          "–ú—É–∑—ã–∫–∞",
		"interest_sports":         "–°–ø–æ—Ä—Ç",
		"interest_travel":         "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è",
		"interest_technology":     "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
		"interest_food":           "–ï–¥–∞",
	}

	// –ò—Å–ø–∞–Ω—Å–∫–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã
	l.translations["es"] = map[string]string{
		"welcome_message":         "¬°Bienvenido, {name}!",
		"choose_native_language":  "üåç Elige tu idioma nativo:",
		"choose_target_language":  "üìö ¬øQu√© idioma est√°s aprendiendo?",
		"profile_summary_title":   "üë§ Tu perfil",
		"profile_field_native":    "Idioma nativo",
		"profile_field_target":    "Idioma objetivo",
		"profile_field_interests": "Intereses",
		"language_en":             "Ingl√©s",
		"language_ru":             "Ruso",
		"language_es":             "Espa√±ol",
		"language_zh":             "Chino",
		"interest_movies":         "Pel√≠culas",
		"interest_music":          "M√∫sica",
		"interest_sports":         "Deportes",
		"interest_travel":         "Viajes",
		"interest_technology":     "Tecnolog√≠a",
		"interest_food":           "Comida",
	}

	// –ö–∏—Ç–∞–π—Å–∫–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã
	l.translations["zh"] = map[string]string{
		"welcome_message":         "Ê¨¢ËøéÔºå{name}ÔºÅ",
		"choose_native_language":  "üåç ÈÄâÊã©ÊÇ®ÁöÑÊØçËØ≠Ôºö",
		"choose_target_language":  "üìö ÊÇ®Âú®Â≠¶‰π†‰ªÄ‰πàËØ≠Ë®ÄÔºü",
		"profile_summary_title":   "üë§ ÊÇ®ÁöÑ‰∏™‰∫∫ËµÑÊñô",
		"profile_field_native":    "ÊØçËØ≠",
		"profile_field_target":    "ÁõÆÊ†áËØ≠Ë®Ä",
		"profile_field_interests": "ÂÖ¥Ë∂£",
		"language_en":             "Ëã±ËØ≠",
		"language_ru":             "‰øÑËØ≠",
		"language_es":             "Ë•øÁè≠ÁâôËØ≠",
		"language_zh":             "‰∏≠Êñá",
		"interest_movies":         "ÁîµÂΩ±",
		"interest_music":          "Èü≥‰πê",
		"interest_sports":         "ËøêÂä®",
		"interest_travel":         "ÊóÖË°å",
		"interest_technology":     "ÊäÄÊúØ",
		"interest_food":           "È£üÁâ©",
	}
}

// Get –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è –∫–ª—é—á–∞
func (l *LocalizerMock) Get(langCode, key string) string {
	if translations, exists := l.translations[langCode]; exists {
		if translation, exists := translations[key]; exists {
			return translation
		}
	}

	// Fallback –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
	if translations, exists := l.translations["en"]; exists {
		if translation, exists := translations[key]; exists {
			return translation
		}
	}

	// –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª—é—á
	return key
}

// GetWithParams –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–µ–≤–æ–¥ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
func (l *LocalizerMock) GetWithParams(langCode, key string, params map[string]string) string {
	text := l.Get(langCode, key)

	// –ü—Ä–æ—Å—Ç–∞—è –∑–∞–º–µ–Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
	for param, value := range params {
		text = strings.ReplaceAll(text, "{"+param+"}", value)
	}

	return text
}

// GetLanguageName –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —è–∑—ã–∫–∞
func (l *LocalizerMock) GetLanguageName(langCode, interfaceLangCode string) string {
	key := "language_" + langCode
	return l.Get(interfaceLangCode, key)
}

// GetInterests –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å—ã –¥–ª—è —è–∑—ã–∫–∞
func (l *LocalizerMock) GetInterests(langCode string) (map[int]string, error) {
	interests := map[int]string{
		1: l.Get(langCode, "interest_movies"),
		2: l.Get(langCode, "interest_music"),
		3: l.Get(langCode, "interest_sports"),
		4: l.Get(langCode, "interest_travel"),
		5: l.Get(langCode, "interest_technology"),
		6: l.Get(langCode, "interest_food"),
	}
	return interests, nil
}
