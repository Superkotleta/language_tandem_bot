package mocks

import (
	"fmt"
	"language-exchange-bot/internal/core"
	"language-exchange-bot/internal/models"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// TelegramHandlerWrapper –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ Telegram
type TelegramHandlerWrapper struct {
	Service        *core.BotService
	SentMessages   []tgbotapi.MessageConfig
	SentCallbacks  []tgbotapi.CallbackConfig
	EditedMessages []tgbotapi.EditMessageTextConfig
	LastError      error
}

// HandleUpdate –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç update –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
func (w *TelegramHandlerWrapper) HandleUpdate(update tgbotapi.Update) error {
	if update.Message != nil {
		return w.handleMessage(update.Message)
	}
	if update.CallbackQuery != nil {
		return w.handleCallbackQuery(update.CallbackQuery)
	}
	return nil
}

// handleMessage –∏–º–∏—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
func (w *TelegramHandlerWrapper) handleMessage(message *tgbotapi.Message) error {
	user, err := w.Service.HandleUserRegistration(
		message.From.ID,
		message.From.UserName,
		message.From.FirstName,
		message.From.LanguageCode,
	)
	if err != nil {
		w.LastError = err
		return err
	}

	if message.IsCommand() {
		return w.handleCommand(message, user)
	}
	return w.handleState(message, user)
}

// handleCommand –∏–º–∏—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥
func (w *TelegramHandlerWrapper) handleCommand(message *tgbotapi.Message, user *models.User) error {
	switch message.Command() {
	case "start":
		return w.handleStartCommand(message, user)
	case "status":
		return w.handleStatusCommand(message, user)
	case "profile":
		return w.handleProfileCommand(message, user)
	case "feedback":
		return w.handleFeedbackCommand(message, user)
	default:
		// –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
		msg := tgbotapi.NewMessage(message.Chat.ID, "Unknown command")
		w.SentMessages = append(w.SentMessages, msg)
		return nil
	}
}

// handleStartCommand –∏–º–∏—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥—ã /start
func (w *TelegramHandlerWrapper) handleStartCommand(message *tgbotapi.Message, user *models.User) error {
	welcomeText := w.Service.GetWelcomeMessage(user)

	msg := tgbotapi.NewMessage(message.Chat.ID, welcomeText)
	// –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ç–µ—Å—Ç–∞
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üë§ My Profile", "profile_show"),
			tgbotapi.NewInlineKeyboardButtonData("üîÑ Edit Profile", "profile_edit"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üåê Interface Language", "language_interface"),
			tgbotapi.NewInlineKeyboardButtonData("üí¨ Feedback", "feedback_create"),
		),
	)
	msg.ReplyMarkup = keyboard

	w.SentMessages = append(w.SentMessages, msg)
	return nil
}

// handleStatusCommand –∏–º–∏—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥—ã /status
func (w *TelegramHandlerWrapper) handleStatusCommand(message *tgbotapi.Message, user *models.User) error {
	// –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	statusText := fmt.Sprintf("User ID: %d\nStatus: %s\nProfile completion: %d%%",
		user.TelegramID, user.Status, user.ProfileCompletionLevel)

	msg := tgbotapi.NewMessage(message.Chat.ID, statusText)
	w.SentMessages = append(w.SentMessages, msg)
	return nil
}

// handleProfileCommand –∏–º–∏—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥—ã /profile
func (w *TelegramHandlerWrapper) handleProfileCommand(message *tgbotapi.Message, user *models.User) error {
	profileText, err := w.Service.BuildProfileSummary(user)
	if err != nil {
		profileText = "Error loading profile"
	}

	msg := tgbotapi.NewMessage(message.Chat.ID, profileText)
	w.SentMessages = append(w.SentMessages, msg)
	return nil
}

// handleFeedbackCommand –∏–º–∏—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥—ã /feedback
func (w *TelegramHandlerWrapper) handleFeedbackCommand(message *tgbotapi.Message, user *models.User) error {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
	isAdmin := false
	for _, adminID := range []int64{123456789, 987654321} {
		if user.TelegramID == adminID {
			isAdmin = true
			break
		}
	}

	var msg tgbotapi.MessageConfig
	if isAdmin {
		msg = tgbotapi.NewMessage(message.Chat.ID, "Admin feedback interface")
	} else {
		msg = tgbotapi.NewMessage(message.Chat.ID, "Please send your feedback:")
	}

	w.SentMessages = append(w.SentMessages, msg)
	return nil
}

// handleState –∏–º–∏—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (w *TelegramHandlerWrapper) handleState(message *tgbotapi.Message, user *models.User) error {
	// –ü—Ä–æ—Å—Ç–∞—è –∏–º–∏—Ç–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
	msg := tgbotapi.NewMessage(message.Chat.ID, "Processing your message...")
	w.SentMessages = append(w.SentMessages, msg)
	return nil
}

// handleCallbackQuery –∏–º–∏—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É callback –∑–∞–ø—Ä–æ—Å–æ–≤
func (w *TelegramHandlerWrapper) handleCallbackQuery(callback *tgbotapi.CallbackQuery) error {
	user, err := w.Service.HandleUserRegistration(
		callback.From.ID,
		callback.From.UserName,
		callback.From.FirstName,
		callback.From.LanguageCode,
	)
	if err != nil {
		w.LastError = err
		return err
	}

	// –ò–º–∏—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–∞–∑–Ω—ã—Ö callback'–æ–≤
	switch callback.Data {
	case "profile_show":
		profileText, err := w.Service.BuildProfileSummary(user)
		if err != nil {
			profileText = "Error loading profile"
		}
		edit := tgbotapi.NewEditMessageText(callback.Message.Chat.ID, callback.Message.MessageID, profileText)
		w.EditedMessages = append(w.EditedMessages, edit)

	case "profile_edit":
		editText := "Choose what to edit:"
		edit := tgbotapi.NewEditMessageText(callback.Message.Chat.ID, callback.Message.MessageID, editText)
		w.EditedMessages = append(w.EditedMessages, edit)

	default:
		// –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback
		callbackResponse := tgbotapi.NewCallback(callback.ID, "Unknown action")
		w.SentCallbacks = append(w.SentCallbacks, callbackResponse)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ callback
	callbackResponse := tgbotapi.NewCallback(callback.ID, "")
	w.SentCallbacks = append(w.SentCallbacks, callbackResponse)

	return nil
}

// GetSentMessagesCount –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
func (w *TelegramHandlerWrapper) GetSentMessagesCount() int {
	return len(w.SentMessages)
}

// GetLastSentMessage –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
func (w *TelegramHandlerWrapper) GetLastSentMessage() *tgbotapi.MessageConfig {
	if len(w.SentMessages) == 0 {
		return nil
	}
	return &w.SentMessages[len(w.SentMessages)-1]
}

// Reset –æ—á–∏—â–∞–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
func (w *TelegramHandlerWrapper) Reset() {
	w.SentMessages = make([]tgbotapi.MessageConfig, 0)
	w.SentCallbacks = make([]tgbotapi.CallbackConfig, 0)
	w.EditedMessages = make([]tgbotapi.EditMessageTextConfig, 0)
	w.LastError = nil
}
