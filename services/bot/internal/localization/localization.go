package localization

import (
	"database/sql"
	"encoding/json"
	"fmt"
	"os"
	"path/filepath"
	"strings"
)

type Localizer struct {
	db           *sql.DB
	translations map[string]map[string]string
}

func NewLocalizer(db *sql.DB) *Localizer {
	l := &Localizer{
		db:           db,
		translations: make(map[string]map[string]string),
	}
	l.loadTranslations()
	return l
}

func (l *Localizer) loadTranslations() {
	// –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ env
	localesPath := os.Getenv("LOCALES_DIR")
	if localesPath == "" {
		localesPath = "./locales"
	}

	if _, err := os.Stat(localesPath); os.IsNotExist(err) {
		fmt.Printf("Locales directory '%s' not found, will use fallback to key names\n", localesPath)
		// –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤
		l.loadFallbackTranslations()
		return
	}

	filepath.WalkDir(localesPath, func(path string, d os.DirEntry, err error) error {
		if err != nil {
			return err
		}
		if d.IsDir() || !strings.HasSuffix(strings.ToLower(d.Name()), ".json") {
			return nil
		}

		lang := strings.TrimSuffix(d.Name(), ".json")
		data, err := os.ReadFile(path)
		if err != nil {
			fmt.Printf("Failed reading %s: %v\n", path, err)
			return nil
		}

		var dict map[string]string
		if err := json.Unmarshal(data, &dict); err != nil {
			fmt.Printf("Failed parsing %s: %v\n", path, err)
			return nil
		}

		l.translations[lang] = dict
		fmt.Printf("Loaded %d keys for language: %s\n", len(dict), lang)
		return nil
	})
}

func (l *Localizer) Get(lang, key string) string {
	if dict, ok := l.translations[lang]; ok {
		if val, found := dict[key]; found {
			return val
		}
	}
	// Fallback –Ω–∞ en
	if dict, ok := l.translations["en"]; ok {
		if val, found := dict[key]; found {
			return val
		}
	}
	// –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback - –≤–µ—Ä–Ω—É—Ç—å –∫–ª—é—á (—á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã)
	return key
}

func (l *Localizer) GetWithParams(lang, key string, params map[string]string) string {
	text := l.Get(lang, key)
	for k, v := range params {
		placeholder := "{" + k + "}"
		text = strings.ReplaceAll(text, placeholder, v)
	}
	return text
}

func (l *Localizer) GetLanguageName(lang, interfaceLang string) string {
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á–∏ —Ç–∏–ø–∞ "language_ru", "language_en" –≤ JSON
	key := "language_" + lang
	return l.Get(interfaceLang, key)
}

func (l *Localizer) GetInterests(lang string) (map[int]string, error) {
	// –ï—Å–ª–∏ –ë–î –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ (—Ç–µ—Å—Ç—ã), –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏
	if l.db == nil {
		interests := map[int]string{
			1: "Movies",
			2: "Music",
			3: "Sports",
			4: "Travel",
		}
		if lang == "ru" {
			interests = map[int]string{
				1: "–§–∏–ª—å–º—ã",
				2: "–ú—É–∑—ã–∫–∞",
				3: "–°–ø–æ—Ä—Ç",
				4: "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è",
			}
		}
		return interests, nil
	}

	interests := make(map[int]string)

	// –ó–∞–ø—Ä–æ—Å –∫ –ë–î —Å –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–µ–π - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞, –µ—Å–ª–∏ NULL - –∫–ª—é—á
	query := `
		SELECT i.id,
			   CASE
				   WHEN it.name IS NOT NULL AND TRIM(it.name) != '' THEN it.name
				   ELSE i.key_name
			   END as name
		FROM interests i
		LEFT JOIN interest_translations it ON i.id = it.interest_id AND it.language_code = $1
		ORDER BY i.id
	`

	rows, err := l.db.Query(query, lang)
	if err != nil {
		// Fallback –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –ø—Ä–∏ –æ—à–∏–±–∫–µ
		rows, err = l.db.Query(query, "en")
		if err != nil {
			return nil, fmt.Errorf("failed to load interests: %w", err)
		}
	}
	defer rows.Close()

	for rows.Next() {
		var id int
		var name string
		if err := rows.Scan(&id, &name); err != nil {
			continue
		}
		interests[id] = name
		fmt.Printf("Interest %d: %s\n", id, name) // Debug: –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã
	}

	fmt.Printf("Loaded %d interests for language %s\n", len(interests), lang) // Debug: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤

	return interests, nil
}

// loadFallbackTranslations –∑–∞–≥—Ä—É–∂–∞–µ—Ç –±–∞–∑–æ–≤—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤.
func (l *Localizer) loadFallbackTranslations() {
	// –ê–Ω–≥–ª–∏–π—Å–∫–∏–π
	l.translations["en"] = map[string]string{
		"welcome_message":         "üëã Hi, {name}! Welcome to Language Exchange Bot!",
		"choose_native_language":  "üåç Choose your native language:",
		"choose_target_language":  "üìö What language are you learning?",
		"profile_summary_title":   "üë§ Your profile",
		"profile_field_native":    "Native language",
		"profile_field_target":    "Learning language",
		"profile_field_interests": "Interests",
		"unknown_command":         "‚ùì Unknown command. Use /start to begin",
		"language_en":             "English",
		"language_ru":             "Russian",
		"language_es":             "Spanish",
		"language_zh":             "Chinese",
	}

	// –†—É—Å—Å–∫–∏–π
	l.translations["ru"] = map[string]string{
		"welcome_message":         "üëã –ü—Ä–∏–≤–µ—Ç, {name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Language Exchange Bot!",
		"choose_native_language":  "üåç –í—ã–±–µ—Ä–∏ —Å–≤–æ–π —Ä–æ–¥–Ω–æ–π —è–∑—ã–∫:",
		"choose_target_language":  "üìö –ö–∞–∫–æ–π —è–∑—ã–∫ —Ç—ã –∏–∑—É—á–∞–µ—à—å?",
		"profile_summary_title":   "üë§ –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å",
		"profile_field_native":    "–†–æ–¥–Ω–æ–π —è–∑—ã–∫",
		"profile_field_target":    "–ò–∑—É—á–∞–µ–º—ã–π —è–∑—ã–∫",
		"profile_field_interests": "–ò–Ω—Ç–µ—Ä–µ—Å—ã",
		"unknown_command":         "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è –Ω–∞—á–∞–ª–∞",
		"language_en":             "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π",
		"language_ru":             "–†—É—Å—Å–∫–∏–π",
		"language_es":             "–ò—Å–ø–∞–Ω—Å–∫–∏–π",
		"language_zh":             "–ö–∏—Ç–∞–π—Å–∫–∏–π",
	}

	// –ò—Å–ø–∞–Ω—Å–∫–∏–π
	l.translations["es"] = map[string]string{
		"welcome_message":         "üëã ¬°Hola, {name}! ¬°Bienvenido al Language Exchange Bot!",
		"choose_native_language":  "üåç Elige tu idioma nativo:",
		"choose_target_language":  "üìö ¬øQu√© idioma est√°s aprendiendo?",
		"profile_summary_title":   "üë§ Tu perfil",
		"profile_field_native":    "Idioma nativo",
		"profile_field_target":    "Idioma objetivo",
		"profile_field_interests": "Intereses",
		"unknown_command":         "‚ùì Commando desconocido. Usa /start para comenzar",
		"language_en":             "Ingl√©s",
		"language_ru":             "Ruso",
		"language_es":             "Espa√±ol",
		"language_zh":             "Chino",
	}
}
