package telegram

import (
	"context"
	"fmt"
	"log"
	"strings"

	"language-exchange-bot/internal/core"
	"language-exchange-bot/internal/database"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// Username'—ã —Ç–µ–ø–µ—Ä—å —Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∏–∑ .env —Ñ–∞–π–ª–∞.
func (tb *TelegramBot) ResolveUsernameToChatID(username string) (int64, error) {
	// –í—Å–µ username'—ã —Ç–µ–ø–µ—Ä—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —á–∏—Ç–∞—é—Ç—Å—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	// –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –Ω–æ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ö–∞—Ä–¥–∫–æ–¥–∞
	log.Printf("–í–∞–ª–∏–¥–∞—Ü–∏—è username @%s —á–µ—Ä–µ–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", username)
	return 0, nil // –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
}

type TelegramBot struct {
	api            *tgbotapi.BotAPI
	service        *core.BotService
	debug          bool
	adminChatIDs   []int64  // ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (resolved)
	adminUsernames []string // Usernames –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Ö—Ä–∞–Ω–∏–º –¥–ª—è –ª–æ–≥–æ–≤)
}

func NewTelegramBot(token string, db *database.DB, debug bool, adminChatIDs []int64) (*TelegramBot, error) {
	bot, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		return nil, fmt.Errorf("failed to create telegram bot: %w", err)
	}
	bot.Debug = debug
	service := core.NewBotService(db)
	return &TelegramBot{
		api:            bot,
		service:        service,
		debug:          debug,
		adminChatIDs:   adminChatIDs,
		adminUsernames: make([]string, 0), // –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
	}, nil
}

// NewTelegramBotWithUsernames —Å–æ–∑–¥–∞–µ—Ç –±–æ—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π usernames –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.
func NewTelegramBotWithUsernames(token string, db *database.DB, debug bool, adminUsernames []string) (*TelegramBot, error) {
	bot, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		return nil, fmt.Errorf("failed to create telegram bot: %w", err)
	}
	bot.Debug = debug

	tgBot := &TelegramBot{
		api:            bot,
		service:        core.NewBotService(db),
		debug:          debug,
		adminChatIDs:   make([]int64, 0), // –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–∑–∂–µ —á–µ—Ä–µ–∑ SetAdminChatIDs
		adminUsernames: make([]string, 0),
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º usernames –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤
	for _, username := range adminUsernames {
		username = strings.TrimSpace(username)
		if username == "" {
			continue
		}

		// –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
		if strings.HasPrefix(username, "@") {
			username = strings.TrimPrefix(username, "@")
		}

		tgBot.adminUsernames = append(tgBot.adminUsernames, username)
		log.Printf("–î–æ–±–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤: @%s", username)
	}

	if len(tgBot.adminUsernames) == 0 {
		log.Println("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤")
	}

	log.Printf("–ë–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Å %d –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤", len(tgBot.adminUsernames))
	return tgBot, nil
}

// SendFeedbackNotification –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ –Ω–æ–≤–æ–º –æ—Ç–∑—ã–≤–µ.
func (tb *TelegramBot) SendFeedbackNotification(feedbackData map[string]interface{}) error {
	log.Printf("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –æ—Ç–∑—ã–≤–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º...")
	log.Printf("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –ø–æ ID: %v", tb.adminChatIDs)
	log.Printf("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –ø–æ username: %v", tb.adminUsernames)
	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
	adminMsg := fmt.Sprintf(`
üìù –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:

üë§ –ò–º—è: %s
üì± Telegram ID: %d

%s

üìù –û—Ç–∑—ã–≤:
%s
`,
		feedbackData["first_name"].(string),
		feedbackData["telegram_id"].(int64),
		func() string {
			if username, ok := feedbackData["username"].(*string); ok && username != nil {
				return fmt.Sprintf("üë§ Username: @%s", *username)
			}
			return "üë§ Username: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
		}(),
		feedbackData["feedback_text"].(string),
	)

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –µ—Å–ª–∏ –µ—Å—Ç—å
	if contactInfo, ok := feedbackData["contact_info"].(*string); ok && contactInfo != nil {
		adminMsg += fmt.Sprintf("\nüìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: %s", *contactInfo)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –ø–æ ID
	log.Printf("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è %d –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –ø–æ ID", len(tb.adminChatIDs))
	for _, adminID := range tb.adminChatIDs {
		msg := tgbotapi.NewMessage(adminID, adminMsg)
		if _, err := tb.api.Send(msg); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É %d: %v", adminID, err)
		} else {
			log.Printf("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É %d", adminID)
		}
	}

	// Username –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤, –Ω–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
	log.Printf("Username –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã (%d) –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤", len(tb.adminUsernames))

	totalAdmins := len(tb.adminChatIDs)
	log.Printf("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ %d –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –ø–æ Chat ID", totalAdmins)
	return nil
}

// GetService –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–µ—Ä–≤–∏—Å –±–æ—Ç–∞ –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞.
func (tb *TelegramBot) GetService() *core.BotService {
	return tb.service
}

func (tb *TelegramBot) Start(ctx context.Context) error {
	log.Printf("Authorized on account %s", tb.api.Self.UserName)
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := tb.api.GetUpdatesChan(u)
	// –ü–µ—Ä–µ–¥–∞–µ–º usernames –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
	handler := NewTelegramHandlerWithAdmins(tb.api, tb.service, tb.adminChatIDs, tb.adminUsernames)

	for {
		select {
		case update := <-updates:
			go func(upd tgbotapi.Update) {
				if err := handler.HandleUpdate(upd); err != nil {
					log.Printf("Error handling update: %v", err)
				}
			}(update)
		case <-ctx.Done():
			log.Println("Stopping Telegram bot...")
			tb.api.StopReceivingUpdates()
			return nil
		}
	}
}

func (tb *TelegramBot) Stop(ctx context.Context) error {
	tb.api.StopReceivingUpdates()
	return nil
}

func (tb *TelegramBot) GetPlatformName() string {
	return "telegram"
}

// getChatIDByUsername - —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Chat ID –ø–æ username.
func (tb *TelegramBot) getChatIDByUsername(username string) (int64, error) {
	log.Printf("–ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å Chat ID –¥–ª—è username: @%s", username)

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º Telegram API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ –ø–æ username
	chatConfig := tgbotapi.ChatInfoConfig{
		ChatConfig: tgbotapi.ChatConfig{
			SuperGroupUsername: "@" + username,
		},
	}

	chat, err := tb.api.GetChat(chatConfig)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Chat ID –¥–ª—è @%s: %v", username, err)
		return 0, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ @%s: %w", username, err)
	}

	log.Printf("–ü–æ–ª—É—á–µ–Ω Chat ID %d –¥–ª—è username @%s", chat.ID, username)
	return chat.ID, nil
}

// SetAdminChatIDs —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Chat ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
func (tb *TelegramBot) SetAdminChatIDs(chatIDs []int64) {
	tb.adminChatIDs = chatIDs
	log.Printf("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã Chat ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: %v", chatIDs)
}

// GetAdminCount –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.
func (tb *TelegramBot) GetAdminCount() int {
	return len(tb.adminChatIDs) + len(tb.adminUsernames)
}
