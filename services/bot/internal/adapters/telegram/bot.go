package telegram

import (
	"context"
	"fmt"
	"log"
	"strconv"
	"strings"

	"language-exchange-bot/internal/core"
	"language-exchange-bot/internal/database"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// ResolveUsernameToChatID - —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
// Username'—ã —Ç–µ–ø–µ—Ä—å —Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∏–∑ .env —Ñ–∞–π–ª–∞
func (tb *TelegramBot) ResolveUsernameToChatID(username string) (int64, error) {
	// –í—Å–µ username'—ã —Ç–µ–ø–µ—Ä—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —á–∏—Ç–∞—é—Ç—Å—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	// –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –Ω–æ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ö–∞—Ä–¥–∫–æ–¥–∞
	log.Printf("–í–∞–ª–∏–¥–∞—Ü–∏—è username @%s —á–µ—Ä–µ–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", username)
	return 0, nil // –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
}

type TelegramBot struct {
	api            *tgbotapi.BotAPI
	service        *core.BotService
	debug          bool
	adminChatIDs   []int64  // ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (resolved)
	adminUsernames []string // Usernames –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Ö—Ä–∞–Ω–∏–º –¥–ª—è –ª–æ–≥–æ–≤)
}

func NewTelegramBot(token string, db *database.DB, debug bool, adminChatIDs []int64) (*TelegramBot, error) {
	bot, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		return nil, fmt.Errorf("failed to create telegram bot: %w", err)
	}
	bot.Debug = debug
	service := core.NewBotService(db)
	return &TelegramBot{
		api:            bot,
		service:        service,
		debug:          debug,
		adminChatIDs:   adminChatIDs,
		adminUsernames: make([]string, 0), // –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
	}, nil
}

// NewTelegramBotWithUsernames —Å–æ–∑–¥–∞–µ—Ç –±–æ—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π usernames –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
func NewTelegramBotWithUsernames(token string, db *database.DB, debug bool, adminInputs []string) (*TelegramBot, error) {
	bot, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		return nil, fmt.Errorf("failed to create telegram bot: %w", err)
	}
	bot.Debug = debug

	tgBot := &TelegramBot{
		api:            bot,
		service:        core.NewBotService(db),
		debug:          debug,
		adminChatIDs:   make([]int64, 0),
		adminUsernames: make([]string, 0),
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º usernames (—Ä–∞–±–æ—Ç–∞–µ–º —Å –Ω–∏–º–∏ –Ω–∞–ø—Ä—è–º—É—é –±–µ–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è)
	for _, adminInput := range adminInputs {
		adminInput = strings.TrimSpace(adminInput)
		if adminInput == "" {
			continue
		}

		if strings.HasPrefix(adminInput, "@") {
			// –≠—Ç–æ username - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ @username
			tgBot.adminUsernames = append(tgBot.adminUsernames, adminInput)
			log.Printf("–î–æ–±–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: %s", adminInput)
		} else {
			// –≠—Ç–æ —á–∏—Å–ª–æ–≤–æ–π ID - –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ
			chatID, err := strconv.ParseInt(adminInput, 10, 64)
			if err == nil {
				tgBot.adminChatIDs = append(tgBot.adminChatIDs, chatID)
				log.Printf("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –≥–æ—Ç–æ–≤—ã–π Chat ID: %d", chatID)
			} else {
				log.Printf("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: %s", adminInput)
			}
		}
	}

	totalAdmins := len(tgBot.adminChatIDs) + len(tgBot.adminUsernames)
	if totalAdmins == 0 {
		log.Println("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
	}

	log.Printf("–ë–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Å %d –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ (%d –ø–æ ID, %d –ø–æ username)",
		totalAdmins, len(tgBot.adminChatIDs), len(tgBot.adminUsernames))
	return tgBot, nil
}

// SendFeedbackNotification –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ –Ω–æ–≤–æ–º –æ—Ç–∑—ã–≤–µ
func (tb *TelegramBot) SendFeedbackNotification(feedbackData map[string]interface{}) error {
	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
	adminMsg := fmt.Sprintf(`
üìù –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:

üë§ –ò–º—è: %s
üì± Telegram ID: %d

%s

üìù –û—Ç–∑—ã–≤:
%s
`,
		feedbackData["first_name"].(string),
		feedbackData["telegram_id"].(int64),
		func() string {
			if username, ok := feedbackData["username"].(*string); ok && username != nil {
				return fmt.Sprintf("üë§ Username: @%s", *username)
			}
			return "üë§ Username: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
		}(),
		feedbackData["feedback_text"].(string),
	)

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –µ—Å–ª–∏ –µ—Å—Ç—å
	if contactInfo, ok := feedbackData["contact_info"].(*string); ok && contactInfo != nil {
		adminMsg += fmt.Sprintf("\nüìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: %s", *contactInfo)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –ø–æ ID
	for _, adminID := range tb.adminChatIDs {
		msg := tgbotapi.NewMessage(adminID, adminMsg)
		if _, err := tb.api.Send(msg); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É %d: %v", adminID, err)
		}
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –ø–æ username
	for _, username := range tb.adminUsernames {
		// –£–±–∏—Ä–∞–µ–º @ –∏–∑ username –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
		cleanUsername := strings.TrimPrefix(username, "@")

		// –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å Chat ID –ø–æ username —Å –ø–æ–º–æ—â—å—é GetChat
		if chatID, err := tb.getChatIDByUsername(cleanUsername); err == nil {
			// –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ Chat ID, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ ID
			msg := tgbotapi.NewMessage(chatID, adminMsg)
			if _, err := tb.api.Send(msg); err != nil {
				log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @%s: %v", cleanUsername, err)
			} else {
				log.Printf("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @%s (–ø–æ ID: %d)", cleanUsername, chatID)
			}
		} else {
			// –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å Chat ID, –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
			log.Printf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å Chat ID –¥–ª—è @%s: %v", cleanUsername, err)
		}
	}

	totalAdmins := len(tb.adminChatIDs) + len(tb.adminUsernames)
	log.Printf("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ %d –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º (%d –ø–æ ID, %d –ø–æ username)",
		totalAdmins, len(tb.adminChatIDs), len(tb.adminUsernames))
	return nil
}

// GetService –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–µ—Ä–≤–∏—Å –±–æ—Ç–∞ –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞
func (tb *TelegramBot) GetService() *core.BotService {
	return tb.service
}

func (tb *TelegramBot) Start(ctx context.Context) error {
	log.Printf("Authorized on account %s", tb.api.Self.UserName)
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := tb.api.GetUpdatesChan(u)
	// –ü–µ—Ä–µ–¥–∞–µ–º usernames –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
	handler := NewTelegramHandlerWithAdmins(tb.api, tb.service, tb.adminChatIDs, tb.adminUsernames)

	for {
		select {
		case update := <-updates:
			go func(upd tgbotapi.Update) {
				if err := handler.HandleUpdate(upd); err != nil {
					log.Printf("Error handling update: %v", err)
				}
			}(update)
		case <-ctx.Done():
			log.Println("Stopping Telegram bot...")
			tb.api.StopReceivingUpdates()
			return nil
		}
	}
}

func (tb *TelegramBot) Stop(ctx context.Context) error {
	tb.api.StopReceivingUpdates()
	return nil
}

func (tb *TelegramBot) GetPlatformName() string {
	return "telegram"
}

// getChatIDByUsername - —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Chat ID –ø–æ username
// –ü–æ–∫–∞ —á—Ç–æ –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—à–∏–±–∫—É –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ –±—É–¥—É—â–µ–º
func (tb *TelegramBot) getChatIDByUsername(username string) (int64, error) {
	// –§—É–Ω–∫—Ü–∏—è –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –±—É–¥—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è Chat ID —á–µ—Ä–µ–∑ Telegram API
	// –°–µ–π—á–∞—Å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—à–∏–±–∫—É —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ —Ö–∞—Ä–¥–∫–æ–¥–∞
	log.Printf("–ü–æ–ª—É—á–µ–Ω–∏–µ Chat ID –ø–æ @%s –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ", username)
	return 0, fmt.Errorf("–ø–æ–ª—É—á–µ–Ω–∏–µ Chat ID –ø–æ username –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
}

// GetAdminCount –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
func (tb *TelegramBot) GetAdminCount() int {
	return len(tb.adminChatIDs)
}
