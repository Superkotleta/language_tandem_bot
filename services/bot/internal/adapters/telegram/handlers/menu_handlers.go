package handlers

import (
	"fmt"

	"language-exchange-bot/internal/core"
	"language-exchange-bot/internal/models"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// MenuHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –∏ –¥–µ–π—Å—Ç–≤–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
type MenuHandler struct {
	bot             *tgbotapi.BotAPI
	service         *core.BotService
	keyboardBuilder *KeyboardBuilder
}

// NewMenuHandler —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä MenuHandler
func NewMenuHandler(bot *tgbotapi.BotAPI, service *core.BotService, keyboardBuilder *KeyboardBuilder) *MenuHandler {
	return &MenuHandler{
		bot:             bot,
		service:         service,
		keyboardBuilder: keyboardBuilder,
	}
}

// HandleStartCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start
func (mh *MenuHandler) HandleStartCommand(message *tgbotapi.Message, user *models.User) error {
	// –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
	welcomeText := mh.service.GetWelcomeMessage(user)
	menuText := welcomeText + "\n\n" + mh.service.Localizer.Get(user.InterfaceLanguageCode, "main_menu_title")

	msg := tgbotapi.NewMessage(message.Chat.ID, menuText)
	msg.ReplyMarkup = mh.keyboardBuilder.CreateMainMenuKeyboard(user.InterfaceLanguageCode)
	if _, err := mh.bot.Send(msg); err != nil {
		return err
	}

	return nil
}

// HandleStatusCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /status
func (mh *MenuHandler) HandleStatusCommand(message *tgbotapi.Message, user *models.User) error {
	statusText := fmt.Sprintf(
		"üìä %s:\n\n"+
			"üÜî ID: %d\n"+
			"üìù %s: %s\n"+
			"üîÑ %s: %s\n"+
			"üìà %s: %d%%\n"+
			"üåê %s: %s",
		mh.service.Localizer.Get(user.InterfaceLanguageCode, "your_status"),
		user.ID,
		mh.service.Localizer.Get(user.InterfaceLanguageCode, "status"),
		user.Status,
		mh.service.Localizer.Get(user.InterfaceLanguageCode, "state"),
		user.State,
		mh.service.Localizer.Get(user.InterfaceLanguageCode, "profile_completion"),
		user.ProfileCompletionLevel,
		mh.service.Localizer.Get(user.InterfaceLanguageCode, "interface_language"),
		user.InterfaceLanguageCode,
	)
	return mh.sendMessage(message.Chat.ID, statusText)
}

// HandleResetCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /reset
func (mh *MenuHandler) HandleResetCommand(message *tgbotapi.Message, user *models.User) error {
	return mh.sendMessage(message.Chat.ID, mh.service.Localizer.Get(user.InterfaceLanguageCode, "profile_reset"))
}

// HandleLanguageCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /language
func (mh *MenuHandler) HandleLanguageCommand(message *tgbotapi.Message, user *models.User) error {
	text := mh.service.Localizer.Get(user.InterfaceLanguageCode, "choose_interface_language")
	keyboard := mh.keyboardBuilder.CreateLanguageKeyboard(user.InterfaceLanguageCode, "interface", "", true)
	msg := tgbotapi.NewMessage(message.Chat.ID, text)
	msg.ReplyMarkup = keyboard
	_, err := mh.bot.Send(msg)
	return err
}

// HandleBackToMainMenu –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
func (mh *MenuHandler) HandleBackToMainMenu(callback *tgbotapi.CallbackQuery, user *models.User) error {
	welcomeText := mh.service.GetWelcomeMessage(user)
	menuText := welcomeText + "\n\n" + mh.service.Localizer.Get(user.InterfaceLanguageCode, "main_menu_title")

	keyboard := mh.keyboardBuilder.CreateMainMenuKeyboard(user.InterfaceLanguageCode)
	editMsg := tgbotapi.NewEditMessageTextAndMarkup(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		menuText,
		keyboard,
	)
	_, err := mh.bot.Request(editMsg)
	return err
}

// HandleMainChangeLanguage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–º–µ–Ω—É —è–∑—ã–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
func (mh *MenuHandler) HandleMainChangeLanguage(callback *tgbotapi.CallbackQuery, user *models.User) error {
	text := mh.service.Localizer.Get(user.InterfaceLanguageCode, "choose_interface_language")
	keyboard := mh.keyboardBuilder.CreateLanguageKeyboard(user.InterfaceLanguageCode, "interface", "", true)
	editMsg := tgbotapi.NewEditMessageTextAndMarkup(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		text,
		keyboard,
	)
	_, err := mh.bot.Request(editMsg)
	return err
}

// HandleMainViewProfile –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è
func (mh *MenuHandler) HandleMainViewProfile(callback *tgbotapi.CallbackQuery, user *models.User, profileHandler *ProfileHandlerImpl) error {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–æ–ª–Ω–µ–Ω –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ —É—Ä–æ–≤–Ω—é –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
	if user.ProfileCompletionLevel == 0 {
		// –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫—É –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
		text := mh.service.Localizer.Get(user.InterfaceLanguageCode, "empty_profile_message")

		// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
		setupButton := tgbotapi.NewInlineKeyboardButtonData(
			mh.service.Localizer.Get(user.InterfaceLanguageCode, "setup_profile_button"),
			"start_profile_setup",
		)

		keyboard := tgbotapi.NewInlineKeyboardMarkup([]tgbotapi.InlineKeyboardButton{setupButton})

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ
		newMsg := tgbotapi.NewMessage(callback.Message.Chat.ID, text)
		newMsg.ReplyMarkup = keyboard
		_, err := mh.bot.Send(newMsg)
		return err
	}

	// –ü—Ä–æ—Ñ–∏–ª—å –∑–∞–ø–æ–ª–Ω–µ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ
	return profileHandler.HandleProfileShow(callback, user)
}

// HandleMainEditProfile –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
func (mh *MenuHandler) HandleMainEditProfile(callback *tgbotapi.CallbackQuery, user *models.User, profileHandler *ProfileHandlerImpl) error {
	return profileHandler.HandleProfileResetAsk(callback, user)
}

// HandleMainFeedback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –∫ –æ—Ç–∑—ã–≤–∞–º
func (mh *MenuHandler) HandleMainFeedback(callback *tgbotapi.CallbackQuery, user *models.User, feedbackHandler FeedbackHandler) error {
	// –°–æ–∑–¥–∞–µ–º message –æ–±—ä–µ–∫—Ç –¥–ª—è handleFeedbackCommand
	message := &tgbotapi.Message{
		Chat: callback.Message.Chat,
	}
	return feedbackHandler.HandleFeedbackCommand(message, user)
}

// sendMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Å—Ç–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
func (mh *MenuHandler) sendMessage(chatID int64, text string) error {
	msg := tgbotapi.NewMessage(chatID, text)
	_, err := mh.bot.Send(msg)
	return err
}

// ProfileHandler –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ—Ñ–∏–ª–µ–º
type ProfileHandler interface {
	HandleProfileShow(callback *tgbotapi.CallbackQuery, user *models.User) error
	HandleProfileResetAsk(callback *tgbotapi.CallbackQuery, user *models.User) error
}
