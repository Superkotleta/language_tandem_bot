package handlers

import (
	"fmt"
	"language-exchange-bot/internal/core"
	"language-exchange-bot/internal/models"
	"log"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// LanguageHandler –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ language –æ–ø–µ—Ä–∞—Ü–∏–π.
type LanguageHandler interface {
	HandleLanguagesContinueFilling(callback *tgbotapi.CallbackQuery, user *models.User) error
	HandleLanguagesReselect(callback *tgbotapi.CallbackQuery, user *models.User) error
	HandleLanguageLevelSelection(callback *tgbotapi.CallbackQuery, user *models.User, levelCode string) error
	HandleNativeLanguageCallback(callback *tgbotapi.CallbackQuery, user *models.User) error
	HandleTargetLanguageCallback(callback *tgbotapi.CallbackQuery, user *models.User) error
	HandleInterfaceLanguageSelection(callback *tgbotapi.CallbackQuery, user *models.User, langCode string) error
}

// LanguageHandlerImpl —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ language –æ–ø–µ—Ä–∞—Ü–∏–π.
type LanguageHandlerImpl struct {
	service         *core.BotService
	bot             *tgbotapi.BotAPI
	keyboardBuilder *KeyboardBuilder
}

// NewLanguageHandler —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ language –æ–ø–µ—Ä–∞—Ü–∏–π.
func NewLanguageHandler(service *core.BotService, bot *tgbotapi.BotAPI, keyboardBuilder *KeyboardBuilder) LanguageHandler {
	return &LanguageHandlerImpl{
		service:         service,
		bot:             bot,
		keyboardBuilder: keyboardBuilder,
	}
}

// sendMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
func (lh *LanguageHandlerImpl) sendMessage(chatID int64, text string) error {
	msg := tgbotapi.NewMessage(chatID, text)
	_, err := lh.bot.Send(msg)
	return err
}

// HandleLanguagesContinueFilling –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–æ–≤.
func (lh *LanguageHandlerImpl) HandleLanguagesContinueFilling(callback *tgbotapi.CallbackQuery, user *models.User) error {
	// –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –≤—ã–±–æ—Ä—É –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
	err := lh.service.DB.ClearUserInterests(user.ID)
	if err != nil {
		log.Printf("Warning: could not clear user interests: %v", err)
	}

	// –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è —è–∑—ã–∫–æ–º
	langName := lh.service.Localizer.GetLanguageName(user.TargetLanguageCode, user.InterfaceLanguageCode)
	title := lh.service.Localizer.GetWithParams(user.InterfaceLanguageCode, "choose_level_title", map[string]string{
		"language": langName,
	})

	keyboard := lh.keyboardBuilder.CreateLanguageLevelKeyboard(user.InterfaceLanguageCode, user.TargetLanguageCode)
	editMsg := tgbotapi.NewEditMessageTextAndMarkup(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		title,
		keyboard,
	)
	_, err = lh.bot.Request(editMsg)
	return err
}

// HandleLanguagesReselect –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —è–∑—ã–∫–æ–≤.
func (lh *LanguageHandlerImpl) HandleLanguagesReselect(callback *tgbotapi.CallbackQuery, user *models.User) error {
	// –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —è–∑—ã–∫–æ–≤
	user.NativeLanguageCode = ""
	user.TargetLanguageCode = ""
	user.TargetLanguageLevel = ""

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	_ = lh.service.DB.UpdateUserNativeLanguage(user.ID, "")
	_ = lh.service.DB.UpdateUserTargetLanguage(user.ID, "")
	_ = lh.service.DB.UpdateUserTargetLanguageLevel(user.ID, "")

	// –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Ä–æ–¥–Ω–æ–π —è–∑—ã–∫ —Å–Ω–æ–≤–∞
	text := lh.service.Localizer.Get(user.InterfaceLanguageCode, "choose_native_language")
	keyboard := lh.keyboardBuilder.CreateLanguageKeyboard(user.InterfaceLanguageCode, "native", "", true)
	editMsg := tgbotapi.NewEditMessageTextAndMarkup(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		text,
		keyboard,
	)
	_, err := lh.bot.Request(editMsg)
	return err
}

// HandleLanguageLevelSelection –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è –≤–ª–∞–¥–µ–Ω–∏—è —è–∑—ã–∫–æ–º.
func (lh *LanguageHandlerImpl) HandleLanguageLevelSelection(callback *tgbotapi.CallbackQuery, user *models.User, levelCode string) error {
	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è —è–∑—ã–∫–æ–º
	err := lh.service.DB.UpdateUserTargetLanguageLevel(user.ID, levelCode)
	if err != nil {
		return err
	}
	user.TargetLanguageLevel = levelCode

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
	levelName := lh.service.Localizer.Get(user.InterfaceLanguageCode, "choose_level_"+levelCode)
	confirmMsg := "üéØ " + levelName + "\n\n" + lh.service.Localizer.Get(user.InterfaceLanguageCode, "choose_interests")

	interests, err := lh.service.Localizer.GetInterests(user.InterfaceLanguageCode)
	if err != nil {
		return err
	}

	keyboard := lh.keyboardBuilder.CreateInterestsKeyboard(interests, []int{}, user.InterfaceLanguageCode)
	editMsg := tgbotapi.NewEditMessageTextAndMarkup(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		confirmMsg,
		keyboard,
	)
	_, err = lh.bot.Request(editMsg)
	return err
}

// HandleNativeLanguageCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ä–æ–¥–Ω–æ–≥–æ —è–∑—ã–∫–∞.
func (lh *LanguageHandlerImpl) HandleNativeLanguageCallback(callback *tgbotapi.CallbackQuery, user *models.User) error {
	langCode := callback.Data[len("lang_native_"):]

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–æ–¥–Ω–æ–π —è–∑—ã–∫
	err := lh.service.DB.UpdateUserNativeLanguage(user.ID, langCode)
	if err != nil {
		return err
	}
	user.NativeLanguageCode = langCode

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	lh.service.DB.UpdateUserState(user.ID, models.StateWaitingLanguage)

	// –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
	return lh.proceedToNextOnboardingStep(callback, user, langCode)
}

// proceedToNextOnboardingStep –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞.
func (lh *LanguageHandlerImpl) proceedToNextOnboardingStep(callback *tgbotapi.CallbackQuery, user *models.User, nativeLangCode string) error {
	if nativeLangCode == "ru" {
		// –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ä—É—Å—Å–∫–∏–π –∫–∞–∫ —Ä–æ–¥–Ω–æ–π, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –∏–∑—É—á–∞–µ–º—ã–π —è–∑—ã–∫
		text := lh.service.Localizer.Get(user.InterfaceLanguageCode, "choose_target_language")

		// –ò—Å–∫–ª—é—á–∞–µ–º —Ä—É—Å—Å–∫–∏–π –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–∑—É—á–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤
		keyboard := lh.keyboardBuilder.CreateLanguageKeyboard(user.InterfaceLanguageCode, "target", "ru", true)
		editMsg := tgbotapi.NewEditMessageTextAndMarkup(callback.Message.Chat.ID, callback.Message.MessageID, text, keyboard)
		_, err := lh.bot.Request(editMsg)
		if err != nil {
			return err
		}

		// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –∏–∑—É—á–∞–µ–º–æ–≥–æ —è–∑—ã–∫–∞
		lh.service.DB.UpdateUserState(user.ID, models.StateWaitingTargetLanguage)
		return nil
	} else {
		// –î–ª—è –≤—Å–µ—Ö –¥—Ä—É–≥–∏—Ö —è–∑—ã–∫–æ–≤ –∫–∞–∫ —Ä–æ–¥–Ω—ã—Ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä—É—Å—Å–∫–∏–π –∫–∞–∫ –∏–∑—É—á–∞–µ–º—ã–π
		err := lh.service.DB.UpdateUserTargetLanguage(user.ID, "ru")
		if err != nil {
			return err
		}
		user.TargetLanguageCode = "ru"

		// –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
		nativeLangName := lh.service.Localizer.GetLanguageName(nativeLangCode, user.InterfaceLanguageCode)

		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
		targetExplanation := lh.service.Localizer.GetWithParams(user.InterfaceLanguageCode, "target_language_explanation", map[string]string{
			"native_lang": nativeLangName,
		})

		// –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è —Ä—É—Å—Å–∫–∏–º —è–∑—ã–∫–æ–º
		langName := lh.service.Localizer.GetLanguageName(user.TargetLanguageCode, user.InterfaceLanguageCode)
		levelTitle := targetExplanation + "\n\n" + lh.service.Localizer.GetWithParams(user.InterfaceLanguageCode, "choose_level_title", map[string]string{
			"language": langName,
		})

		keyboard := lh.keyboardBuilder.CreateLanguageLevelKeyboard(user.InterfaceLanguageCode, user.TargetLanguageCode)
		editMsg := tgbotapi.NewEditMessageTextAndMarkup(
			callback.Message.Chat.ID,
			callback.Message.MessageID,
			levelTitle,
			keyboard,
		)
		_, err = lh.bot.Request(editMsg)
		if err != nil {
			return err
		}

		// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è
		lh.service.DB.UpdateUserState(user.ID, models.StateWaitingLanguageLevel)
		return nil
	}
}

// HandleTargetLanguageCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∏–∑—É—á–∞–µ–º–æ–≥–æ —è–∑—ã–∫–∞.
func (lh *LanguageHandlerImpl) HandleTargetLanguageCallback(callback *tgbotapi.CallbackQuery, user *models.User) error {
	langCode := callback.Data[len("lang_target_"):]
	err := lh.service.DB.UpdateUserTargetLanguage(user.ID, langCode)
	if err != nil {
		return err
	}

	// ‚úÖ –û–ß–ò–©–ê–ï–ú –°–¢–ê–†–´–ï –ò–ù–¢–ï–†–ï–°–´ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –≤—ã–±–æ—Ä—É –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
	err = lh.service.DB.ClearUserInterests(user.ID)
	if err != nil {
		log.Printf("Warning: could not clear user interests: %v", err)
	}

	user.TargetLanguageCode = langCode
	langName := lh.service.Localizer.GetLanguageName(langCode, user.InterfaceLanguageCode)

	// –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è —è–∑—ã–∫–æ–º
	title := lh.service.Localizer.GetWithParams(user.InterfaceLanguageCode, "choose_level_title", map[string]string{
		"language": langName,
	})

	keyboard := lh.keyboardBuilder.CreateLanguageLevelKeyboard(user.InterfaceLanguageCode, langCode)
	editMsg := tgbotapi.NewEditMessageTextAndMarkup(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		title,
		keyboard,
	)
	_, err = lh.bot.Request(editMsg)
	return err
}

// HandleInterfaceLanguageSelection –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —è–∑—ã–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.
func (lh *LanguageHandlerImpl) HandleInterfaceLanguageSelection(callback *tgbotapi.CallbackQuery, user *models.User, langCode string) error {
	if err := lh.service.DB.UpdateUserInterfaceLanguage(user.ID, langCode); err != nil {
		log.Printf("Error updating interface language: %v", err)
		return err
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	user.InterfaceLanguageCode = langCode
	langName := lh.service.Localizer.GetLanguageName(langCode, langCode)
	text := fmt.Sprintf("%s\n\n%s: %s",
		lh.service.Localizer.Get(langCode, "choose_interface_language"),
		lh.service.Localizer.Get(langCode, "language_updated"),
		langName,
	)

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —è–∑—ã–∫–∞–º–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è)
	keyboard := lh.keyboardBuilder.CreateLanguageKeyboard(langCode, "interface", "", true)

	// –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–æ—Ö—Ä–∞–Ω—è—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
	editMsg := tgbotapi.NewEditMessageTextAndMarkup(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		text,
		keyboard,
	)
	_, err := lh.bot.Request(editMsg)
	return err
}
