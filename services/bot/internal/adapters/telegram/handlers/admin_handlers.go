package handlers

import (
	"fmt"
	"log"
	"strconv"
	"strings"

	"language-exchange-bot/internal/core"
	"language-exchange-bot/internal/models"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// AdminHandler –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
type AdminHandler interface {
	ShowFeedbackStatisticsEdit(callback *tgbotapi.CallbackQuery, user *models.User) error
	HandleBrowseActiveFeedbacks(callback *tgbotapi.CallbackQuery, user *models.User, indexStr string) error
	HandleBrowseArchiveFeedbacks(callback *tgbotapi.CallbackQuery, user *models.User, indexStr string) error
	ShowFeedbackItemWithNavigation(chatID int64, fb map[string]interface{}, currentIndex int, totalCount int, feedbackType string) error
	ShowFeedbackItemWithNavigationEdit(callback *tgbotapi.CallbackQuery, fb map[string]interface{}, currentIndex int, totalCount int, feedbackType string) error
	IsAdmin(chatID int64, username string) bool
}

// AdminHandlerImpl —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
type AdminHandlerImpl struct {
	service         *core.BotService
	bot             *tgbotapi.BotAPI
	keyboardBuilder *KeyboardBuilder
	adminChatIDs    []int64
	adminUsernames  []string
}

// NewAdminHandler —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
func NewAdminHandler(service *core.BotService, bot *tgbotapi.BotAPI, keyboardBuilder *KeyboardBuilder, adminChatIDs []int64, adminUsernames []string) AdminHandler {
	return &AdminHandlerImpl{
		service:         service,
		bot:             bot,
		keyboardBuilder: keyboardBuilder,
		adminChatIDs:    adminChatIDs,
		adminUsernames:  adminUsernames,
	}
}

// IsAdmin –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
func (h *AdminHandlerImpl) IsAdmin(chatID int64, username string) bool {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ Chat ID
	for _, adminID := range h.adminChatIDs {
		if chatID == adminID {
			return true
		}
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ username
	if username != "" {
		for _, adminUsername := range h.adminUsernames {
			cleanUsername := strings.TrimPrefix(adminUsername, "@")
			if username == cleanUsername {
				return true
			}
		}
	}

	return false
}

// ShowFeedbackStatisticsEdit –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç–∑—ã–≤–æ–≤ —Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
func (h *AdminHandlerImpl) ShowFeedbackStatisticsEdit(callback *tgbotapi.CallbackQuery, user *models.User) error {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
	if !h.IsAdmin(callback.Message.Chat.ID, user.Username) {
		msg := tgbotapi.NewMessage(callback.Message.Chat.ID, "‚ùå –î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –±–æ—Ç–∞.")
		_, err := h.bot.Send(msg)
		return err
	}

	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–∑—ã–≤—ã
	feedbacks, err := h.service.GetAllFeedback()
	if err != nil {
		msg := tgbotapi.NewMessage(callback.Message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤")
		_, err := h.bot.Send(msg)
		return err
	}

	if len(feedbacks) == 0 {
		editMsg := tgbotapi.NewEditMessageText(
			callback.Message.Chat.ID,
			callback.Message.MessageID,
			"üìù –û—Ç–∑—ã–≤–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç",
		)
		_, err := h.bot.Request(editMsg)
		return err
	}

	// –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
	totalCount := len(feedbacks)
	processedCount := 0
	for _, fb := range feedbacks {
		if fb["is_processed"].(bool) {
			processedCount++
		}
	}
	pendingCount := totalCount - processedCount

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
	statsText := fmt.Sprintf("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∑—ã–≤–æ–≤:\n\n"+
		"üìù –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: %d\n"+
		"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: %d\n"+
		"‚è≥ –û–∂–∏–¥–∞—é—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏: %d",
		totalCount, processedCount, pendingCount)

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞–º–∏
	keyboard := h.keyboardBuilder.CreateFeedbackAdminKeyboard(user.InterfaceLanguageCode)

	editMsg := tgbotapi.NewEditMessageTextAndMarkup(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		statsText,
		keyboard,
	)
	_, err = h.bot.Request(editMsg)
	return err
}

// HandleBrowseActiveFeedbacks –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ç–∑—ã–≤—ã –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ —Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
func (h *AdminHandlerImpl) HandleBrowseActiveFeedbacks(callback *tgbotapi.CallbackQuery, user *models.User, indexStr string) error {
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–Ω–¥–µ–∫—Å–∞: %v", err)
		msg := tgbotapi.NewMessage(callback.Message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞")
		_, err := h.bot.Send(msg)
		return err
	}

	// –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ç–∑—ã–≤—ã
	feedbacks, err := h.service.GetAllFeedback()
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤: %v", err)
		msg := tgbotapi.NewMessage(callback.Message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤")
		_, err := h.bot.Send(msg)
		return err
	}

	// –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã
	var activeFeedbacks []map[string]interface{}
	type feedbackKey struct {
		userID       int64
		feedbackText string
	}
	seen := make(map[feedbackKey][]map[string]interface{})
	for _, fb := range feedbacks {
		if !fb["is_processed"].(bool) {
			key := feedbackKey{
				userID:       fb["telegram_id"].(int64),
				feedbackText: fb["feedback_text"].(string),
			}
			seen[key] = append(seen[key], fb)
		}
	}

	for _, group := range seen {
		for _, fb := range group {
			activeFeedbacks = append(activeFeedbacks, fb)
			break
		}
	}

	if len(activeFeedbacks) == 0 {
		msg := tgbotapi.NewMessage(callback.Message.Chat.ID, "üéâ –í—Å–µ –æ—Ç–∑—ã–≤—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!")
		_, err := h.bot.Send(msg)
		return err
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã
	if index < 0 || index >= len(activeFeedbacks) {
		index = 0
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –æ—Ç–∑—ã–≤ —Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
	return h.ShowFeedbackItemWithNavigationEdit(callback, activeFeedbacks[index], index, len(activeFeedbacks), "active")
}

// HandleBrowseArchiveFeedbacks –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ
func (h *AdminHandlerImpl) HandleBrowseArchiveFeedbacks(callback *tgbotapi.CallbackQuery, user *models.User, indexStr string) error {
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–Ω–¥–µ–∫—Å–∞: %v", err)
		msg := tgbotapi.NewMessage(callback.Message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞")
		_, err := h.bot.Send(msg)
		return err
	}

	// –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã
	feedbacks, err := h.service.GetAllFeedback()
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤: %v", err)
		msg := tgbotapi.NewMessage(callback.Message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤")
		_, err := h.bot.Send(msg)
		return err
	}

	// –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã
	var archivedFeedbacks []map[string]interface{}
	type feedbackKey struct {
		userID       int64
		feedbackText string
	}
	seen := make(map[feedbackKey][]map[string]interface{})
	for _, fb := range feedbacks {
		if fb["is_processed"].(bool) {
			key := feedbackKey{
				userID:       fb["telegram_id"].(int64),
				feedbackText: fb["feedback_text"].(string),
			}
			seen[key] = append(seen[key], fb)
		}
	}

	for _, group := range seen {
		for _, fb := range group {
			archivedFeedbacks = append(archivedFeedbacks, fb)
			break
		}
	}

	if len(archivedFeedbacks) == 0 {
		msg := tgbotapi.NewMessage(callback.Message.Chat.ID, "üìù –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç")
		_, err := h.bot.Send(msg)
		return err
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã
	if index < 0 || index >= len(archivedFeedbacks) {
		index = 0
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –æ—Ç–∑—ã–≤ —Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
	return h.ShowFeedbackItemWithNavigationEdit(callback, archivedFeedbacks[index], index, len(archivedFeedbacks), "archive")
}

// ShowFeedbackItemWithNavigation –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç–∑—ã–≤ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π (–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
func (h *AdminHandlerImpl) ShowFeedbackItemWithNavigation(chatID int64, fb map[string]interface{}, currentIndex int, totalCount int, feedbackType string) error {
	// –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞
	feedbackText := h.formatFeedbackText(fb, currentIndex, totalCount, feedbackType)

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
	keyboard := h.createFeedbackNavigationKeyboard(fb, currentIndex, totalCount, feedbackType)

	msg := tgbotapi.NewMessage(chatID, feedbackText)
	msg.ReplyMarkup = keyboard
	_, err := h.bot.Send(msg)
	return err
}

// ShowFeedbackItemWithNavigationEdit –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç–∑—ã–≤ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π (—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
func (h *AdminHandlerImpl) ShowFeedbackItemWithNavigationEdit(callback *tgbotapi.CallbackQuery, fb map[string]interface{}, currentIndex int, totalCount int, feedbackType string) error {
	// –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞
	feedbackText := h.formatFeedbackText(fb, currentIndex, totalCount, feedbackType)

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
	keyboard := h.createFeedbackNavigationKeyboard(fb, currentIndex, totalCount, feedbackType)

	editMsg := tgbotapi.NewEditMessageTextAndMarkup(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		feedbackText,
		keyboard,
	)
	_, err := h.bot.Request(editMsg)
	return err
}

// formatFeedbackText —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
func (h *AdminHandlerImpl) formatFeedbackText(fb map[string]interface{}, currentIndex int, totalCount int, feedbackType string) string {
	userID := fb["telegram_id"].(int64)
	username := ""
	if fb["username"] != nil {
		username = fb["username"].(string)
	}
	firstName := ""
	if fb["first_name"] != nil {
		firstName = fb["first_name"].(string)
	}
	feedbackText := fb["feedback_text"].(string)
	contactInfo := ""
	if fb["contact_info"] != nil && fb["contact_info"].(string) != "" {
		contactInfo = fb["contact_info"].(string)
	}

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ —Ç–∏–ø
	status := "‚ùå –ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω"
	if fb["is_processed"].(bool) {
		status = "‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω"
	}

	typeText := "üìù –ê–∫—Ç–∏–≤–Ω—ã–µ –æ—Ç–∑—ã–≤—ã"
	if feedbackType == "archive" {
		typeText = "üìÅ –ê—Ä—Ö–∏–≤ –æ—Ç–∑—ã–≤–æ–≤"
	} else if feedbackType == "all" {
		typeText = "üìä –í—Å–µ –æ—Ç–∑—ã–≤—ã"
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
	userInfo := fmt.Sprintf("ID: %d", userID)
	if username != "" {
		userInfo += fmt.Sprintf(" (@%s)", username)
	}
	if firstName != "" {
		userInfo += fmt.Sprintf(" - %s", firstName)
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç
	text := fmt.Sprintf("%s (%d/%d)\n\n"+
		"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %s\n"+
		"üìù –û—Ç–∑—ã–≤: %s\n"+
		"üìä –°—Ç–∞—Ç—É—Å: %s",
		typeText, currentIndex+1, totalCount,
		userInfo, feedbackText, status)

	if contactInfo != "" {
		text += fmt.Sprintf("\nüìû –ö–æ–Ω—Ç–∞–∫—Ç: %s", contactInfo)
	}

	return text
}

// createFeedbackNavigationKeyboard —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤
func (h *AdminHandlerImpl) createFeedbackNavigationKeyboard(fb map[string]interface{}, currentIndex int, totalCount int, feedbackType string) tgbotapi.InlineKeyboardMarkup {
	var keyboard [][]tgbotapi.InlineKeyboardButton

	// –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
	if totalCount > 1 {
		var navRow []tgbotapi.InlineKeyboardButton
		if currentIndex > 0 {
			navRow = append(navRow, tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ü—Ä–µ–¥", fmt.Sprintf("browse_%s_%d", feedbackType, currentIndex-1)))
		}
		if currentIndex < totalCount-1 {
			navRow = append(navRow, tgbotapi.NewInlineKeyboardButtonData("–°–ª–µ–¥ ‚û°Ô∏è", fmt.Sprintf("browse_%s_%d", feedbackType, currentIndex+1)))
		}
		if len(navRow) > 0 {
			keyboard = append(keyboard, navRow)
		}
	}

	// –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤
	if feedbackType == "active" && !fb["is_processed"].(bool) {
		actionRow := []tgbotapi.InlineKeyboardButton{
			tgbotapi.NewInlineKeyboardButtonData("‚úÖ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å", fmt.Sprintf("fb_process_%v", fb["id"])),
		}
		keyboard = append(keyboard, actionRow)
	}

	// –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤
	if feedbackType == "archive" && fb["is_processed"].(bool) {
		actionRow := []tgbotapi.InlineKeyboardButton{
			tgbotapi.NewInlineKeyboardButtonData("‚ùå –°–Ω—è—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É", fmt.Sprintf("fb_unprocess_%v", fb["id"])),
		}
		keyboard = append(keyboard, actionRow)
	}

	// –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ"
	backRow := []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData("üîô –ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", "feedback_stats"),
	}
	keyboard = append(keyboard, backRow)

	return tgbotapi.NewInlineKeyboardMarkup(keyboard...)
}
