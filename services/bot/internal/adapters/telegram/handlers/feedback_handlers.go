package handlers

import (
	"fmt"
	"log"
	"strconv"
	"strings"
	"time"

	"language-exchange-bot/internal/core"
	"language-exchange-bot/internal/models"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// min –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏–∑ –¥–≤—É—Ö —á–∏—Å–µ–ª.
func min(a, b int) int {
	if a < b {
		return a
	}
	return b
}

// FeedbackHandler –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—Ç–∑—ã–≤–æ–≤.
type FeedbackHandler interface {
	HandleFeedbackCommand(message *tgbotapi.Message, user *models.User) error
	HandleFeedbacksCommand(message *tgbotapi.Message, user *models.User) error
	HandleMainFeedback(callback *tgbotapi.CallbackQuery, user *models.User) error
	HandleFeedbackMessage(message *tgbotapi.Message, user *models.User) error
	HandleFeedbackContactMessage(message *tgbotapi.Message, user *models.User) error
	HandleFeedbackProcess(callback *tgbotapi.CallbackQuery, user *models.User, feedbackIDStr string) error
	HandleFeedbackUnprocess(callback *tgbotapi.CallbackQuery, user *models.User, feedbackIDStr string) error
	HandleFeedbackDelete(callback *tgbotapi.CallbackQuery, user *models.User, feedbackIDStr string) error
	HandleShowActiveFeedbacks(callback *tgbotapi.CallbackQuery, user *models.User) error
	HandleShowArchiveFeedbacks(callback *tgbotapi.CallbackQuery, user *models.User) error
	HandleShowAllFeedbacks(callback *tgbotapi.CallbackQuery, user *models.User) error
	HandleBrowseActiveFeedbacks(callback *tgbotapi.CallbackQuery, user *models.User, indexStr string) error
	HandleBrowseArchiveFeedbacks(callback *tgbotapi.CallbackQuery, user *models.User, indexStr string) error
	HandleBrowseAllFeedbacks(callback *tgbotapi.CallbackQuery, user *models.User, indexStr string) error
	HandleNavigateFeedback(callback *tgbotapi.CallbackQuery, user *models.User, feedbackType string, indexStr string) error
	HandleArchiveFeedback(callback *tgbotapi.CallbackQuery, user *models.User, indexStr string) error
	HandleBackToFeedbacks(callback *tgbotapi.CallbackQuery, user *models.User, feedbackType string) error
	HandleBackToFeedbackStats(callback *tgbotapi.CallbackQuery, user *models.User) error
	editActiveFeedbacks(chatID int64, messageID int, user *models.User) error
	editArchiveFeedbacks(chatID int64, messageID int, user *models.User) error
	editAllFeedbacks(chatID int64, messageID int, user *models.User) error
	editActiveFeedbacksList(chatID int64, messageID int, user *models.User) error
	editArchiveFeedbacksList(chatID int64, messageID int, user *models.User) error
	editAllFeedbacksList(chatID int64, messageID int, user *models.User) error
	HandleDeleteCurrentFeedback(callback *tgbotapi.CallbackQuery, user *models.User, indexStr string) error
	HandleDeleteAllArchiveFeedbacks(callback *tgbotapi.CallbackQuery, user *models.User) error
	HandleConfirmDeleteAllArchive(callback *tgbotapi.CallbackQuery, user *models.User) error
	HandleUnarchiveFeedback(callback *tgbotapi.CallbackQuery, user *models.User, indexStr string) error
	HandleFeedbackPrev(callback *tgbotapi.CallbackQuery, user *models.User, indexStr string, feedbackType string) error
	HandleFeedbackNext(callback *tgbotapi.CallbackQuery, user *models.User, indexStr string, feedbackType string) error
	HandleFeedbackBack(callback *tgbotapi.CallbackQuery, user *models.User, feedbackType string) error
}

// FeedbackHandlerImpl —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—Ç–∑—ã–≤–æ–≤.
type FeedbackHandlerImpl struct {
	bot             *tgbotapi.BotAPI
	service         *core.BotService
	keyboardBuilder *KeyboardBuilder
	adminChatIDs    []int64
	adminUsernames  []string
	// –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ username
	tempFeedbacks map[int]string // userID -> feedbackText
}

// NewFeedbackHandler —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä FeedbackHandler.
func NewFeedbackHandler(bot *tgbotapi.BotAPI, service *core.BotService, keyboardBuilder *KeyboardBuilder, adminChatIDs []int64, adminUsernames []string) FeedbackHandler {
	return &FeedbackHandlerImpl{
		bot:             bot,
		service:         service,
		keyboardBuilder: keyboardBuilder,
		adminChatIDs:    adminChatIDs,
		adminUsernames:  adminUsernames,
		tempFeedbacks:   make(map[int]string),
	}
}

// HandleFeedbackCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /feedback.
func (fh *FeedbackHandlerImpl) HandleFeedbackCommand(message *tgbotapi.Message, user *models.User) error {
	text := fh.service.Localizer.Get(user.InterfaceLanguageCode, "feedback_text")
	_ = fh.service.DB.UpdateUserState(user.ID, models.StateWaitingFeedback)
	return fh.sendMessage(message.Chat.ID, text)
}

// HandleFeedbacksCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /feedbacks (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤).
func (fh *FeedbackHandlerImpl) HandleFeedbacksCommand(message *tgbotapi.Message, user *models.User) error {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ Chat ID –∏ username
	isAdminByID := false
	isAdminByUsername := false

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ Chat ID
	for _, adminID := range fh.adminChatIDs {
		if message.Chat.ID == adminID {
			isAdminByID = true
			break
		}
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ username
	if message.From != nil && message.From.UserName != "" {
		for _, adminUsername := range fh.adminUsernames {
			if message.From.UserName == adminUsername {
				isAdminByUsername = true
				break
			}
		}
	}

	// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫–∞–∑–µ
	if !isAdminByID && !isAdminByUsername {
		return fh.sendMessage(message.Chat.ID, fh.service.Localizer.Get(user.InterfaceLanguageCode, "access_denied"))
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç–∑—ã–≤–æ–≤ –∏ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
	return fh.showFeedbackStatistics(message.Chat.ID, user)
}

// HandleMainFeedback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–û—Ç–∑—ã–≤" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.
func (fh *FeedbackHandlerImpl) HandleMainFeedback(callback *tgbotapi.CallbackQuery, user *models.User) error {
	// –°–æ–∑–¥–∞–µ–º message –æ–±—ä–µ–∫—Ç –¥–ª—è handleFeedbackCommand
	message := &tgbotapi.Message{
		Chat: callback.Message.Chat,
	}
	return fh.HandleFeedbackCommand(message, user)
}

// sendMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ.
func (fh *FeedbackHandlerImpl) sendMessage(chatID int64, text string) error {
	msg := tgbotapi.NewMessage(chatID, text)
	_, err := fh.bot.Send(msg)
	return err
}

// editFeedbackStatistics —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –æ—Ç–∑—ã–≤–æ–≤.
func (fh *FeedbackHandlerImpl) editFeedbackStatistics(chatID int64, messageID int, user *models.User) error {
	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–∑—ã–≤—ã
	allFeedbacks, err := fh.service.GetAllFeedback()
	if err != nil {
		return fh.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤: "+err.Error())
	}

	// –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
	activeCount := 0
	archivedCount := 0
	totalCount := len(allFeedbacks)

	for _, feedback := range allFeedbacks {
		if isArchived, ok := feedback["is_processed"].(bool); ok && isArchived {
			archivedCount++
		} else {
			activeCount++
		}
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
	text := "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∑—ã–≤–æ–≤:\n\n"
	text += fmt.Sprintf("üî• –ê–∫—Ç–∏–≤–Ω—ã–µ: %d\n", activeCount)
	text += fmt.Sprintf("üì¶ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ: %d\n", archivedCount)
	text += fmt.Sprintf("üìà –í—Å–µ–≥–æ: %d", totalCount)

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üî• –ê–∫—Ç–∏–≤–Ω—ã–µ", "show_active_feedbacks"),
			tgbotapi.NewInlineKeyboardButtonData("üì¶ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ", "show_archive_feedbacks"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìã –í—Å–µ –æ—Ç–∑—ã–≤—ã", "show_all_feedbacks"),
		),
	)

	// –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	editMsg := tgbotapi.NewEditMessageText(chatID, messageID, text)
	editMsg.ReplyMarkup = &keyboard
	_, err = fh.bot.Send(editMsg)
	return err
}

// showFeedbackStatistics –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç–∑—ã–≤–æ–≤.
func (fh *FeedbackHandlerImpl) showFeedbackStatistics(chatID int64, user *models.User) error {
	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–∑—ã–≤—ã
	allFeedbacks, err := fh.service.GetAllFeedback()
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤: %v", err)
		return fh.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–∑—ã–≤–æ–≤")
	}

	// –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
	activeCount := 0
	archivedCount := 0
	totalCount := len(allFeedbacks)

	for _, fb := range allFeedbacks {
		if isArchived, ok := fb["is_processed"].(bool); ok && isArchived {
			archivedCount++
		} else {
			activeCount++
		}
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
	text := "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∑—ã–≤–æ–≤:\n\n"
	text += fmt.Sprintf("üî• –ê–∫—Ç–∏–≤–Ω—ã–µ: %d\n", activeCount)
	text += fmt.Sprintf("üì¶ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ: %d\n", archivedCount)
	text += fmt.Sprintf("üìà –í—Å–µ–≥–æ: %d", totalCount)

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞–º–∏
	keyboard := fh.keyboardBuilder.CreateFeedbackAdminKeyboard(user.InterfaceLanguageCode)

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ReplyMarkup = keyboard
	_, err = fh.bot.Send(msg)
	return err
}

// sendFeedbackList –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç–∑—ã–≤–æ–≤.
func (fh *FeedbackHandlerImpl) sendFeedbackList(chatID int64, feedbackList []map[string]interface{}) error {
	for _, feedback := range feedbackList {
		if err := fh.sendFeedbackItem(chatID, feedback); err != nil {
			return err
		}
	}
	return nil
}

// sendFeedbackListWithPagination –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç–∑—ã–≤–æ–≤ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.
func (fh *FeedbackHandlerImpl) sendFeedbackListWithPagination(chatID int64, feedbackList []map[string]interface{}, feedbackType string) error {
	if len(feedbackList) == 0 {
		return fh.sendMessage(chatID, "üìù –û—Ç–∑—ã–≤–æ–≤ –Ω–µ—Ç")
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –æ—Ç–∑—ã–≤ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
	return fh.sendFeedbackWithNavigation(chatID, feedbackList, 0, feedbackType)
}

// sendFeedbackWithNavigation –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–∏–Ω –æ—Ç–∑—ã–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.
func (fh *FeedbackHandlerImpl) sendFeedbackWithNavigation(chatID int64, feedbackList []map[string]interface{}, currentIndex int, feedbackType string) error {
	if currentIndex < 0 || currentIndex >= len(feedbackList) {
		return fh.sendMessage(chatID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –æ—Ç–∑—ã–≤–∞")
	}

	feedback := feedbackList[currentIndex]

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞
	text := fh.formatFeedbackText(feedback, currentIndex+1, len(feedbackList))

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
	keyboard := fh.createNavigationKeyboard(currentIndex, len(feedbackList), feedbackType)

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ReplyMarkup = keyboard
	msg.ParseMode = tgbotapi.ModeHTML
	_, err := fh.bot.Send(msg)
	return err
}

// editFeedbackWithNavigation –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–∑—ã–≤–æ–º.
func (fh *FeedbackHandlerImpl) editFeedbackWithNavigation(chatID int64, messageID int, feedbackList []map[string]interface{}, currentIndex int, feedbackType string) error {
	if currentIndex < 0 || currentIndex >= len(feedbackList) {
		return fh.sendMessage(chatID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –æ—Ç–∑—ã–≤–∞")
	}

	feedback := feedbackList[currentIndex]

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞
	text := fh.formatFeedbackText(feedback, currentIndex+1, len(feedbackList))

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
	keyboard := fh.createNavigationKeyboard(currentIndex, len(feedbackList), feedbackType)

	editMsg := tgbotapi.NewEditMessageText(chatID, messageID, text)
	editMsg.ReplyMarkup = &keyboard
	editMsg.ParseMode = tgbotapi.ModeHTML
	_, err := fh.bot.Send(editMsg)
	return err
}

// formatFeedbackText —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞.
func (fh *FeedbackHandlerImpl) formatFeedbackText(feedback map[string]interface{}, currentNum, totalCount int) string {
	feedbackID := feedback["id"].(int)
	firstName := feedback["first_name"].(string)
	telegramID := feedback["telegram_id"].(int64)
	feedbackText := feedback["feedback_text"].(string)
	createdAt := feedback["created_at"].(time.Time)

	text := fmt.Sprintf("üìù <b>–û—Ç–∑—ã–≤ #%d (%d –∏–∑ %d)</b>\n\n", feedbackID, currentNum, totalCount)
	text += fmt.Sprintf("üë§ <b>–ò–º—è:</b> %s\n", firstName)
	text += fmt.Sprintf("üÜî <b>Telegram ID:</b> %d\n", telegramID)

	// –î–æ–±–∞–≤–ª—è–µ–º username –µ—Å–ª–∏ –µ—Å—Ç—å
	if username, ok := feedback["username"].(string); ok && username != "" {
		text += fmt.Sprintf("üë§ <b>Username:</b> @%s\n", username)
	}

	text += fmt.Sprintf("üìÖ <b>–î–∞—Ç–∞:</b> %s\n\n", createdAt.Format("02.01.2006 15:04"))
	text += fmt.Sprintf("üí¨ <b>–û—Ç–∑—ã–≤:</b>\n%s", feedbackText)

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
	if contactInfo, ok := feedback["contact_info"].(*string); ok && contactInfo != nil {
		text += fmt.Sprintf("\n\nüìû <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b> %s", *contactInfo)
	}

	return text
}

// createNavigationKeyboard —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.
func (fh *FeedbackHandlerImpl) createNavigationKeyboard(currentIndex, totalCount int, feedbackType string) tgbotapi.InlineKeyboardMarkup {
	var buttons []tgbotapi.InlineKeyboardButton

	// –ö–Ω–æ–ø–∫–∞ "–ü—Ä–µ–¥—ã–¥—É—â–∏–π"
	if currentIndex > 0 {
		buttons = append(buttons, tgbotapi.NewInlineKeyboardButtonData(
			"‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π",
			fmt.Sprintf("nav_%s_feedback_%d", feedbackType, currentIndex-1),
		))
	}

	// –ö–Ω–æ–ø–∫–∞ "–°–ª–µ–¥—É—é—â–∏–π"
	if currentIndex < totalCount-1 {
		buttons = append(buttons, tgbotapi.NewInlineKeyboardButtonData(
			"‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π",
			fmt.Sprintf("nav_%s_feedback_%d", feedbackType, currentIndex+1),
		))
	}

	// –ö–Ω–æ–ø–∫–∞ "–í –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ" (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤)
	if feedbackType == "active" {
		buttons = append(buttons, tgbotapi.NewInlineKeyboardButtonData(
			"üì¶ –í –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ",
			fmt.Sprintf("archive_feedback_%d", currentIndex),
		))
	}

	// –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∞—Ä—Ö–∏–≤–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤
	if feedbackType == "archive" {
		buttons = append(buttons, tgbotapi.NewInlineKeyboardButtonData(
			"üîÑ –í–µ—Ä–Ω—É—Ç—å –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ",
			fmt.Sprintf("unarchive_feedback_%d", currentIndex),
		))
		buttons = append(buttons, tgbotapi.NewInlineKeyboardButtonData(
			"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π",
			fmt.Sprintf("delete_current_feedback_%d", currentIndex),
		))
		buttons = append(buttons, tgbotapi.NewInlineKeyboardButtonData(
			"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Å–µ",
			"delete_all_archive_feedbacks",
		))
	}

	// –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É"
	buttons = append(buttons, tgbotapi.NewInlineKeyboardButtonData(
		"üìã –ö —Å–ø–∏—Å–∫—É",
		fmt.Sprintf("back_to_%s_feedbacks", feedbackType),
	))

	// –ö–Ω–æ–ø–∫–∞ "–ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ"
	buttons = append(buttons, tgbotapi.NewInlineKeyboardButtonData(
		"üìä –ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ",
		"back_to_feedback_stats",
	))

	// –†–∞–∑–±–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Å—Ç—Ä–æ–∫–∏
	var rows [][]tgbotapi.InlineKeyboardButton
	if len(buttons) > 0 {
		// –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: –Ω–∞–≤–∏–≥–∞—Ü–∏—è
		if len(buttons) >= 2 {
			rows = append(rows, []tgbotapi.InlineKeyboardButton{buttons[0], buttons[1]})
			buttons = buttons[2:]
		} else if len(buttons) == 1 {
			rows = append(rows, []tgbotapi.InlineKeyboardButton{buttons[0]})
			buttons = buttons[1:]
		}

		// –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
		for _, button := range buttons {
			rows = append(rows, []tgbotapi.InlineKeyboardButton{button})
		}
	}

	return tgbotapi.NewInlineKeyboardMarkup(rows...)
}

// sendFeedbackItem –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–∏–Ω –æ—Ç–∑—ã–≤.
func (fh *FeedbackHandlerImpl) sendFeedbackItem(chatID int64, fb map[string]interface{}) error {
	feedbackID := fb["id"].(int)
	firstName := fb["first_name"].(string)
	feedbackTextContent := strings.ReplaceAll(fb["feedback_text"].(string), "\n", " ")
	charCount := len([]rune(feedbackTextContent))

	// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ—Ä–µ
	username := "‚Äì"
	if fb["username"] != nil {
		username = "@" + fb["username"].(string)
	}

	// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
	createdAt := fb["created_at"].(time.Time)
	dateStr := createdAt.Format("02.01.2006 15:04")

	// –ò–∫–æ–Ω–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–∑—ã–≤–∞
	statusIcon := "üè∑Ô∏è"
	statusText := "–û–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏"
	if fb["is_processed"].(bool) {
		statusIcon = "‚úÖ"
		statusText = "–û–±—Ä–∞–±–æ—Ç–∞–Ω"
	}

	// –ò–∫–æ–Ω–∫–∞ –¥–ª–∏–Ω—ã –æ—Ç–∑—ã–≤–∞
	charIcon := "üìù"
	if charCount < 50 {
		charIcon = "üí¨"
	} else if charCount < 200 {
		charIcon = "üìù"
	} else {
		charIcon = "üìñ"
	}

	// –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
	contactStr := ""
	if fb["contact_info"] != nil && fb["contact_info"].(string) != "" {
		contactStr = fmt.Sprintf("\nüîó <i>–ö–æ–Ω—Ç–∞–∫—Ç—ã: %s</i>", fb["contact_info"].(string))
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	fullMessage := fmt.Sprintf(
		"%s <b>%s</b> %s\n"+
			"üë§ <b>–ê–≤—Ç–æ—Ä:</b> %s\n"+
			"üìä <b>–°—Ç–∞—Ç—É—Å:</b> %s (%d —Å–∏–º–≤–æ–ª–æ–≤)\n"+
			"‚è∞ <b>–î–∞—Ç–∞:</b> %s%s\n\n"+
			"<b>üì® –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞:</b>\n"+
			"<i>%s</i>",
		statusIcon, firstName, username,
		statusText,
		charIcon,
		charCount,
		dateStr,
		contactStr,
		feedbackTextContent,
	)

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
	var buttons [][]tgbotapi.InlineKeyboardButton
	if fb["is_processed"].(bool) {
		buttons = [][]tgbotapi.InlineKeyboardButton{
			{
				tgbotapi.NewInlineKeyboardButtonData("üîÑ –í–µ—Ä–Ω—É—Ç—å –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É", fmt.Sprintf("fb_unprocess_%d", feedbackID)),
				tgbotapi.NewInlineKeyboardButtonData("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", fmt.Sprintf("fb_delete_%d", feedbackID)),
			},
		}
	} else {
		buttons = [][]tgbotapi.InlineKeyboardButton{
			{
				tgbotapi.NewInlineKeyboardButtonData("‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω", fmt.Sprintf("fb_process_%d", feedbackID)),
				tgbotapi.NewInlineKeyboardButtonData("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", fmt.Sprintf("fb_delete_%d", feedbackID)),
			},
		}
	}

	keyboard := tgbotapi.NewInlineKeyboardMarkup(buttons...)

	msg := tgbotapi.NewMessage(chatID, fullMessage)
	msg.ParseMode = tgbotapi.ModeHTML
	msg.ReplyMarkup = keyboard
	_, err := fh.bot.Send(msg)
	return err
}

// ========== –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (–±—É–¥—É—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –ø–æ–∑–∂–µ) ==========

// HandleFeedbackMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–∑—ã–≤–æ–º.
func (fh *FeedbackHandlerImpl) HandleFeedbackMessage(message *tgbotapi.Message, user *models.User) error {
	feedbackText := message.Text

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –æ—Ç–∑—ã–≤–∞
	if len([]rune(feedbackText)) < 10 {
		return fh.handleFeedbackTooShort(message, user)
	}
	if len([]rune(feedbackText)) > 1000 {
		return fh.handleFeedbackTooLong(message, user)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ username
	if user.Username == "" {
		return fh.handleFeedbackContactRequest(message, user, feedbackText)
	}

	// –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–∏–Ω—è—Ç–∏–µ –æ—Ç–∑—ã–≤–∞
	log.Printf("–û—Ç–∑—ã–≤ –ø—Ä–∏–Ω—è—Ç: len=%d, has_username=%v", len([]rune(feedbackText)), user.Username != "")

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–∑—ã–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
	return fh.handleFeedbackComplete(message, user, feedbackText, nil)
}

// handleFeedbackTooShort –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–∑—ã–≤.
func (fh *FeedbackHandlerImpl) handleFeedbackTooShort(message *tgbotapi.Message, user *models.User) error {
	feedbackText := message.Text
	count := len([]rune(feedbackText))

	errorText := fmt.Sprintf("%s\n\n%s",
		fh.service.Localizer.Get(user.InterfaceLanguageCode, "feedback_too_short"),
		fh.service.Localizer.GetWithParams(user.InterfaceLanguageCode, "feedback_char_count", map[string]string{
			"count": strconv.Itoa(count),
		}),
	)

	return fh.sendMessage(message.Chat.ID, errorText)
}

// handleFeedbackTooLong –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –æ—Ç–∑—ã–≤.
func (fh *FeedbackHandlerImpl) handleFeedbackTooLong(message *tgbotapi.Message, user *models.User) error {
	feedbackText := message.Text
	count := len([]rune(feedbackText))

	errorText := fmt.Sprintf("%s\n\n%s",
		fh.service.Localizer.Get(user.InterfaceLanguageCode, "feedback_too_long"),
		fh.service.Localizer.GetWithParams(user.InterfaceLanguageCode, "feedback_char_count", map[string]string{
			"count": strconv.Itoa(count),
		}),
	)

	return fh.sendMessage(message.Chat.ID, errorText)
}

// handleFeedbackContactRequest –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ username.
func (fh *FeedbackHandlerImpl) handleFeedbackContactRequest(message *tgbotapi.Message, user *models.User, feedbackText string) error {
	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∑—ã–≤ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
	fh.tempFeedbacks[user.ID] = feedbackText

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
	err := fh.service.DB.UpdateUserState(user.ID, models.StateWaitingFeedbackContact)
	if err != nil {
		return err
	}

	// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
	contactText := fh.service.Localizer.Get(user.InterfaceLanguageCode, "feedback_contact_request")
	return fh.sendMessage(message.Chat.ID, contactText)
}

// handleFeedbackComplete –∑–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏.
func (fh *FeedbackHandlerImpl) handleFeedbackComplete(message *tgbotapi.Message, user *models.User, feedbackText string, contactInfo *string) error {
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
	adminIDs := fh.adminChatIDs

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∑—ã–≤ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
	err := fh.service.SaveUserFeedback(user.ID, feedbackText, contactInfo, adminIDs)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞: %v", err)
		// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—é –¥–ª—è –æ—à–∏–±–∫–∏
		errorText := fh.service.Localizer.Get(user.InterfaceLanguageCode, "feedback_error_generic")
		if errorText == "feedback_error_generic" { // fallback –≤ —Å–ª—É—á–∞–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞
			errorText = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
		}
		return fh.sendMessage(message.Chat.ID, errorText)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	successText := fh.service.Localizer.Get(user.InterfaceLanguageCode, "feedback_saved")
	if successText == "feedback_saved" { // fallback –≤ —Å–ª—É—á–∞–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞
		successText = "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –µ–≥–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º."
	}

	// –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	delete(fh.tempFeedbacks, user.ID)

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	err = fh.service.DB.UpdateUserState(user.ID, models.StateActive)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err)
	}

	err = fh.service.DB.UpdateUserStatus(user.ID, models.StatusActive)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err)
	}

	return fh.sendMessage(message.Chat.ID, successText)
}

// HandleFeedbackContactMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
func (fh *FeedbackHandlerImpl) HandleFeedbackContactMessage(message *tgbotapi.Message, user *models.User) error {
	contactInfo := strings.TrimSpace(message.Text)

	// –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
	if contactInfo == "" {
		return fh.sendMessage(message.Chat.ID,
			fh.service.Localizer.Get(user.InterfaceLanguageCode, "feedback_contact_placeholder"))
	}

	// –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –æ—Ç–∑—ã–≤ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
	feedbackText, exists := fh.tempFeedbacks[user.ID]
	if !exists {
		// –ï—Å–ª–∏ –æ—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ—Å–∏–º –Ω–∞–ø–∏—Å–∞—Ç—å –∑–∞–Ω–æ–≤–æ
		errorText := fh.service.Localizer.Get(user.InterfaceLanguageCode, "feedback_not_found")
		if errorText == "feedback_not_found" {
			errorText = "‚ùå –û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤ –∑–∞–Ω–æ–≤–æ."
		}
		// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞
		_ = fh.service.DB.UpdateUserState(user.ID, models.StateWaitingFeedback)
		return fh.sendMessage(message.Chat.ID, errorText)
	}

	// –£–¥–∞–ª—è–µ–º –æ—Ç–∑—ã–≤ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
	delete(fh.tempFeedbacks, user.ID)

	// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
	confirmedText := fh.service.Localizer.Get(user.InterfaceLanguageCode, "feedback_contact_provided")
	fh.sendMessage(message.Chat.ID, confirmedText)

	return fh.handleFeedbackComplete(message, user, feedbackText, &contactInfo)
}

// HandleFeedbackProcess –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ—Ç–∫—É –æ—Ç–∑—ã–≤–∞ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ.
func (fh *FeedbackHandlerImpl) HandleFeedbackProcess(callback *tgbotapi.CallbackQuery, user *models.User, feedbackIDStr string) error {
	feedbackID, err := strconv.Atoi(feedbackIDStr)
	if err != nil {
		return fh.sendMessage(callback.Message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –æ—Ç–∑—ã–≤–∞")
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–∑—ã–≤–∞ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
	err = fh.service.UpdateFeedbackStatus(feedbackID, true)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–∑—ã–≤–∞ %d: %v", feedbackID, err)
		return fh.sendMessage(callback.Message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
	confirmMsg := fmt.Sprintf("‚úÖ –û—Ç–∑—ã–≤ #%d –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ <b>–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π</b>", feedbackID)
	msg := tgbotapi.NewMessage(callback.Message.Chat.ID, confirmMsg)
	msg.ParseMode = tgbotapi.ModeHTML
	if _, err := fh.bot.Send(msg); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: %v", err)
	}

	return nil
}

// HandleFeedbackUnprocess –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–∑—ã–≤ –≤ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ.
func (fh *FeedbackHandlerImpl) HandleFeedbackUnprocess(callback *tgbotapi.CallbackQuery, user *models.User, feedbackIDStr string) error {
	feedbackID, err := strconv.Atoi(feedbackIDStr)
	if err != nil {
		return fh.sendMessage(callback.Message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –æ—Ç–∑—ã–≤–∞")
	}

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–∑—ã–≤ –≤ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å
	err = fh.service.UpdateFeedbackStatus(feedbackID, false)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –æ—Ç–∑—ã–≤–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É %d: %v", feedbackID, err)
		return fh.sendMessage(callback.Message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞")
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
	confirmMsg := fmt.Sprintf("üîÑ –û—Ç–∑—ã–≤ #%d –≤–æ–∑–≤—Ä–∞—â–µ–Ω –≤ <b>–æ–±—Ä–∞–±–æ—Ç–∫—É</b>", feedbackID)
	msg := tgbotapi.NewMessage(callback.Message.Chat.ID, confirmMsg)
	msg.ParseMode = tgbotapi.ModeHTML
	if _, err := fh.bot.Send(msg); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞: %v", err)
	}

	return nil
}

// HandleFeedbackDelete —É–¥–∞–ª—è–µ—Ç –æ—Ç–∑—ã–≤.
func (fh *FeedbackHandlerImpl) HandleFeedbackDelete(callback *tgbotapi.CallbackQuery, user *models.User, feedbackIDStr string) error {
	feedbackID, err := strconv.Atoi(feedbackIDStr)
	if err != nil {
		return fh.sendMessage(callback.Message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –æ—Ç–∑—ã–≤–∞")
	}

	// –£–¥–∞–ª—è–µ–º –æ—Ç–∑—ã–≤
	err = fh.service.DeleteFeedback(feedbackID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞ %d: %v", feedbackID, err)
		return fh.sendMessage(callback.Message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞")
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
	deleteMsg := fmt.Sprintf("üóëÔ∏è –û—Ç–∑—ã–≤ #%d <b>—É–¥–∞–ª–µ–Ω</b>", feedbackID)
	msg := tgbotapi.NewMessage(callback.Message.Chat.ID, deleteMsg)
	msg.ParseMode = tgbotapi.ModeHTML
	if _, err := fh.bot.Send(msg); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è: %v", err)
	}

	return nil
}

// HandleShowActiveFeedbacks –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ç–∑—ã–≤—ã.
func (fh *FeedbackHandlerImpl) HandleShowActiveFeedbacks(callback *tgbotapi.CallbackQuery, user *models.User) error {
	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–∑—ã–≤—ã
	feedbacks, err := fh.service.GetAllFeedback()
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤: %v", err)
		return fh.sendMessage(callback.Message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤")
	}

	if len(feedbacks) == 0 {
		return fh.sendMessage(callback.Message.Chat.ID, "üìù –û—Ç–∑—ã–≤–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç")
	}

	// –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ç–∑—ã–≤—ã (–Ω–µ –∞—Ä—Ö–∏–≤–Ω—ã–µ)
	var activeFeedbacks []map[string]interface{}
	for _, fb := range feedbacks {
		if isArchived, ok := fb["is_processed"].(bool); !ok || !isArchived {
			activeFeedbacks = append(activeFeedbacks, fb)
		}
	}

	if len(activeFeedbacks) == 0 {
		return fh.sendMessage(callback.Message.Chat.ID, "üéâ –í—Å–µ –æ—Ç–∑—ã–≤—ã –≤ –∞—Ä—Ö–∏–≤–µ!")
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –æ—Ç–∑—ã–≤ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π (—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
	return fh.editFeedbackWithNavigation(callback.Message.Chat.ID, callback.Message.MessageID, activeFeedbacks, 0, "active")
}

// HandleShowArchiveFeedbacks –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞—Ä—Ö–∏–≤–Ω—ã–µ –æ—Ç–∑—ã–≤—ã.
func (fh *FeedbackHandlerImpl) HandleShowArchiveFeedbacks(callback *tgbotapi.CallbackQuery, user *models.User) error {
	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–∑—ã–≤—ã
	feedbacks, err := fh.service.GetAllFeedback()
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤: %v", err)
		return fh.sendMessage(callback.Message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤")
	}

	if len(feedbacks) == 0 {
		return fh.sendMessage(callback.Message.Chat.ID, "üìù –û—Ç–∑—ã–≤–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç")
	}

	// –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞—Ä—Ö–∏–≤–Ω—ã–µ –æ—Ç–∑—ã–≤—ã
	var archivedFeedbacks []map[string]interface{}
	for _, fb := range feedbacks {
		if isArchived, ok := fb["is_processed"].(bool); ok && isArchived {
			archivedFeedbacks = append(archivedFeedbacks, fb)
		}
	}

	if len(archivedFeedbacks) == 0 {
		return fh.sendMessage(callback.Message.Chat.ID, "üì¶ –ê—Ä—Ö–∏–≤ –ø—É—Å—Ç")
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –æ—Ç–∑—ã–≤ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π (—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
	return fh.editFeedbackWithNavigation(callback.Message.Chat.ID, callback.Message.MessageID, archivedFeedbacks, 0, "archive")
}

// HandleShowAllFeedbacks –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –æ—Ç–∑—ã–≤—ã.
func (fh *FeedbackHandlerImpl) HandleShowAllFeedbacks(callback *tgbotapi.CallbackQuery, user *models.User) error {
	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–∑—ã–≤—ã
	feedbacks, err := fh.service.GetAllFeedback()
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤: %v", err)
		return fh.sendMessage(callback.Message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤")
	}

	if len(feedbacks) == 0 {
		return fh.sendMessage(callback.Message.Chat.ID, "üìù –û—Ç–∑—ã–≤–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç")
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –æ—Ç–∑—ã–≤ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π (—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
	return fh.editFeedbackWithNavigation(callback.Message.Chat.ID, callback.Message.MessageID, feedbacks, 0, "all")
}

// HandleBrowseActiveFeedbacks –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ç–∑—ã–≤—ã.
func (fh *FeedbackHandlerImpl) HandleBrowseActiveFeedbacks(callback *tgbotapi.CallbackQuery, user *models.User, indexStr string) error {
	return fh.handleBrowseFeedbacks(callback, user, indexStr, "active")
}

// HandleBrowseArchiveFeedbacks –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –∞—Ä—Ö–∏–≤–Ω—ã–µ –æ—Ç–∑—ã–≤—ã.
func (fh *FeedbackHandlerImpl) HandleBrowseArchiveFeedbacks(callback *tgbotapi.CallbackQuery, user *models.User, indexStr string) error {
	return fh.handleBrowseFeedbacks(callback, user, indexStr, "archive")
}

// HandleBrowseAllFeedbacks –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –≤—Å–µ –æ—Ç–∑—ã–≤—ã.
func (fh *FeedbackHandlerImpl) HandleBrowseAllFeedbacks(callback *tgbotapi.CallbackQuery, user *models.User, indexStr string) error {
	return fh.handleBrowseFeedbacks(callback, user, indexStr, "all")
}

// handleBrowseFeedbacks –æ–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –æ—Ç–∑—ã–≤–∞–º.
func (fh *FeedbackHandlerImpl) handleBrowseFeedbacks(callback *tgbotapi.CallbackQuery, user *models.User, indexStr string, feedbackType string) error {
	// –ü–∞—Ä—Å–∏–º –∏–Ω–¥–µ–∫—Å
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return fh.sendMessage(callback.Message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö")
	}

	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–∑—ã–≤—ã
	allFeedbacks, err := fh.service.GetAllFeedback()
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤: %v", err)
		return fh.sendMessage(callback.Message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤")
	}

	// –§–∏–ª—å—Ç—Ä—É–µ–º –æ—Ç–∑—ã–≤—ã –ø–æ —Ç–∏–ø—É
	var feedbacks []map[string]interface{}
	switch feedbackType {
	case "active":
		for _, fb := range allFeedbacks {
			if isArchived, ok := fb["is_processed"].(bool); !ok || !isArchived {
				feedbacks = append(feedbacks, fb)
			}
		}
	case "archive":
		for _, fb := range allFeedbacks {
			if isArchived, ok := fb["is_processed"].(bool); ok && isArchived {
				feedbacks = append(feedbacks, fb)
			}
		}
	case "all":
		feedbacks = allFeedbacks
	}

	if len(feedbacks) == 0 {
		return fh.sendMessage(callback.Message.Chat.ID, "üìù –û—Ç–∑—ã–≤–æ–≤ –Ω–µ—Ç")
	}

	if index < 0 || index >= len(feedbacks) {
		return fh.sendMessage(callback.Message.Chat.ID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –æ—Ç–∑—ã–≤–∞")
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–∑—ã–≤ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π (—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
	return fh.editFeedbackWithNavigation(callback.Message.Chat.ID, callback.Message.MessageID, feedbacks, index, feedbackType)
}

// HandleNavigateFeedback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ –æ—Ç–∑—ã–≤–∞–º.
func (fh *FeedbackHandlerImpl) HandleNavigateFeedback(callback *tgbotapi.CallbackQuery, user *models.User, feedbackType string, indexStr string) error {
	return fh.handleBrowseFeedbacks(callback, user, indexStr, feedbackType)
}

// HandleArchiveFeedback –∞—Ä—Ö–∏–≤–∏—Ä—É–µ—Ç –æ—Ç–∑—ã–≤.
func (fh *FeedbackHandlerImpl) HandleArchiveFeedback(callback *tgbotapi.CallbackQuery, user *models.User, indexStr string) error {
	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ç–∑—ã–≤—ã
	allFeedbacks, err := fh.service.GetAllFeedback()
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤: %v", err)
		return fh.sendMessage(callback.Message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤")
	}

	// –§–∏–ª—å—Ç—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ç–∑—ã–≤—ã
	var activeFeedbacks []map[string]interface{}
	for _, fb := range allFeedbacks {
		if isArchived, ok := fb["is_processed"].(bool); !ok || !isArchived {
			activeFeedbacks = append(activeFeedbacks, fb)
		}
	}

	// –ü–∞—Ä—Å–∏–º –∏–Ω–¥–µ–∫—Å
	index, err := strconv.Atoi(indexStr)
	if err != nil || index < 0 || index >= len(activeFeedbacks) {
		return fh.sendMessage(callback.Message.Chat.ID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –æ—Ç–∑—ã–≤–∞")
	}

	// –ü–æ–ª—É—á–∞–µ–º ID –æ—Ç–∑—ã–≤–∞ –¥–ª—è –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è
	feedback := activeFeedbacks[index]
	feedbackID := feedback["id"].(int)

	// –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º –æ—Ç–∑—ã–≤
	err = fh.service.ArchiveFeedback(feedbackID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞: %v", err)
		return fh.sendMessage(callback.Message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞")
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤
	activeFeedbacks = append(activeFeedbacks[:index], activeFeedbacks[index+1:]...)

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –æ—Ç–∑—ã–≤ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ—Ç–∑—ã–≤–æ–≤
	if len(activeFeedbacks) == 0 {
		// –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞—è —á—Ç–æ –≤—Å–µ –æ—Ç–∑—ã–≤—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
		text := "‚úÖ –û—Ç–∑—ã–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!\n\nüéâ –í—Å–µ –æ—Ç–∑—ã–≤—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!"
		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üìä –ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", "back_to_feedback_stats"),
			),
		)

		editMsg := tgbotapi.NewEditMessageText(callback.Message.Chat.ID, callback.Message.MessageID, text)
		editMsg.ReplyMarkup = &keyboard
		_, err := fh.bot.Send(editMsg)
		return err
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –æ—Ç–∑—ã–≤ (–∏–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π, –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π)
	nextIndex := index
	if nextIndex >= len(activeFeedbacks) {
		nextIndex = len(activeFeedbacks) - 1
	}

	return fh.editFeedbackWithNavigation(callback.Message.Chat.ID, callback.Message.MessageID, activeFeedbacks, nextIndex, "active")
}

// HandleBackToFeedbacks –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ —Å–ø–∏—Å–∫—É –æ—Ç–∑—ã–≤–æ–≤.
func (fh *FeedbackHandlerImpl) HandleBackToFeedbacks(callback *tgbotapi.CallbackQuery, user *models.User, feedbackType string) error {
	switch feedbackType {
	case "active":
		return fh.editActiveFeedbacksList(callback.Message.Chat.ID, callback.Message.MessageID, user)
	case "archive":
		return fh.editArchiveFeedbacksList(callback.Message.Chat.ID, callback.Message.MessageID, user)
	case "all":
		return fh.editAllFeedbacksList(callback.Message.Chat.ID, callback.Message.MessageID, user)
	default:
		return fh.editFeedbackStatistics(callback.Message.Chat.ID, callback.Message.MessageID, user)
	}
}

// HandleBackToFeedbackStats –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –æ—Ç–∑—ã–≤–æ–≤.
func (fh *FeedbackHandlerImpl) HandleBackToFeedbackStats(callback *tgbotapi.CallbackQuery, user *models.User) error {
	return fh.editFeedbackStatistics(callback.Message.Chat.ID, callback.Message.MessageID, user)
}

// editActiveFeedbacks —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤.
func (fh *FeedbackHandlerImpl) editActiveFeedbacks(chatID int64, messageID int, user *models.User) error {
	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–∑—ã–≤—ã
	allFeedbacks, err := fh.service.GetAllFeedback()
	if err != nil {
		return fh.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤: "+err.Error())
	}

	// –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ç–∑—ã–≤—ã
	var activeFeedbacks []map[string]interface{}
	for _, feedback := range allFeedbacks {
		if isArchived, ok := feedback["is_processed"].(bool); !ok || !isArchived {
			activeFeedbacks = append(activeFeedbacks, feedback)
		}
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ç–∑—ã–≤—ã
	if len(activeFeedbacks) == 0 {
		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤
		text := "üéâ –í—Å–µ –æ—Ç–∑—ã–≤—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!"
		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üìä –ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", "back_to_feedback_stats"),
			),
		)

		editMsg := tgbotapi.NewEditMessageText(chatID, messageID, text)
		editMsg.ReplyMarkup = &keyboard
		_, err := fh.bot.Send(editMsg)
		return err
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –æ—Ç–∑—ã–≤ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
	return fh.editFeedbackWithNavigation(chatID, messageID, activeFeedbacks, 0, "active")
}

// editArchiveFeedbacks —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤.
func (fh *FeedbackHandlerImpl) editArchiveFeedbacks(chatID int64, messageID int, user *models.User) error {
	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–∑—ã–≤—ã
	allFeedbacks, err := fh.service.GetAllFeedback()
	if err != nil {
		return fh.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤: "+err.Error())
	}

	// –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã
	var archiveFeedbacks []map[string]interface{}
	for _, feedback := range allFeedbacks {
		if isArchived, ok := feedback["is_processed"].(bool); ok && isArchived {
			archiveFeedbacks = append(archiveFeedbacks, feedback)
		}
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã
	if len(archiveFeedbacks) == 0 {
		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤
		text := "üì¶ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç"
		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üìä –ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", "back_to_feedback_stats"),
			),
		)

		editMsg := tgbotapi.NewEditMessageText(chatID, messageID, text)
		editMsg.ReplyMarkup = &keyboard
		_, err := fh.bot.Send(editMsg)
		return err
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –æ—Ç–∑—ã–≤ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
	return fh.editFeedbackWithNavigation(chatID, messageID, archiveFeedbacks, 0, "archive")
}

// editAllFeedbacks —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –≤—Å–µ—Ö –æ—Ç–∑—ã–≤–æ–≤.
func (fh *FeedbackHandlerImpl) editAllFeedbacks(chatID int64, messageID int, user *models.User) error {
	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–∑—ã–≤—ã
	allFeedbacks, err := fh.service.GetAllFeedback()
	if err != nil {
		return fh.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤: "+err.Error())
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ç–∑—ã–≤—ã
	if len(allFeedbacks) == 0 {
		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ—Ç–∑—ã–≤–æ–≤
		text := "üìù –û—Ç–∑—ã–≤–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç"
		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üìä –ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", "back_to_feedback_stats"),
			),
		)

		editMsg := tgbotapi.NewEditMessageText(chatID, messageID, text)
		editMsg.ReplyMarkup = &keyboard
		_, err := fh.bot.Send(editMsg)
		return err
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –æ—Ç–∑—ã–≤ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
	return fh.editFeedbackWithNavigation(chatID, messageID, allFeedbacks, 0, "all")
}

// editActiveFeedbacksList —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ (–∑–∞–≥–æ–ª–æ–≤–æ–∫).
func (fh *FeedbackHandlerImpl) editActiveFeedbacksList(chatID int64, messageID int, user *models.User) error {
	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–∑—ã–≤—ã
	allFeedbacks, err := fh.service.GetAllFeedback()
	if err != nil {
		return fh.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤: "+err.Error())
	}

	// –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ç–∑—ã–≤—ã
	var activeFeedbacks []map[string]interface{}
	for _, feedback := range allFeedbacks {
		if isArchived, ok := feedback["is_processed"].(bool); !ok || !isArchived {
			activeFeedbacks = append(activeFeedbacks, feedback)
		}
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ç–∑—ã–≤—ã
	if len(activeFeedbacks) == 0 {
		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤
		text := "üéâ –í—Å–µ –æ—Ç–∑—ã–≤—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!"
		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üìä –ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", "back_to_feedback_stats"),
			),
		)

		editMsg := tgbotapi.NewEditMessageText(chatID, messageID, text)
		editMsg.ReplyMarkup = &keyboard
		_, err := fh.bot.Send(editMsg)
		return err
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤
	text := fmt.Sprintf("üî• <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –æ—Ç–∑—ã–≤—ã (%d):</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–∑—ã–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", len(activeFeedbacks))

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Ç–∑—ã–≤–∞
	var rows [][]tgbotapi.InlineKeyboardButton
	for i, feedback := range activeFeedbacks {
		feedbackID := feedback["id"].(int)
		firstName := feedback["first_name"].(string)

		buttonText := fmt.Sprintf("üìù %s (ID: %d)", firstName, feedbackID)
		if username, ok := feedback["username"].(string); ok && username != "" {
			buttonText = fmt.Sprintf("üìù %s (@%s) (ID: %d)", firstName, username, feedbackID)
		}
		buttonData := fmt.Sprintf("nav_active_feedback_%d", i)

		rows = append(rows, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(buttonText, buttonData),
		))
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("üìä –ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", "back_to_feedback_stats"),
	))

	keyboard := tgbotapi.NewInlineKeyboardMarkup(rows...)

	editMsg := tgbotapi.NewEditMessageText(chatID, messageID, text)
	editMsg.ReplyMarkup = &keyboard
	editMsg.ParseMode = tgbotapi.ModeHTML
	_, err = fh.bot.Send(editMsg)
	return err
}

// editArchiveFeedbacksList —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ (–∑–∞–≥–æ–ª–æ–≤–æ–∫).
func (fh *FeedbackHandlerImpl) editArchiveFeedbacksList(chatID int64, messageID int, user *models.User) error {
	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–∑—ã–≤—ã
	allFeedbacks, err := fh.service.GetAllFeedback()
	if err != nil {
		return fh.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤: "+err.Error())
	}

	// –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã
	var archiveFeedbacks []map[string]interface{}
	for _, feedback := range allFeedbacks {
		if isArchived, ok := feedback["is_processed"].(bool); ok && isArchived {
			archiveFeedbacks = append(archiveFeedbacks, feedback)
		}
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã
	if len(archiveFeedbacks) == 0 {
		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤
		text := "üì¶ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç"
		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üìä –ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", "back_to_feedback_stats"),
			),
		)

		editMsg := tgbotapi.NewEditMessageText(chatID, messageID, text)
		editMsg.ReplyMarkup = &keyboard
		_, err := fh.bot.Send(editMsg)
		return err
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ø–∏—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤
	text := fmt.Sprintf("üì¶ <b>–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã (%d):</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–∑—ã–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", len(archiveFeedbacks))

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Ç–∑—ã–≤–∞
	var rows [][]tgbotapi.InlineKeyboardButton
	for i, feedback := range archiveFeedbacks {
		feedbackID := feedback["id"].(int)
		firstName := feedback["first_name"].(string)

		buttonText := fmt.Sprintf("üìù %s (ID: %d)", firstName, feedbackID)
		if username, ok := feedback["username"].(string); ok && username != "" {
			buttonText = fmt.Sprintf("üìù %s (@%s) (ID: %d)", firstName, username, feedbackID)
		}
		buttonData := fmt.Sprintf("nav_archive_feedback_%d", i)

		rows = append(rows, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(buttonText, buttonData),
		))
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("üìä –ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", "back_to_feedback_stats"),
	))

	keyboard := tgbotapi.NewInlineKeyboardMarkup(rows...)

	editMsg := tgbotapi.NewEditMessageText(chatID, messageID, text)
	editMsg.ReplyMarkup = &keyboard
	editMsg.ParseMode = tgbotapi.ModeHTML
	_, err = fh.bot.Send(editMsg)
	return err
}

// editAllFeedbacksList —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –≤—Å–µ—Ö –æ—Ç–∑—ã–≤–æ–≤ (–∑–∞–≥–æ–ª–æ–≤–æ–∫).
func (fh *FeedbackHandlerImpl) editAllFeedbacksList(chatID int64, messageID int, user *models.User) error {
	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–∑—ã–≤—ã
	allFeedbacks, err := fh.service.GetAllFeedback()
	if err != nil {
		return fh.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤: "+err.Error())
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ç–∑—ã–≤—ã
	if len(allFeedbacks) == 0 {
		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ—Ç–∑—ã–≤–æ–≤
		text := "üìù –û—Ç–∑—ã–≤–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç"
		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üìä –ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", "back_to_feedback_stats"),
			),
		)

		editMsg := tgbotapi.NewEditMessageText(chatID, messageID, text)
		editMsg.ReplyMarkup = &keyboard
		_, err := fh.bot.Send(editMsg)
		return err
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –æ—Ç–∑—ã–≤–æ–≤
	text := fmt.Sprintf("üìã <b>–í—Å–µ –æ—Ç–∑—ã–≤—ã (%d):</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–∑—ã–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", len(allFeedbacks))

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Ç–∑—ã–≤–∞
	var rows [][]tgbotapi.InlineKeyboardButton
	for i, feedback := range allFeedbacks {
		feedbackID := feedback["id"].(int)
		firstName := feedback["first_name"].(string)
		isProcessed := feedback["is_processed"].(bool)

		status := "üî•"
		if isProcessed {
			status = "üì¶"
		}

		buttonText := fmt.Sprintf("%s %s (ID: %d)", status, firstName, feedbackID)
		if username, ok := feedback["username"].(string); ok && username != "" {
			buttonText = fmt.Sprintf("%s %s (@%s) (ID: %d)", status, firstName, username, feedbackID)
		}
		buttonData := fmt.Sprintf("nav_all_feedback_%d", i)

		rows = append(rows, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(buttonText, buttonData),
		))
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("üìä –ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", "back_to_feedback_stats"),
	))

	keyboard := tgbotapi.NewInlineKeyboardMarkup(rows...)

	editMsg := tgbotapi.NewEditMessageText(chatID, messageID, text)
	editMsg.ReplyMarkup = &keyboard
	editMsg.ParseMode = tgbotapi.ModeHTML
	_, err = fh.bot.Send(editMsg)
	return err
}

// HandleDeleteCurrentFeedback —É–¥–∞–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π –æ—Ç–∑—ã–≤.
func (fh *FeedbackHandlerImpl) HandleDeleteCurrentFeedback(callback *tgbotapi.CallbackQuery, user *models.User, indexStr string) error {
	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã
	allFeedbacks, err := fh.service.GetAllFeedback()
	if err != nil {
		return fh.sendMessage(callback.Message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤: "+err.Error())
	}

	// –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã
	var archiveFeedbacks []map[string]interface{}
	for _, feedback := range allFeedbacks {
		if isProcessed, ok := feedback["is_processed"].(bool); ok && isProcessed {
			archiveFeedbacks = append(archiveFeedbacks, feedback)
		}
	}

	// –ü–∞—Ä—Å–∏–º –∏–Ω–¥–µ–∫—Å
	index, err := strconv.Atoi(indexStr)
	if err != nil || index < 0 || index >= len(archiveFeedbacks) {
		return fh.sendMessage(callback.Message.Chat.ID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –æ—Ç–∑—ã–≤–∞")
	}

	// –ü–æ–ª—É—á–∞–µ–º ID –æ—Ç–∑—ã–≤–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
	feedbackID := archiveFeedbacks[index]["id"].(int)

	// –£–¥–∞–ª—è–µ–º –æ—Ç–∑—ã–≤
	err = fh.service.DeleteFeedback(feedbackID)
	if err != nil {
		return fh.sendMessage(callback.Message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞: "+err.Error())
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ (—É–¥–∞–ª—è–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–π –æ—Ç–∑—ã–≤)
	archiveFeedbacks = append(archiveFeedbacks[:index], archiveFeedbacks[index+1:]...)

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –æ—Ç–∑—ã–≤ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ—Ç–∑—ã–≤–æ–≤
	if len(archiveFeedbacks) == 0 {
		// –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞—è —á—Ç–æ –≤—Å–µ –æ—Ç–∑—ã–≤—ã —É–¥–∞–ª–µ–Ω—ã
		text := "‚úÖ –û—Ç–∑—ã–≤ —É–¥–∞–ª–µ–Ω!\n\nüéâ –í—Å–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã —É–¥–∞–ª–µ–Ω—ã!"
		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üìä –ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", "back_to_feedback_stats"),
			),
		)

		editMsg := tgbotapi.NewEditMessageText(callback.Message.Chat.ID, callback.Message.MessageID, text)
		editMsg.ReplyMarkup = &keyboard
		_, err := fh.bot.Send(editMsg)
		return err
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –æ—Ç–∑—ã–≤ (–∏–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π, –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π)
	nextIndex := index
	if nextIndex >= len(archiveFeedbacks) {
		nextIndex = len(archiveFeedbacks) - 1
	}

	return fh.editFeedbackWithNavigation(callback.Message.Chat.ID, callback.Message.MessageID, archiveFeedbacks, nextIndex, "archive")
}

// HandleDeleteAllArchiveFeedbacks –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤.
func (fh *FeedbackHandlerImpl) HandleDeleteAllArchiveFeedbacks(callback *tgbotapi.CallbackQuery, user *models.User) error {
	// –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤
	allFeedbacks, err := fh.service.GetAllFeedback()
	if err != nil {
		return fh.sendMessage(callback.Message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤: "+err.Error())
	}

	// –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã
	processedCount := 0
	for _, feedback := range allFeedbacks {
		if isProcessed, ok := feedback["is_processed"].(bool); ok && isProcessed {
			processedCount++
		}
	}

	if processedCount == 0 {
		return fh.sendMessage(callback.Message.Chat.ID, "üì¶ –ù–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
	text := fmt.Sprintf("‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å <b>%d –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤</b>?\n\n‚ùóÔ∏è <b>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!</b>", processedCount)

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å –≤—Å–µ", "confirm_delete_all_archive"),
			tgbotapi.NewInlineKeyboardButtonData("‚ùå –û—Ç–º–µ–Ω–∞", "back_to_archive_feedbacks"),
		),
	)

	editMsg := tgbotapi.NewEditMessageText(callback.Message.Chat.ID, callback.Message.MessageID, text)
	editMsg.ReplyMarkup = &keyboard
	editMsg.ParseMode = tgbotapi.ModeHTML
	_, err = fh.bot.Send(editMsg)
	return err
}

// HandleConfirmDeleteAllArchive –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤.
func (fh *FeedbackHandlerImpl) HandleConfirmDeleteAllArchive(callback *tgbotapi.CallbackQuery, user *models.User) error {
	// –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã
	deletedCount, err := fh.service.DeleteAllProcessedFeedbacks()
	if err != nil {
		return fh.sendMessage(callback.Message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤: "+err.Error())
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
	text := fmt.Sprintf("‚úÖ <b>–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b>\n\nüóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –æ—Ç–∑—ã–≤–æ–≤: <b>%d</b>\n\nüìä –í—Å–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.", deletedCount)

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìä –ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", "back_to_feedback_stats"),
		),
	)

	editMsg := tgbotapi.NewEditMessageText(callback.Message.Chat.ID, callback.Message.MessageID, text)
	editMsg.ReplyMarkup = &keyboard
	editMsg.ParseMode = tgbotapi.ModeHTML
	_, err = fh.bot.Send(editMsg)
	return err
}

// HandleUnarchiveFeedback –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–∑—ã–≤ –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ.
func (fh *FeedbackHandlerImpl) HandleUnarchiveFeedback(callback *tgbotapi.CallbackQuery, user *models.User, indexStr string) error {
	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã
	allFeedbacks, err := fh.service.GetAllFeedback()
	if err != nil {
		return fh.sendMessage(callback.Message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤: "+err.Error())
	}

	// –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã
	var archiveFeedbacks []map[string]interface{}
	for _, feedback := range allFeedbacks {
		if isProcessed, ok := feedback["is_processed"].(bool); ok && isProcessed {
			archiveFeedbacks = append(archiveFeedbacks, feedback)
		}
	}

	// –ü–∞—Ä—Å–∏–º –∏–Ω–¥–µ–∫—Å
	index, err := strconv.Atoi(indexStr)
	if err != nil || index < 0 || index >= len(archiveFeedbacks) {
		return fh.sendMessage(callback.Message.Chat.ID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –æ—Ç–∑—ã–≤–∞")
	}

	// –ü–æ–ª—É—á–∞–µ–º ID –æ—Ç–∑—ã–≤–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ
	feedbackID := archiveFeedbacks[index]["id"].(int)

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–∑—ã–≤ –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ
	err = fh.service.UnarchiveFeedback(feedbackID)
	if err != nil {
		return fh.sendMessage(callback.Message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –æ—Ç–∑—ã–≤–∞ –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ: "+err.Error())
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ (—É–¥–∞–ª—è–µ–º –≤–æ–∑–≤—Ä–∞—â–µ–Ω–Ω—ã–π –æ—Ç–∑—ã–≤)
	archiveFeedbacks = append(archiveFeedbacks[:index], archiveFeedbacks[index+1:]...)

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –æ—Ç–∑—ã–≤ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ—Ç–∑—ã–≤–æ–≤
	if len(archiveFeedbacks) == 0 {
		// –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞—è —á—Ç–æ –≤—Å–µ –æ—Ç–∑—ã–≤—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã
		text := "‚úÖ –û—Ç–∑—ã–≤ –≤–æ–∑–≤—Ä–∞—â–µ–Ω –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ!\n\nüéâ –í—Å–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã!"
		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üìä –ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", "back_to_feedback_stats"),
			),
		)

		editMsg := tgbotapi.NewEditMessageText(callback.Message.Chat.ID, callback.Message.MessageID, text)
		editMsg.ReplyMarkup = &keyboard
		_, err := fh.bot.Send(editMsg)
		return err
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –æ—Ç–∑—ã–≤ (–∏–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π, –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π)
	nextIndex := index
	if nextIndex >= len(archiveFeedbacks) {
		nextIndex = len(archiveFeedbacks) - 1
	}

	return fh.editFeedbackWithNavigation(callback.Message.Chat.ID, callback.Message.MessageID, archiveFeedbacks, nextIndex, "archive")
}

// HandleFeedbackPrev –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –æ—Ç–∑—ã–≤—É.
func (fh *FeedbackHandlerImpl) HandleFeedbackPrev(callback *tgbotapi.CallbackQuery, user *models.User, indexStr string, feedbackType string) error {
	// TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ - –Ω–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞–∑–∞–¥
	return fh.sendMessage(callback.Message.Chat.ID, "‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ç–∑—ã–≤ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")
}

// HandleFeedbackNext –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –æ—Ç–∑—ã–≤—É.
func (fh *FeedbackHandlerImpl) HandleFeedbackNext(callback *tgbotapi.CallbackQuery, user *models.User, indexStr string, feedbackType string) error {
	// TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ - –Ω–∞–≤–∏–≥–∞—Ü–∏—è –≤–ø–µ—Ä–µ–¥
	return fh.sendMessage(callback.Message.Chat.ID, "‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π –æ—Ç–∑—ã–≤ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")
}

// HandleFeedbackBack –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫ —Å–ø–∏—Å–∫—É –æ—Ç–∑—ã–≤–æ–≤.
func (fh *FeedbackHandlerImpl) HandleFeedbackBack(callback *tgbotapi.CallbackQuery, user *models.User, feedbackType string) error {
	// TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ - –≤–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É
	return fh.sendMessage(callback.Message.Chat.ID, "üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")
}
