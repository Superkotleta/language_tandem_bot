package handlers

import (
	"fmt"
	"sort"

	"language-exchange-bot/internal/core"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// KeyboardBuilder —Å–æ–∑–¥–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä –¥–ª—è Telegram
type KeyboardBuilder struct {
	service *core.BotService
}

// NewKeyboardBuilder —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä KeyboardBuilder
func NewKeyboardBuilder(service *core.BotService) *KeyboardBuilder {
	return &KeyboardBuilder{
		service: service,
	}
}

// CreateLanguageKeyboard —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
func (kb *KeyboardBuilder) CreateLanguageKeyboard(interfaceLang, keyboardType string, excludeLang string, showBackButton bool) tgbotapi.InlineKeyboardMarkup {
	type langOption struct{ code, flag string }
	languages := []langOption{
		{"en", "üá∫üá∏"}, {"ru", "üá∑üá∫"}, {"es", "üá™üá∏"}, {"zh", "üá®üá≥"},
	}

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º Map –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
	uniqueButtons := make(map[string]tgbotapi.InlineKeyboardButton)

	for _, lang := range languages {
		// –ò—Å–∫–ª—é—á–∞–µ–º —É–∫–∞–∑–∞–Ω–Ω—ã–π —è–∑—ã–∫ –∏–∑ —Å–ø–∏—Å–∫–∞
		if lang.code == excludeLang {
			continue
		}

		name := kb.service.Localizer.GetLanguageName(lang.code, interfaceLang)
		label := fmt.Sprintf("%s %s", lang.flag, name)
		callbackData := fmt.Sprintf("lang_%s_%s", keyboardType, lang.code)

		// –ò–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ callback data (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —è–∑—ã–∫–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç)
		if _, exists := uniqueButtons[callbackData]; !exists {
			button := tgbotapi.NewInlineKeyboardButtonData(label, callbackData)
			uniqueButtons[callbackData] = button
		}
	}

	// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º map –≤ –º–∞—Å—Å–∏–≤ –∫–Ω–æ–ø–æ–∫
	var buttons [][]tgbotapi.InlineKeyboardButton
	for _, button := range uniqueButtons {
		buttons = append(buttons, []tgbotapi.InlineKeyboardButton{button})
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥", –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
	if showBackButton {
		var backCallback string
		if keyboardType == "interface" || keyboardType == "native" {
			backCallback = "back_to_main_menu"
		} else {
			backCallback = "back_to_previous_step"
		}

		backButton := tgbotapi.NewInlineKeyboardButtonData(
			kb.service.Localizer.Get(interfaceLang, "back_button"),
			backCallback,
		)
		buttons = append(buttons, []tgbotapi.InlineKeyboardButton{backButton})
	}

	return tgbotapi.NewInlineKeyboardMarkup(buttons...)
}

// CreateInterestsKeyboard —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
func (kb *KeyboardBuilder) CreateInterestsKeyboard(interests map[int]string, selectedInterests []int, interfaceLang string) tgbotapi.InlineKeyboardMarkup {
	// –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
	selectedMap := make(map[int]bool)
	for _, id := range selectedInterests {
		selectedMap[id] = true
	}

	// –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–µ—Å—ã –ø–æ ID –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
	type interestPair struct {
		id   int
		name string
	}
	var sortedInterests []interestPair
	for id, name := range interests {
		sortedInterests = append(sortedInterests, interestPair{id, name})
	}
	sort.Slice(sortedInterests, func(i, j int) bool {
		return sortedInterests[i].id < sortedInterests[j].id
	})

	var buttons [][]tgbotapi.InlineKeyboardButton
	for _, interest := range sortedInterests {
		label := interest.name
		if selectedMap[interest.id] {
			label = "‚úÖ " + label
		}

		button := tgbotapi.NewInlineKeyboardButtonData(
			label,
			fmt.Sprintf("interest_%d", interest.id),
		)
		buttons = append(buttons, []tgbotapi.InlineKeyboardButton{button})
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
	continueButton := tgbotapi.NewInlineKeyboardButtonData(
		kb.service.Localizer.Get(interfaceLang, "interests_continue"),
		"interests_continue",
	)
	buttons = append(buttons, []tgbotapi.InlineKeyboardButton{continueButton})

	return tgbotapi.NewInlineKeyboardMarkup(buttons...)
}

// CreateMainMenuKeyboard —Å–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
func (kb *KeyboardBuilder) CreateMainMenuKeyboard(interfaceLang string) tgbotapi.InlineKeyboardMarkup {
	viewProfile := tgbotapi.NewInlineKeyboardButtonData(
		kb.service.Localizer.Get(interfaceLang, "main_menu_view_profile"),
		"main_view_profile",
	)
	editProfile := tgbotapi.NewInlineKeyboardButtonData(
		kb.service.Localizer.Get(interfaceLang, "main_menu_edit_profile"),
		"main_edit_profile",
	)
	changeLang := tgbotapi.NewInlineKeyboardButtonData(
		kb.service.Localizer.Get(interfaceLang, "main_menu_change_lang"),
		"main_change_language",
	)
	feedback := tgbotapi.NewInlineKeyboardButtonData(
		kb.service.Localizer.Get(interfaceLang, "main_menu_feedback"),
		"main_feedback",
	)

	// –ö–æ–º–ø–æ–Ω—É–µ–º –º–µ–Ω—é –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥ –¥–ª—è –ª—É—á—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
	buttons := [][]tgbotapi.InlineKeyboardButton{
		{viewProfile, editProfile},
		{changeLang, feedback},
	}
	return tgbotapi.NewInlineKeyboardMarkup(buttons...)
}

// CreateProfileMenuKeyboard —Å–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è
func (kb *KeyboardBuilder) CreateProfileMenuKeyboard(interfaceLang string) tgbotapi.InlineKeyboardMarkup {
	// –ö–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–º
	editInterests := tgbotapi.NewInlineKeyboardButtonData(
		kb.service.Localizer.Get(interfaceLang, "profile_edit_interests"),
		"edit_interests",
	)
	editLanguages := tgbotapi.NewInlineKeyboardButtonData(
		kb.service.Localizer.Get(interfaceLang, "profile_edit_languages"),
		"edit_languages",
	)
	changeInterfaceLang := tgbotapi.NewInlineKeyboardButtonData(
		kb.service.Localizer.Get(interfaceLang, "main_menu_change_lang"),
		"main_change_language",
	)
	reconfig := tgbotapi.NewInlineKeyboardButtonData(
		kb.service.Localizer.Get(interfaceLang, "profile_reconfigure"),
		"profile_reset_ask",
	)
	backToMain := tgbotapi.NewInlineKeyboardButtonData(
		kb.service.Localizer.Get(interfaceLang, "back_to_main"),
		"back_to_main_menu",
	)

	// –ü—è—Ç—å —Ä—è–¥–æ–≤: –∏–Ω—Ç–µ—Ä–µ—Å—ã, —è–∑—ã–∫–∏, —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞, —Å–±—Ä–æ—Å, –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
	buttons := [][]tgbotapi.InlineKeyboardButton{
		{editInterests},
		{editLanguages},
		{changeInterfaceLang},
		{reconfig},
		{backToMain},
	}
	return tgbotapi.NewInlineKeyboardMarkup(buttons...)
}

// CreateResetConfirmKeyboard —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–±—Ä–æ—Å–∞
func (kb *KeyboardBuilder) CreateResetConfirmKeyboard(interfaceLang string) tgbotapi.InlineKeyboardMarkup {
	yes := tgbotapi.NewInlineKeyboardButtonData(
		kb.service.Localizer.Get(interfaceLang, "profile_reset_yes"),
		"profile_reset_yes",
	)
	no := tgbotapi.NewInlineKeyboardButtonData(
		kb.service.Localizer.Get(interfaceLang, "profile_reset_no"),
		"profile_reset_no",
	)
	return tgbotapi.NewInlineKeyboardMarkup([][]tgbotapi.InlineKeyboardButton{{yes}, {no}}...)
}

// CreateLanguageLevelKeyboard —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è —è–∑—ã–∫–∞
func (kb *KeyboardBuilder) CreateLanguageLevelKeyboard(interfaceLang, targetLanguage string) tgbotapi.InlineKeyboardMarkup {
	return kb.CreateLanguageLevelKeyboardWithPrefix(interfaceLang, targetLanguage, "level_", true)
}

// CreateLanguageLevelKeyboardWithPrefix —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É—Ä–æ–≤–Ω—è —è–∑—ã–∫–∞ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º –ø—Ä–µ—Ñ–∏–∫—Å–æ–º
func (kb *KeyboardBuilder) CreateLanguageLevelKeyboardWithPrefix(interfaceLang, targetLanguage, prefix string, showBackButton bool) tgbotapi.InlineKeyboardMarkup {
	levels := []string{"beginner", "elementary", "intermediate", "upper_intermediate"}

	var buttons [][]tgbotapi.InlineKeyboardButton
	for _, level := range levels {
		text := kb.service.Localizer.Get(interfaceLang, "choose_level_"+level)
		callback := prefix + level
		button := tgbotapi.NewInlineKeyboardButtonData(text, callback)
		buttons = append(buttons, []tgbotapi.InlineKeyboardButton{button})
	}

	if showBackButton {
		backButton := tgbotapi.NewInlineKeyboardButtonData(
			kb.service.Localizer.Get(interfaceLang, "back_button"),
			"back_to_previous_step",
		)
		buttons = append(buttons, []tgbotapi.InlineKeyboardButton{backButton})
	}

	return tgbotapi.NewInlineKeyboardMarkup(buttons...)
}

// CreateProfileCompletedKeyboard —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
func (kb *KeyboardBuilder) CreateProfileCompletedKeyboard(interfaceLang string) tgbotapi.InlineKeyboardMarkup {
	mainMenuButton := tgbotapi.NewInlineKeyboardButtonData(
		kb.service.Localizer.Get(interfaceLang, "main_menu_button"),
		"back_to_main_menu",
	)
	return tgbotapi.NewInlineKeyboardMarkup([]tgbotapi.InlineKeyboardButton{mainMenuButton})
}

// CreateEditInterestsKeyboard —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
func (kb *KeyboardBuilder) CreateEditInterestsKeyboard(interests map[int]string, selectedInterests []int, interfaceLang string) tgbotapi.InlineKeyboardMarkup {
	// –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
	selectedMap := make(map[int]bool)
	for _, id := range selectedInterests {
		selectedMap[id] = true
	}

	// –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–µ—Å—ã –ø–æ ID
	type interestPair struct {
		id   int
		name string
	}
	var sortedInterests []interestPair
	for id, name := range interests {
		sortedInterests = append(sortedInterests, interestPair{id, name})
	}
	sort.Slice(sortedInterests, func(i, j int) bool {
		return sortedInterests[i].id < sortedInterests[j].id
	})

	var buttons [][]tgbotapi.InlineKeyboardButton
	for _, interest := range sortedInterests {
		label := interest.name
		if selectedMap[interest.id] {
			label = "‚úÖ " + label
		}

		button := tgbotapi.NewInlineKeyboardButtonData(
			label,
			fmt.Sprintf("edit_interest_%d", interest.id),
		)
		buttons = append(buttons, []tgbotapi.InlineKeyboardButton{button})
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å/–æ—Ç–º–µ–Ω–∏—Ç—å
	saveButton := tgbotapi.NewInlineKeyboardButtonData(
		kb.service.Localizer.Get(interfaceLang, "save_button"),
		"save_edits",
	)
	cancelButton := tgbotapi.NewInlineKeyboardButtonData(
		kb.service.Localizer.Get(interfaceLang, "cancel_button"),
		"cancel_edits",
	)

	buttons = append(buttons, []tgbotapi.InlineKeyboardButton{saveButton, cancelButton})
	return tgbotapi.NewInlineKeyboardMarkup(buttons...)
}

// CreateEditLanguagesKeyboard —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —è–∑—ã–∫–æ–≤
func (kb *KeyboardBuilder) CreateEditLanguagesKeyboard(interfaceLang, nativeLang, targetLang, level string) tgbotapi.InlineKeyboardMarkup {
	var buttons [][]tgbotapi.InlineKeyboardButton

	// –†–æ–¥–Ω–æ–π —è–∑—ã–∫
	nativeName := kb.service.Localizer.GetLanguageName(nativeLang, interfaceLang)
	nativeButton := tgbotapi.NewInlineKeyboardButtonData(
		fmt.Sprintf("üè† %s: %s", kb.service.Localizer.Get(interfaceLang, "profile_field_native"), nativeName),
		"edit_native_lang",
	)
	buttons = append(buttons, []tgbotapi.InlineKeyboardButton{nativeButton})

	// –ò–∑—É—á–∞–µ–º—ã–π —è–∑—ã–∫ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–æ–¥–Ω–æ–π —è–∑—ã–∫ - —Ä—É—Å—Å–∫–∏–π)
	if nativeLang == "ru" {
		targetName := kb.service.Localizer.GetLanguageName(targetLang, interfaceLang)
		targetButton := tgbotapi.NewInlineKeyboardButtonData(
			fmt.Sprintf("üìö %s: %s", kb.service.Localizer.Get(interfaceLang, "profile_field_target"), targetName),
			"edit_target_lang",
		)
		buttons = append(buttons, []tgbotapi.InlineKeyboardButton{targetButton})
	}

	// –£—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è —è–∑—ã–∫–æ–º
	if level != "" {
		levelName := kb.service.Localizer.Get(interfaceLang, "choose_level_"+level)
		levelButton := tgbotapi.NewInlineKeyboardButtonData(
			fmt.Sprintf("üéØ %s: %s", kb.service.Localizer.Get(interfaceLang, "level_label"), levelName),
			"edit_level",
		)
		buttons = append(buttons, []tgbotapi.InlineKeyboardButton{levelButton})
	}

	// –ö–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å/–æ—Ç–º–µ–Ω–∏—Ç—å
	saveButton := tgbotapi.NewInlineKeyboardButtonData(
		kb.service.Localizer.Get(interfaceLang, "save_button"),
		"save_edits",
	)
	cancelButton := tgbotapi.NewInlineKeyboardButtonData(
		kb.service.Localizer.Get(interfaceLang, "cancel_button"),
		"cancel_edits",
	)

	buttons = append(buttons, []tgbotapi.InlineKeyboardButton{saveButton, cancelButton})
	return tgbotapi.NewInlineKeyboardMarkup(buttons...)
}

// CreateSaveEditsKeyboard —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏–π
func (kb *KeyboardBuilder) CreateSaveEditsKeyboard(interfaceLang string) tgbotapi.InlineKeyboardMarkup {
	saveButton := tgbotapi.NewInlineKeyboardButtonData(
		kb.service.Localizer.Get(interfaceLang, "save_button"),
		"save_edits",
	)
	cancelButton := tgbotapi.NewInlineKeyboardButtonData(
		kb.service.Localizer.Get(interfaceLang, "cancel_button"),
		"cancel_edits",
	)

	return tgbotapi.NewInlineKeyboardMarkup([]tgbotapi.InlineKeyboardButton{saveButton, cancelButton})
}

// CreateFeedbackAdminKeyboard —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞–º–∏ (–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞)
func (kb *KeyboardBuilder) CreateFeedbackAdminKeyboard(interfaceLang string) tgbotapi.InlineKeyboardMarkup {
	// –í—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
	buttons := [][]tgbotapi.InlineKeyboardButton{
		{tgbotapi.NewInlineKeyboardButtonData("üÜï –ê–∫—Ç–∏–≤–Ω—ã–µ", "show_active_feedbacks")},
		{tgbotapi.NewInlineKeyboardButtonData("üìö –ê—Ä—Ö–∏–≤", "show_archive_feedbacks")},
		{tgbotapi.NewInlineKeyboardButtonData("üìã –í—Å–µ", "show_all_feedbacks")},
	}
	return tgbotapi.NewInlineKeyboardMarkup(buttons...)
}
