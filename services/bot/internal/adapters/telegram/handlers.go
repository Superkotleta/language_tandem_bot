package telegram

import (
	"fmt"
	"log"
	"strconv"
	"strings"

	"language-exchange-bot/internal/core"
	"language-exchange-bot/internal/models"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type TelegramHandler struct {
	bot               *tgbotapi.BotAPI
	service           *core.BotService
	editInterestsTemp map[int64][]int // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
}

func NewTelegramHandler(bot *tgbotapi.BotAPI, service *core.BotService) *TelegramHandler {
	return &TelegramHandler{
		bot:               bot,
		service:           service,
		editInterestsTemp: make(map[int64][]int),
	}
}

func (h *TelegramHandler) HandleUpdate(update tgbotapi.Update) error {
	if update.Message != nil {
		return h.handleMessage(update.Message)
	}
	if update.CallbackQuery != nil {
		return h.handleCallbackQuery(update.CallbackQuery)
	}
	return nil
}

func (h *TelegramHandler) handleMessage(message *tgbotapi.Message) error {
	user, err := h.service.HandleUserRegistration(
		message.From.ID,
		message.From.UserName,
		message.From.FirstName,
		message.From.LanguageCode,
	)
	if err != nil {
		log.Printf("Error handling user registration: %v", err)
		return err
	}

	if message.IsCommand() {
		return h.handleCommand(message, user)
	}
	return h.handleState(message, user)
}

func (h *TelegramHandler) handleCommand(message *tgbotapi.Message, user *models.User) error {
	switch message.Command() {
	case "start":
		return h.handleStartCommand(message, user)
	case "status":
		return h.handleStatusCommand(message, user)
	case "reset":
		return h.handleResetCommand(message, user)
	case "language":
		return h.handleLanguageCommand(message, user)
	case "profile":
		return h.handleProfileCommand(message, user)
	case "feedback":
		return h.handleFeedbackCommand(message, user)
	default:
		return h.sendMessage(message.Chat.ID, h.service.Localizer.Get(user.InterfaceLanguageCode, "unknown_command"))
	}
}

func (h *TelegramHandler) handleStartCommand(message *tgbotapi.Message, user *models.User) error {
	// –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
	welcomeText := h.service.GetWelcomeMessage(user)
	menuText := welcomeText + "\n\n" + h.service.Localizer.Get(user.InterfaceLanguageCode, "main_menu_title")

	msg := tgbotapi.NewMessage(message.Chat.ID, menuText)
	msg.ReplyMarkup = h.createMainMenuKeyboard(user.InterfaceLanguageCode)
	if _, err := h.bot.Send(msg); err != nil {
		return err
	}

	return nil
}

func (h *TelegramHandler) handleStatusCommand(message *tgbotapi.Message, user *models.User) error {
	statusText := fmt.Sprintf(
		"üìä %s:\n\n"+
			"üÜî ID: %d\n"+
			"üìù %s: %s\n"+
			"üîÑ %s: %s\n"+
			"üìà %s: %d%%\n"+
			"üåê %s: %s",
		h.service.Localizer.Get(user.InterfaceLanguageCode, "your_status"),
		user.ID,
		h.service.Localizer.Get(user.InterfaceLanguageCode, "status"),
		user.Status,
		h.service.Localizer.Get(user.InterfaceLanguageCode, "state"),
		user.State,
		h.service.Localizer.Get(user.InterfaceLanguageCode, "profile_completion"),
		user.ProfileCompletionLevel,
		h.service.Localizer.Get(user.InterfaceLanguageCode, "interface_language"),
		user.InterfaceLanguageCode,
	)
	return h.sendMessage(message.Chat.ID, statusText)
}

func (h *TelegramHandler) handleResetCommand(message *tgbotapi.Message, user *models.User) error {
	return h.sendMessage(message.Chat.ID, h.service.Localizer.Get(user.InterfaceLanguageCode, "profile_reset"))
}

func (h *TelegramHandler) handleLanguageCommand(message *tgbotapi.Message, user *models.User) error {
	text := h.service.Localizer.Get(user.InterfaceLanguageCode, "choose_interface_language")
	keyboard := h.createLanguageKeyboard(user.InterfaceLanguageCode, "interface", "", true)
	msg := tgbotapi.NewMessage(message.Chat.ID, text)
	msg.ReplyMarkup = keyboard
	_, err := h.bot.Send(msg)
	return err
}

func (h *TelegramHandler) handleState(message *tgbotapi.Message, user *models.User) error {
	switch user.State {
	case models.StateWaitingLanguage,
		models.StateWaitingInterests,
		models.StateWaitingTime:
		return h.sendMessage(message.Chat.ID, h.service.Localizer.Get(user.InterfaceLanguageCode, "use_menu_above"))
	default:
		return h.sendMessage(message.Chat.ID, h.service.Localizer.Get(user.InterfaceLanguageCode, "unknown_command"))
	}
}

// –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–æ–≤—ã—Ö –∫–æ–ª–±—ç–∫–æ–≤ –≤ —Ä–æ—É—Ç–µ—Ä–µ
func (h *TelegramHandler) handleCallbackQuery(callback *tgbotapi.CallbackQuery) error {
	user, err := h.service.HandleUserRegistration(
		callback.From.ID,
		callback.From.UserName,
		callback.From.FirstName,
		callback.From.LanguageCode,
	)
	if err != nil {
		log.Printf("Error handling user registration: %v", err)
		return err
	}

	data := callback.Data
	_, _ = h.bot.Request(tgbotapi.NewCallback(callback.ID, ""))

	switch {
	case strings.HasPrefix(data, "lang_native_"):
		return h.handleNativeLanguageCallback(callback, user)
	case strings.HasPrefix(data, "lang_target_"):
		return h.handleTargetLanguageCallback(callback, user)
	case strings.HasPrefix(data, "lang_edit_native_"):
		return h.handleEditNativeLanguage(callback, user)
	case strings.HasPrefix(data, "lang_edit_target_"):
		return h.handleEditTargetLanguage(callback, user)
	case strings.HasPrefix(data, "lang_interface_"):
		langCode := strings.TrimPrefix(data, "lang_interface_")
		return h.handleInterfaceLanguageSelection(callback, user, langCode)
	case strings.HasPrefix(data, "interest_"):
		interestID := strings.TrimPrefix(data, "interest_")
		return h.handleInterestSelection(callback, user, interestID)
	case strings.HasPrefix(data, "edit_interest_"):
		interestID := strings.TrimPrefix(data, "edit_interest_")
		return h.handleEditInterestSelection(callback, user, interestID)
	case data == "profile_show":
		return h.handleProfileShow(callback, user)
	case data == "profile_reset_ask":
		return h.handleProfileResetAsk(callback, user)
	case data == "profile_reset_yes":
		return h.handleProfileResetYes(callback, user)
	case data == "profile_reset_no":
		return h.handleProfileResetNo(callback, user)
	case data == "interests_continue":
		return h.handleInterestsContinue(callback, user)
	case data == "languages_continue_filling":
		return h.handleLanguagesContinueFilling(callback, user)
	case data == "languages_reselect":
		return h.handleLanguagesReselect(callback, user)
	case strings.HasPrefix(data, "level_"):
		levelCode := strings.TrimPrefix(data, "level_")
		return h.handleLanguageLevelSelection(callback, user, levelCode)
	case strings.HasPrefix(data, "edit_level_"):
		levelCode := strings.TrimPrefix(data, "edit_level_")
		return h.handleEditLevelSelection(callback, user, levelCode)
	case data == "back_to_previous_step":
		return h.handleBackToPreviousStep(callback, user)
	case data == "main_change_language":
		return h.handleMainChangeLanguage(callback, user)
	case data == "main_view_profile":
		return h.handleMainViewProfile(callback, user)
	case data == "main_edit_profile":
		return h.handleMainEditProfile(callback, user)
	case data == "main_feedback":
		return h.handleMainFeedback(callback, user)
	case data == "start_profile_setup":
		return h.startProfileSetup(callback, user)
	case data == "back_to_main_menu":
		return h.handleBackToMainMenu(callback, user)
	case data == "edit_interests":
		return h.handleEditInterests(callback, user)
	case data == "edit_languages":
		return h.handleEditLanguages(callback, user)
	case data == "save_edits":
		return h.handleSaveEdits(callback, user)
	case data == "cancel_edits":
		return h.handleCancelEdits(callback, user)
	case data == "edit_native_lang":
		return h.handleEditNativeLang(callback, user)
	case data == "edit_target_lang":
		return h.handleEditTargetLang(callback, user)
	case data == "edit_level":
		return h.handleEditLevelLang(callback, user)
	default:
		return nil
	}
}

func (h *TelegramHandler) handleInterestsContinue(callback *tgbotapi.CallbackQuery, user *models.User) error {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω—ã –ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã
	selectedInterests, err := h.service.DB.GetUserSelectedInterests(user.ID)
	if err != nil {
		log.Printf("Error getting selected interests: %v", err)
		return err
	}

	// –ï—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞, —Å–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
	if len(selectedInterests) == 0 {
		warningMsg := "‚ùó " + h.service.Localizer.Get(user.InterfaceLanguageCode, "choose_at_least_one_interest")
		if warningMsg == "choose_at_least_one_interest" { // fallback if key doesn't exist
			warningMsg = "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–Ω—Ç–µ—Ä–µ—Å"
		}

		// –î–æ–±–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º
		chooseInterestsText := h.service.Localizer.Get(user.InterfaceLanguageCode, "choose_interests")
		fullText := warningMsg + "\n\n" + chooseInterestsText

		// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏ –≤–∏–¥–∏–º–æ–π, –æ–±–Ω–æ–≤–ª—è—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
		interests, _ := h.service.Localizer.GetInterests(user.InterfaceLanguageCode)
		keyboard := h.createInterestsKeyboard(interests, []int{}, user.InterfaceLanguageCode)
		editMsg := tgbotapi.NewEditMessageTextAndMarkup(
			callback.Message.Chat.ID,
			callback.Message.MessageID,
			fullText,
			keyboard,
		)
		_, err := h.bot.Request(editMsg)
		return err
	}

	// –ï—Å–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã –≤—ã–±—Ä–∞–Ω—ã, –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
	completedMsg := h.service.Localizer.Get(user.InterfaceLanguageCode, "profile_completed")
	keyboard := h.createProfileCompletedKeyboard(user.InterfaceLanguageCode)
	editMsg := tgbotapi.NewEditMessageTextAndMarkup(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		completedMsg,
		keyboard,
	)
	_, err = h.bot.Request(editMsg)
	if err != nil {
		return err
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	err = h.service.DB.UpdateUserState(user.ID, models.StateActive)
	if err != nil {
		log.Printf("Error updating user state: %v", err)
		return err
	}
	err = h.service.DB.UpdateUserStatus(user.ID, models.StatusActive)
	if err != nil {
		log.Printf("Error updating user status: %v", err)
		return err
	}

	// –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –¥–æ 100%
	err = h.updateProfileCompletionLevel(user.ID, 100)
	if err != nil {
		log.Printf("Error updating profile completion level: %v", err)
		return err
	}

	return nil
}

// updateProfileCompletionLevel –æ–±–Ω–æ–≤–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç 0 –¥–æ 100
func (h *TelegramHandler) updateProfileCompletionLevel(userID int, completionLevel int) error {
	_, err := h.service.DB.GetConnection().Exec(`
		UPDATE users
		SET profile_completion_level = $1, updated_at = NOW()
		WHERE id = $2
	`, completionLevel, userID)
	return err
}

// startProfileSetup –Ω–∞—á–∏–Ω–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø—Ä–æ—Ñ–∏–ª—è —Å—Ä–∞–∑—É —Å –≤—ã–±–æ—Ä–∞ —Ä–æ–¥–Ω–æ–≥–æ —è–∑—ã–∫–∞
func (h *TelegramHandler) startProfileSetup(callback *tgbotapi.CallbackQuery, user *models.User) error {
	text := h.service.Localizer.Get(user.InterfaceLanguageCode, "choose_native_language")
	keyboard := h.createLanguageKeyboard(user.InterfaceLanguageCode, "native", "", true)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
	msg := tgbotapi.NewMessage(callback.Message.Chat.ID, text)
	msg.ReplyMarkup = keyboard
	_, err := h.bot.Send(msg)
	return err
}

// handleBackToMainMenu –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
func (h *TelegramHandler) handleBackToMainMenu(callback *tgbotapi.CallbackQuery, user *models.User) error {
	welcomeText := h.service.GetWelcomeMessage(user)
	menuText := welcomeText + "\n\n" + h.service.Localizer.Get(user.InterfaceLanguageCode, "main_menu_title")

	keyboard := h.createMainMenuKeyboard(user.InterfaceLanguageCode)
	editMsg := tgbotapi.NewEditMessageTextAndMarkup(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		menuText,
		keyboard,
	)
	_, err := h.bot.Request(editMsg)
	return err
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–æ–≤
func (h *TelegramHandler) handleLanguagesContinueFilling(callback *tgbotapi.CallbackQuery, user *models.User) error {
	// –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –≤—ã–±–æ—Ä—É –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
	err := h.service.DB.ClearUserInterests(user.ID)
	if err != nil {
		log.Printf("Warning: could not clear user interests: %v", err)
	}

	// –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è —è–∑—ã–∫–æ–º
	langName := h.service.Localizer.GetLanguageName(user.TargetLanguageCode, user.InterfaceLanguageCode)
	title := h.service.Localizer.GetWithParams(user.InterfaceLanguageCode, "choose_level_title", map[string]string{
		"language": langName,
	})

	keyboard := h.createLanguageLevelKeyboard(user.InterfaceLanguageCode, user.TargetLanguageCode)
	editMsg := tgbotapi.NewEditMessageTextAndMarkup(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		title,
		keyboard,
	)
	_, err = h.bot.Request(editMsg)
	return err
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–æ–≤
func (h *TelegramHandler) handleLanguagesReselect(callback *tgbotapi.CallbackQuery, user *models.User) error {
	// –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —è–∑—ã–∫–æ–≤
	user.NativeLanguageCode = ""
	user.TargetLanguageCode = ""
	user.TargetLanguageLevel = ""

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	_ = h.service.DB.UpdateUserNativeLanguage(user.ID, "")
	_ = h.service.DB.UpdateUserTargetLanguage(user.ID, "")
	_ = h.service.DB.UpdateUserTargetLanguageLevel(user.ID, "")

	// –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Ä–æ–¥–Ω–æ–π —è–∑—ã–∫ —Å–Ω–æ–≤–∞
	text := h.service.Localizer.Get(user.InterfaceLanguageCode, "choose_native_language")
	keyboard := h.createLanguageKeyboard(user.InterfaceLanguageCode, "native", "", true)
	editMsg := tgbotapi.NewEditMessageTextAndMarkup(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		text,
		keyboard,
	)
	_, err := h.bot.Request(editMsg)
	return err
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è –≤–ª–∞–¥–µ–Ω–∏—è —è–∑—ã–∫–æ–º
func (h *TelegramHandler) handleLanguageLevelSelection(callback *tgbotapi.CallbackQuery, user *models.User, levelCode string) error {
	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è —è–∑—ã–∫–æ–º
	err := h.service.DB.UpdateUserTargetLanguageLevel(user.ID, levelCode)
	if err != nil {
		return err
	}

	user.TargetLanguageLevel = levelCode

	// –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è
	levelName := h.service.Localizer.Get(user.InterfaceLanguageCode, "choose_level_"+levelCode)

	// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≤—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è
	confirmMsg := fmt.Sprintf("üéØ %s\n\n%s",
		levelName,
		h.service.Localizer.Get(user.InterfaceLanguageCode, "choose_interests"))

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏ —Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
	interests, _ := h.service.Localizer.GetInterests(user.InterfaceLanguageCode)
	keyboard := h.createInterestsKeyboard(interests, []int{}, user.InterfaceLanguageCode)

	// –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
	editMsg := tgbotapi.NewEditMessageTextAndMarkup(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		confirmMsg,
		keyboard,
	)
	_, err = h.bot.Request(editMsg)
	return err
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
func (h *TelegramHandler) handleBackToPreviousStep(callback *tgbotapi.CallbackQuery, user *models.User) error {
	// –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É
	switch user.State {
	case models.StateWaitingTargetLanguage:
		// –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ä–æ–¥–Ω–æ–≥–æ —è–∑—ã–∫–∞
		user.NativeLanguageCode = ""
		_ = h.service.DB.UpdateUserNativeLanguage(user.ID, "")

		text := h.service.Localizer.Get(user.InterfaceLanguageCode, "choose_native_language")
		keyboard := h.createLanguageKeyboard(user.InterfaceLanguageCode, "native", "", true)
		editMsg := tgbotapi.NewEditMessageTextAndMarkup(
			callback.Message.Chat.ID,
			callback.Message.MessageID,
			text,
			keyboard,
		)
		_, err := h.bot.Request(editMsg)
		return err

	case models.StateWaitingLanguageLevel:
		// –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –∏–∑—É—á–∞–µ–º–æ–≥–æ —è–∑—ã–∫–∞
		if user.NativeLanguageCode == "ru" {
			// –ï—Å–ª–∏ —Ä–æ–¥–Ω–æ–π —è–∑—ã–∫ —Ä—É—Å—Å–∫–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –≤—ã–±–æ—Ä—É –∏–∑—É—á–∞–µ–º–æ–≥–æ —è–∑—ã–∫–∞
			user.TargetLanguageCode = ""
			_ = h.service.DB.UpdateUserTargetLanguage(user.ID, "")

			text := h.service.Localizer.Get(user.InterfaceLanguageCode, "choose_target_language")
			// –ò—Å–∫–ª—é—á–∞–µ–º —Ä—É—Å—Å–∫–∏–π –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–∑—É—á–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤
			keyboard := h.createLanguageKeyboard(user.InterfaceLanguageCode, "target", "ru", true)
			editMsg := tgbotapi.NewEditMessageTextAndMarkup(
				callback.Message.Chat.ID,
				callback.Message.MessageID,
				text,
				keyboard,
			)
			_, err := h.bot.Request(editMsg)
			return err
		} else {
			// –ï—Å–ª–∏ —Ä–æ–¥–Ω–æ–π —è–∑—ã–∫ –Ω–µ —Ä—É—Å—Å–∫–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –≤—ã–±–æ—Ä—É —Ä–æ–¥–Ω–æ–≥–æ —è–∑—ã–∫–∞
			// –ø–æ—Ç–æ–º—É —á—Ç–æ –¥–ª—è –Ω–µ —Ä—É—Å—Å–∫–æ–≥–æ —Ä–æ–¥–Ω–æ–≥–æ —Å—Ä–∞–∑—É —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è —Ä—É—Å—Å–∫–∏–π –∫–∞–∫ –∏–∑—É—á–∞–µ–º—ã–π
			user.NativeLanguageCode = ""
			user.TargetLanguageCode = ""
			user.TargetLanguageLevel = ""

			_ = h.service.DB.UpdateUserNativeLanguage(user.ID, "")
			_ = h.service.DB.UpdateUserTargetLanguage(user.ID, "")
			_ = h.service.DB.UpdateUserTargetLanguageLevel(user.ID, "")

			text := h.service.Localizer.Get(user.InterfaceLanguageCode, "choose_native_language")
			keyboard := h.createLanguageKeyboard(user.InterfaceLanguageCode, "native", "", true)
			editMsg := tgbotapi.NewEditMessageTextAndMarkup(
				callback.Message.Chat.ID,
				callback.Message.MessageID,
				text,
				keyboard,
			)
			_, err := h.bot.Request(editMsg)
			return err
		}

	case models.StateWaitingInterests:
		// –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —É—Ä–æ–≤–Ω—è –≤–ª–∞–¥–µ–Ω–∏—è —è–∑—ã–∫–æ–º
		user.TargetLanguageLevel = ""
		_ = h.service.DB.UpdateUserTargetLanguageLevel(user.ID, "")

		// –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è —è–∑—ã–∫–æ–º
		langName := h.service.Localizer.GetLanguageName(user.TargetLanguageCode, user.InterfaceLanguageCode)
		title := h.service.Localizer.GetWithParams(user.InterfaceLanguageCode, "choose_level_title", map[string]string{
			"language": langName,
		})

		keyboard := h.createLanguageLevelKeyboard(user.InterfaceLanguageCode, user.TargetLanguageCode)
		editMsg := tgbotapi.NewEditMessageTextAndMarkup(
			callback.Message.Chat.ID,
			callback.Message.MessageID,
			title,
			keyboard,
		)
		_, err := h.bot.Request(editMsg)
		return err

	default:
		// –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –≤—ã–±–æ—Ä—É —Ä–æ–¥–Ω–æ–≥–æ —è–∑—ã–∫–∞
		user.NativeLanguageCode = ""
		user.TargetLanguageCode = ""
		user.TargetLanguageLevel = ""

		_ = h.service.DB.UpdateUserNativeLanguage(user.ID, "")
		_ = h.service.DB.UpdateUserTargetLanguage(user.ID, "")
		_ = h.service.DB.UpdateUserTargetLanguageLevel(user.ID, "")

		text := h.service.Localizer.Get(user.InterfaceLanguageCode, "choose_native_language")
		keyboard := h.createLanguageKeyboard(user.InterfaceLanguageCode, "native", "", true)
		editMsg := tgbotapi.NewEditMessageTextAndMarkup(
			callback.Message.Chat.ID,
			callback.Message.MessageID,
			text,
			keyboard,
		)
		_, err := h.bot.Request(editMsg)
		return err
	}
}

// ‚ú® –í—ã–±–æ—Ä —Ä–æ–¥–Ω–æ–≥–æ —è–∑—ã–∫–∞
func (h *TelegramHandler) handleNativeLanguageCallback(callback *tgbotapi.CallbackQuery, user *models.User) error {
	langCode := callback.Data[len("lang_native_"):]

	err := h.service.DB.UpdateUserNativeLanguage(user.ID, langCode)
	if err != nil {
		return err
	}

	user.NativeLanguageCode = langCode

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	h.service.DB.UpdateUserState(user.ID, models.StateWaitingLanguage)

	// –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
	return h.proceedToNextOnboardingStep(callback, user, langCode)
}

// proceedToNextOnboardingStep –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ä–æ–¥–Ω–æ–≥–æ —è–∑—ã–∫–∞
func (h *TelegramHandler) proceedToNextOnboardingStep(callback *tgbotapi.CallbackQuery, user *models.User, nativeLangCode string) error {
	if nativeLangCode == "ru" {
		// –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ä—É—Å—Å–∫–∏–π –∫–∞–∫ —Ä–æ–¥–Ω–æ–π, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –∏–∑—É—á–∞–µ–º—ã–π —è–∑—ã–∫
		text := h.service.Localizer.Get(user.InterfaceLanguageCode, "choose_target_language")

		// –ò—Å–∫–ª—é—á–∞–µ–º —Ä—É—Å—Å–∫–∏–π –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–∑—É—á–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤
		keyboard := h.createLanguageKeyboard(user.InterfaceLanguageCode, "target", "ru", true)
		editMsg := tgbotapi.NewEditMessageTextAndMarkup(callback.Message.Chat.ID, callback.Message.MessageID, text, keyboard)
		_, err := h.bot.Request(editMsg)
		if err != nil {
			return err
		}

		// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –∏–∑—É—á–∞–µ–º–æ–≥–æ —è–∑—ã–∫–∞
		h.service.DB.UpdateUserState(user.ID, models.StateWaitingTargetLanguage)
		return nil
	} else {
		// –î–ª—è –≤—Å–µ—Ö –¥—Ä—É–≥–∏—Ö —è–∑—ã–∫–æ–≤ –∫–∞–∫ —Ä–æ–¥–Ω—ã—Ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä—É—Å—Å–∫–∏–π –∫–∞–∫ –∏–∑—É—á–∞–µ–º—ã–π
		err := h.service.DB.UpdateUserTargetLanguage(user.ID, "ru")
		if err != nil {
			return err
		}
		user.TargetLanguageCode = "ru"

		// –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
		nativeLangName := h.service.Localizer.GetLanguageName(nativeLangCode, user.InterfaceLanguageCode)

		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
		targetExplanation := h.service.Localizer.GetWithParams(user.InterfaceLanguageCode, "target_language_explanation", map[string]string{
			"native_lang": nativeLangName,
		})

		// –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è —Ä—É—Å—Å–∫–∏–º —è–∑—ã–∫–æ–º
		langName := h.service.Localizer.GetLanguageName(user.TargetLanguageCode, user.InterfaceLanguageCode)
		levelTitle := targetExplanation + "\n\n" + h.service.Localizer.GetWithParams(user.InterfaceLanguageCode, "choose_level_title", map[string]string{
			"language": langName,
		})

		keyboard := h.createLanguageLevelKeyboard(user.InterfaceLanguageCode, user.TargetLanguageCode)
		editMsg := tgbotapi.NewEditMessageTextAndMarkup(
			callback.Message.Chat.ID,
			callback.Message.MessageID,
			levelTitle,
			keyboard,
		)
		_, err = h.bot.Request(editMsg)
		if err != nil {
			return err
		}

		// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è
		h.service.DB.UpdateUserState(user.ID, models.StateWaitingLanguageLevel)
		return nil
	}
}

func (h *TelegramHandler) handleTargetLanguageCallback(callback *tgbotapi.CallbackQuery, user *models.User) error {
	langCode := callback.Data[len("lang_target_"):]
	err := h.service.DB.UpdateUserTargetLanguage(user.ID, langCode)
	if err != nil {
		return err
	}

	// ‚úÖ –û–ß–ò–©–ê–ï–ú –°–¢–ê–†–´–ï –ò–ù–¢–ï–†–ï–°–´ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –≤—ã–±–æ—Ä—É –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
	err = h.service.DB.ClearUserInterests(user.ID)
	if err != nil {
		log.Printf("Warning: could not clear user interests: %v", err)
	}

	user.TargetLanguageCode = langCode
	langName := h.service.Localizer.GetLanguageName(langCode, user.InterfaceLanguageCode)

	// –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è —è–∑—ã–∫–æ–º
	title := h.service.Localizer.GetWithParams(user.InterfaceLanguageCode, "choose_level_title", map[string]string{
		"language": langName,
	})

	keyboard := h.createLanguageLevelKeyboard(user.InterfaceLanguageCode, langCode)
	editMsg := tgbotapi.NewEditMessageTextAndMarkup(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		title,
		keyboard,
	)
	_, err = h.bot.Request(editMsg)
	return err
}

func (h *TelegramHandler) handleInterfaceLanguageSelection(callback *tgbotapi.CallbackQuery, user *models.User, langCode string) error {
	if err := h.service.DB.UpdateUserInterfaceLanguage(user.ID, langCode); err != nil {
		log.Printf("Error updating interface language: %v", err)
		return err
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	user.InterfaceLanguageCode = langCode
	langName := h.service.Localizer.GetLanguageName(langCode, langCode)
	text := fmt.Sprintf("%s\n\n%s: %s",
		h.service.Localizer.Get(langCode, "choose_interface_language"),
		h.service.Localizer.Get(langCode, "language_updated"),
		langName,
	)

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —è–∑—ã–∫–∞–º–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è)
	keyboard := h.createLanguageKeyboard(langCode, "interface", "", true)

	// –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–æ—Ö—Ä–∞–Ω—è—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
	editMsg := tgbotapi.NewEditMessageTextAndMarkup(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		text,
		keyboard,
	)
	_, err := h.bot.Request(editMsg)
	return err
}

func (h *TelegramHandler) handleInterestSelection(callback *tgbotapi.CallbackQuery, user *models.User, interestIDStr string) error {
	interestID, err := strconv.Atoi(interestIDStr)
	if err != nil {
		log.Printf("Error parsing interest ID: %v", err)
		return err
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	selectedInterests, err := h.service.DB.GetUserSelectedInterests(user.ID)
	if err != nil {
		log.Printf("Error getting user interests, using empty list: %v", err)
		selectedInterests = []int{} // fallback
	}

	// –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∏–Ω—Ç–µ—Ä–µ—Å (toggle)
	isCurrentlySelected := false
	for i, id := range selectedInterests {
		if id == interestID {
			// –£–±–∏—Ä–∞–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞
			selectedInterests = append(selectedInterests[:i], selectedInterests[i+1:]...)
			isCurrentlySelected = true
			break
		}
	}

	if !isCurrentlySelected {
		// –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫
		selectedInterests = append(selectedInterests, interestID)
		err = h.service.DB.SaveUserInterest(user.ID, interestID, false)
	} else {
		// –£–¥–∞–ª—è–µ–º –∏–Ω—Ç–µ—Ä–µ—Å –∏–∑ –ë–î
		err = h.service.DB.RemoveUserInterest(user.ID, interestID)
	}

	if err != nil {
		log.Printf("Error updating user interest: %v", err)
		return err
	}

	// ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É - –Ω–∏–∫–∞–∫–∏—Ö –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
	interests, _ := h.service.Localizer.GetInterests(user.InterfaceLanguageCode)
	keyboard := h.createInterestsKeyboard(interests, selectedInterests, user.InterfaceLanguageCode)

	editMsg := tgbotapi.NewEditMessageReplyMarkup(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		keyboard,
	)
	_, err = h.bot.Request(editMsg)
	return err
}

func (h *TelegramHandler) sendTargetLanguageMenu(chatID int64, user *models.User) error {
	// –ò—Å–∫–ª—é—á–∞–µ–º —Ä–æ–¥–Ω–æ–π —è–∑—ã–∫ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–∑—É—á–∞–µ–º—ã—Ö
	excludeLang := user.NativeLanguageCode
	if excludeLang == "" {
		excludeLang = "ru" // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–∫–ª—é—á–∞–µ–º —Ä—É—Å—Å–∫–∏–π
	}

	keyboard := h.createLanguageKeyboard(user.InterfaceLanguageCode, "target", excludeLang, true)
	text := h.service.Localizer.Get(user.InterfaceLanguageCode, "choose_target_language")
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ReplyMarkup = keyboard
	_, err := h.bot.Send(msg)
	return err
}

// –í createInterestsKeyboard –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
func (h *TelegramHandler) sendInterestsMenu(chatID int64, user *models.User) error {
	interests, err := h.service.Localizer.GetInterests(user.InterfaceLanguageCode)
	if err != nil {
		return err
	}

	// –ó–∞–≥—Ä—É–∂–∞–µ–º —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	selectedInterests, err := h.service.DB.GetUserSelectedInterests(user.ID)
	if err != nil {
		log.Printf("Error loading user interests: %v", err)
		selectedInterests = []int{} // fallback –Ω–∞ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
	}

	keyboard := h.createInterestsKeyboard(interests, selectedInterests, user.InterfaceLanguageCode)
	text := h.service.Localizer.Get(user.InterfaceLanguageCode, "choose_interests")
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ReplyMarkup = keyboard
	_, err = h.bot.Send(msg)
	return err
}

func (h *TelegramHandler) sendMessage(chatID int64, text string) error {
	msg := tgbotapi.NewMessage(chatID, text)
	_, err := h.bot.Send(msg)
	return err
}

func (h *TelegramHandler) createProfileMenuKeyboard(interfaceLang string) tgbotapi.InlineKeyboardMarkup {
	// –ö–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–º
	editInterests := tgbotapi.NewInlineKeyboardButtonData(
		h.service.Localizer.Get(interfaceLang, "profile_edit_interests"),
		"edit_interests",
	)
	editLanguages := tgbotapi.NewInlineKeyboardButtonData(
		h.service.Localizer.Get(interfaceLang, "profile_edit_languages"),
		"edit_languages",
	)
	changeInterfaceLang := tgbotapi.NewInlineKeyboardButtonData(
		h.service.Localizer.Get(interfaceLang, "main_menu_change_lang"),
		"main_change_language",
	)
	reconfig := tgbotapi.NewInlineKeyboardButtonData(
		h.service.Localizer.Get(interfaceLang, "profile_reconfigure"),
		"profile_reset_ask",
	)
	backToMain := tgbotapi.NewInlineKeyboardButtonData(
		h.service.Localizer.Get(interfaceLang, "back_to_main"),
		"back_to_main_menu",
	)

	// –ü—è—Ç—å —Ä—è–¥–æ–≤: –∏–Ω—Ç–µ—Ä–µ—Å—ã, —è–∑—ã–∫–∏, —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞, —Å–±—Ä–æ—Å, –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
	buttons := [][]tgbotapi.InlineKeyboardButton{
		{editInterests},
		{editLanguages},
		{changeInterfaceLang},
		{reconfig},
		{backToMain},
	}
	return tgbotapi.NewInlineKeyboardMarkup(buttons...)
}

func (h *TelegramHandler) createMainMenuKeyboard(interfaceLang string) tgbotapi.InlineKeyboardMarkup {
	viewProfile := tgbotapi.NewInlineKeyboardButtonData(
		h.service.Localizer.Get(interfaceLang, "main_menu_view_profile"),
		"main_view_profile",
	)
	editProfile := tgbotapi.NewInlineKeyboardButtonData(
		h.service.Localizer.Get(interfaceLang, "main_menu_edit_profile"),
		"main_edit_profile",
	)
	changeLang := tgbotapi.NewInlineKeyboardButtonData(
		h.service.Localizer.Get(interfaceLang, "main_menu_change_lang"),
		"main_change_language",
	)
	feedback := tgbotapi.NewInlineKeyboardButtonData(
		h.service.Localizer.Get(interfaceLang, "main_menu_feedback"),
		"main_feedback",
	)

	// –ö–æ–º–ø–æ–Ω—É–µ–º –º–µ–Ω—é –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥ –¥–ª—è –ª—É—á—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
	buttons := [][]tgbotapi.InlineKeyboardButton{
		{viewProfile, editProfile},
		{changeLang, feedback},
	}
	return tgbotapi.NewInlineKeyboardMarkup(buttons...)
}

func (h *TelegramHandler) createResetConfirmKeyboard(interfaceLang string) tgbotapi.InlineKeyboardMarkup {
	yes := tgbotapi.NewInlineKeyboardButtonData(
		h.service.Localizer.Get(interfaceLang, "profile_reset_yes"),
		"profile_reset_yes",
	)
	no := tgbotapi.NewInlineKeyboardButtonData(
		h.service.Localizer.Get(interfaceLang, "profile_reset_no"),
		"profile_reset_no",
	)
	return tgbotapi.NewInlineKeyboardMarkup([][]tgbotapi.InlineKeyboardButton{{yes}, {no}}...)
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
func (h *TelegramHandler) handleMainChangeLanguage(callback *tgbotapi.CallbackQuery, user *models.User) error {
	text := h.service.Localizer.Get(user.InterfaceLanguageCode, "choose_interface_language")
	keyboard := h.createLanguageKeyboard(user.InterfaceLanguageCode, "interface", "", true)
	editMsg := tgbotapi.NewEditMessageTextAndMarkup(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		text,
		keyboard,
	)
	_, err := h.bot.Request(editMsg)
	return err
}

func (h *TelegramHandler) handleMainViewProfile(callback *tgbotapi.CallbackQuery, user *models.User) error {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–æ–ª–Ω–µ–Ω –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ —É—Ä–æ–≤–Ω—é –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
	if user.ProfileCompletionLevel == 0 {
		// –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫—É –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
		text := h.service.Localizer.Get(user.InterfaceLanguageCode, "empty_profile_message")

		// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
		setupButton := tgbotapi.NewInlineKeyboardButtonData(
			h.service.Localizer.Get(user.InterfaceLanguageCode, "setup_profile_button"),
			"start_profile_setup",
		)

		keyboard := tgbotapi.NewInlineKeyboardMarkup([]tgbotapi.InlineKeyboardButton{setupButton})

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ
		newMsg := tgbotapi.NewMessage(callback.Message.Chat.ID, text)
		newMsg.ReplyMarkup = keyboard
		_, err := h.bot.Send(newMsg)
		return err
	}

	// –ü—Ä–æ—Ñ–∏–ª—å –∑–∞–ø–æ–ª–Ω–µ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ
	return h.handleProfileShow(callback, user)
}

func (h *TelegramHandler) handleMainEditProfile(callback *tgbotapi.CallbackQuery, user *models.User) error {
	return h.handleProfileResetAsk(callback, user)
}

func (h *TelegramHandler) handleMainFeedback(callback *tgbotapi.CallbackQuery, user *models.User) error {
	// –°–æ–∑–¥–∞–µ–º message –æ–±—ä–µ–∫—Ç –¥–ª—è handleFeedbackCommand
	message := &tgbotapi.Message{
		Chat: callback.Message.Chat,
	}
	return h.handleFeedbackCommand(message, user)
}

// –ö–æ–º–∞–Ω–¥–∞ /feedback
func (h *TelegramHandler) handleFeedbackCommand(message *tgbotapi.Message, user *models.User) error {
	text := h.service.Localizer.Get(user.InterfaceLanguageCode, "feedback_text")
	_ = h.service.DB.UpdateUserState(user.ID, models.StateWaitingFeedback)
	return h.sendMessage(message.Chat.ID, text)
}

// –ö–æ–º–∞–Ω–¥–∞ /profile ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç.
func (h *TelegramHandler) handleProfileCommand(message *tgbotapi.Message, user *models.User) error {
	summary, err := h.service.BuildProfileSummary(user)
	if err != nil {
		return h.sendMessage(message.Chat.ID, h.service.Localizer.Get(user.InterfaceLanguageCode, "unknown_command"))
	}
	text := summary + "\n\n" + h.service.Localizer.Get(user.InterfaceLanguageCode, "profile_actions")
	msg := tgbotapi.NewMessage(message.Chat.ID, text)
	msg.ReplyMarkup = h.createProfileMenuKeyboard(user.InterfaceLanguageCode)
	_, err = h.bot.Send(msg)
	return err
}

// –ö–æ–ª–±—ç–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è: –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
func (h *TelegramHandler) handleProfileShow(callback *tgbotapi.CallbackQuery, user *models.User) error {
	summary, err := h.service.BuildProfileSummary(user)
	if err != nil {
		return err
	}
	text := summary + "\n\n" + h.service.Localizer.Get(user.InterfaceLanguageCode, "profile_actions")
	edit := tgbotapi.NewEditMessageTextAndMarkup(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		text,
		h.createProfileMenuKeyboard(user.InterfaceLanguageCode),
	)
	_, err = h.bot.Request(edit)
	return err
}

// –°–ø—Ä–æ—Å–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞
func (h *TelegramHandler) handleProfileResetAsk(callback *tgbotapi.CallbackQuery, user *models.User) error {
	title := h.service.Localizer.Get(user.InterfaceLanguageCode, "profile_reset_title")
	warn := h.service.Localizer.Get(user.InterfaceLanguageCode, "profile_reset_warning")
	text := fmt.Sprintf("%s\n\n%s", title, warn)
	edit := tgbotapi.NewEditMessageTextAndMarkup(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		text,
		h.createResetConfirmKeyboard(user.InterfaceLanguageCode),
	)
	_, err := h.bot.Request(edit)
	return err
}

// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞
func (h *TelegramHandler) handleProfileResetYes(callback *tgbotapi.CallbackQuery, user *models.User) error {
	if err := h.service.DB.ResetUserProfile(user.ID); err != nil {
		return err
	}
	// –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ø–∞–º—è—Ç–∏ –±–∞–∑–æ–≤—ã–µ –ø–æ–ª—è
	user.NativeLanguageCode = ""
	user.TargetLanguageCode = ""
	user.State = models.StateWaitingLanguage
	user.Status = models.StatusFilling
	user.ProfileCompletionLevel = 0

	done := h.service.Localizer.Get(user.InterfaceLanguageCode, "profile_reset_done")
	// –ü—Ä–µ–¥–ª–æ–∂–∏–º —Å—Ä–∞–∑—É –Ω–∞—á–∞—Ç—å —Å –≤—ã–±–æ—Ä–∞ —Ä–æ–¥–Ω–æ–≥–æ —è–∑—ã–∫–∞
	next := h.service.GetLanguagePrompt(user, "native")
	text := done + "\n\n" + next

	edit := tgbotapi.NewEditMessageTextAndMarkup(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		text,
		h.createLanguageKeyboard(user.InterfaceLanguageCode, "native", "", true),
	)
	_, err := h.bot.Request(edit)
	return err
}

// –û—Ç–º–µ–Ω–∞ —Å–±—Ä–æ—Å–∞ ‚Äî –≤–µ—Ä–Ω—ë–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
func (h *TelegramHandler) handleProfileResetNo(callback *tgbotapi.CallbackQuery, user *models.User) error {
	return h.handleBackToMainMenu(callback, user)
}

// handleEditInterests –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (h *TelegramHandler) handleEditInterests(callback *tgbotapi.CallbackQuery, user *models.User) error {
	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã
	interests, err := h.service.Localizer.GetInterests(user.InterfaceLanguageCode)
	if err != nil {
		return err
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à–µ
	selectedInterests, err := h.service.DB.GetUserSelectedInterests(user.ID)
	if err != nil {
		log.Printf("Error loading user interests: %v", err)
		selectedInterests = []int{} // fallback
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Å–µ—Å—Å–∏–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
	userID := int64(user.ID)
	h.editInterestsTemp[userID] = make([]int, len(selectedInterests))
	copy(h.editInterestsTemp[userID], selectedInterests)

	keyboard := h.createEditInterestsKeyboard(interests, selectedInterests, user.InterfaceLanguageCode)
	text := h.service.Localizer.Get(user.InterfaceLanguageCode, "choose_interests") +
		"\n\n" + h.service.Localizer.Get(user.InterfaceLanguageCode, "save_button") +
		" –∏–ª–∏ " + h.service.Localizer.Get(user.InterfaceLanguageCode, "cancel_button")

	editMsg := tgbotapi.NewEditMessageTextAndMarkup(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		text,
		keyboard,
	)
	_, err = h.bot.Request(editMsg)
	return err
}

// handleEditLanguages –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —è–∑—ã–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (h *TelegramHandler) handleEditLanguages(callback *tgbotapi.CallbackQuery, user *models.User) error {
	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —è–∑—ã–∫–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
	text := h.service.Localizer.Get(user.InterfaceLanguageCode, "profile_edit_languages") +
		"\n\n" + h.service.Localizer.Get(user.InterfaceLanguageCode, "save_button") +
		" –∏–ª–∏ " + h.service.Localizer.Get(user.InterfaceLanguageCode, "cancel_button")

	keyboard := h.createEditLanguagesKeyboard(
		user.InterfaceLanguageCode,
		user.NativeLanguageCode,
		user.TargetLanguageCode,
		user.TargetLanguageLevel,
	)

	editMsg := tgbotapi.NewEditMessageTextAndMarkup(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		text,
		keyboard,
	)
	_, err := h.bot.Request(editMsg)
	return err
}

// handleSaveEdits —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –ø—Ä–æ—Ñ–∏–ª—è
func (h *TelegramHandler) handleSaveEdits(callback *tgbotapi.CallbackQuery, user *models.User) error {
	userID := int64(user.ID)

	// –ï—Å–ª–∏ –µ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤, –ø—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ë–î
	if tempInterests, exists := h.editInterestsTemp[userID]; exists {
		// –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã –≤ –ë–î
		err := h.service.DB.ClearUserInterests(user.ID)
		if err != nil {
			log.Printf("Error clearing user interests: %v", err)
			return err
		}

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã
		for _, interestID := range tempInterests {
			err := h.service.DB.SaveUserInterest(user.ID, interestID, false)
			if err != nil {
				log.Printf("Error saving user interest %d: %v", interestID, err)
				return err
			}
		}

		// –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
		delete(h.editInterestsTemp, userID)
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
	return h.handleProfileShow(callback, user)
}

// handleCancelEdits –æ—Ç–º–µ–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –ø—Ä–æ—Ñ–∏–ª—è
func (h *TelegramHandler) handleCancelEdits(callback *tgbotapi.CallbackQuery, user *models.User) error {
	userID := int64(user.ID)

	// –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –±–µ–∑ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
	if _, exists := h.editInterestsTemp[userID]; exists {
		delete(h.editInterestsTemp, userID)
	}

	// –ü—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
	return h.handleProfileShow(callback, user)
}

// handleEditNativeLang —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Ä–æ–¥–Ω–æ–π —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (h *TelegramHandler) handleEditNativeLang(callback *tgbotapi.CallbackQuery, user *models.User) error {
	text := h.service.Localizer.Get(user.InterfaceLanguageCode, "choose_native_language")
	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º/–æ—Ç–º–µ–Ω–æ–π –≤–º–µ—Å—Ç–æ –æ–±—ã—á–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
	keyboard := h.createLanguageKeyboard(user.InterfaceLanguageCode, "edit_native", "", false)

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å/–æ—Ç–º–µ–Ω–∏—Ç—å
	saveRow := h.createSaveEditsKeyboard(user.InterfaceLanguageCode).InlineKeyboard[0]
	keyboard.InlineKeyboard = append(keyboard.InlineKeyboard, []tgbotapi.InlineKeyboardButton{saveRow[0], saveRow[1]})

	editMsg := tgbotapi.NewEditMessageTextAndMarkup(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		text,
		keyboard,
	)
	_, err := h.bot.Request(editMsg)
	return err
}

// handleEditTargetLang —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –∏–∑—É—á–∞–µ–º—ã–π —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–æ–¥–Ω–æ–π - —Ä—É—Å—Å–∫–∏–π)
func (h *TelegramHandler) handleEditTargetLang(callback *tgbotapi.CallbackQuery, user *models.User) error {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–æ–¥–Ω–æ–π —è–∑—ã–∫ —Ä—É—Å—Å–∫–∏–π - —Ç–æ–ª—å–∫–æ –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ –º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑—É—á–∞–µ–º—ã–π —è–∑—ã–∫
	if user.NativeLanguageCode != "ru" {
		// –ù–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –ø–æ –ª–æ–≥–∏–∫–µ, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
		return h.sendMessage(callback.Message.Chat.ID, "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑—É—á–∞–µ–º–æ–≥–æ —è–∑—ã–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –ø—Ä–∏ –≤–∞—à–µ–º —Ä–æ–¥–Ω–æ–º —è–∑—ã–∫–µ.")
	}

	text := h.service.Localizer.Get(user.InterfaceLanguageCode, "choose_target_language")
	// –ò—Å–∫–ª—é—á–∞–µ–º —Ä–æ–¥–Ω–æ–π —è–∑—ã–∫ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–∑—É—á–∞–µ–º—ã—Ö
	keyboard := h.createLanguageKeyboard(user.InterfaceLanguageCode, "edit_target", user.NativeLanguageCode, false)

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å/–æ—Ç–º–µ–Ω–∏—Ç—å
	saveRow := h.createSaveEditsKeyboard(user.InterfaceLanguageCode).InlineKeyboard[0]
	keyboard.InlineKeyboard = append(keyboard.InlineKeyboard, []tgbotapi.InlineKeyboardButton{saveRow[0], saveRow[1]})

	editMsg := tgbotapi.NewEditMessageTextAndMarkup(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		text,
		keyboard,
	)
	_, err := h.bot.Request(editMsg)
	return err
}

// handleEditNativeLanguage —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±–æ—Ä —Ä–æ–¥–Ω–æ–≥–æ —è–∑—ã–∫–∞ —Å —É—á–µ—Ç–æ–º –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–∏
func (h *TelegramHandler) handleEditNativeLanguage(callback *tgbotapi.CallbackQuery, user *models.User) error {
	langCode := callback.Data[len("lang_edit_native_"):]

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ä–æ–¥–Ω–æ–π —è–∑—ã–∫
	err := h.service.DB.UpdateUserNativeLanguage(user.ID, langCode)
	if err != nil {
		return err
	}

	user.NativeLanguageCode = langCode

	// –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–Ω–∞—á–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–æ–≤
	if langCode == "ru" {
		// –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ä—É—Å—Å–∫–∏–π –∫–∞–∫ —Ä–æ–¥–Ω–æ–π, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –∏–∑—É—á–∞–µ–º—ã–π –∏–∑ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è 3
		// –ù–æ –Ω–µ –º–µ–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∏–∑—É—á–∞–µ–º—ã–π —è–∑—ã–∫, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
		text := "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑—É—á–∞–µ–º—ã–π —è–∑—ã–∫:"
		keyboard := h.createLanguageKeyboard(user.InterfaceLanguageCode, "edit_target", "ru", false)

		// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å/–æ—Ç–º–µ–Ω–∏—Ç—å
		saveRow := h.createSaveEditsKeyboard(user.InterfaceLanguageCode).InlineKeyboard[0]
		keyboard.InlineKeyboard = append(keyboard.InlineKeyboard, []tgbotapi.InlineKeyboardButton{saveRow[0], saveRow[1]})

		editMsg := tgbotapi.NewEditMessageTextAndMarkup(
			callback.Message.Chat.ID,
			callback.Message.MessageID,
			text,
			keyboard,
		)
		_, err := h.bot.Request(editMsg)
		return err
	} else {
		// –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –Ω–µ —Ä—É—Å—Å–∫–∏–π, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä—É—Å—Å–∫–∏–π –∫–∞–∫ –∏–∑—É—á–∞–µ–º—ã–π
		err := h.service.DB.UpdateUserTargetLanguage(user.ID, "ru")
		if err != nil {
			return err
		}
		user.TargetLanguageCode = "ru"

		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
		nativeLangName := h.service.Localizer.GetLanguageName(langCode, user.InterfaceLanguageCode)
		explanation := h.service.Localizer.GetWithParams(user.InterfaceLanguageCode, "target_language_explanation", map[string]string{
			"native_lang": nativeLangName,
		})

		// –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è —Ä—É—Å—Å–∫–∏–º —è–∑—ã–∫–æ–º
		langName := h.service.Localizer.GetLanguageName(user.TargetLanguageCode, user.InterfaceLanguageCode)
		levelTitle := explanation + "\n\n" + h.service.Localizer.GetWithParams(user.InterfaceLanguageCode, "choose_level_title", map[string]string{
			"language": langName,
		})

		keyboard := h.createLanguageLevelKeyboardWithPrefix(user.InterfaceLanguageCode, user.TargetLanguageCode, "edit_level_", false)
		// –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å/–æ—Ç–º–µ–Ω–∏—Ç—å
		saveRow := h.createSaveEditsKeyboard(user.InterfaceLanguageCode).InlineKeyboard[0]
		keyboard.InlineKeyboard = append(keyboard.InlineKeyboard, []tgbotapi.InlineKeyboardButton{saveRow[0], saveRow[1]})

		editMsg := tgbotapi.NewEditMessageTextAndMarkup(
			callback.Message.Chat.ID,
			callback.Message.MessageID,
			levelTitle,
			keyboard,
		)
		_, err = h.bot.Request(editMsg)
		return err
	}
}

// handleEditTargetLanguage —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±–æ—Ä –∏–∑—É—á–∞–µ–º–æ–≥–æ —è–∑—ã–∫–∞ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å
func (h *TelegramHandler) handleEditTargetLanguage(callback *tgbotapi.CallbackQuery, user *models.User) error {
	langCode := callback.Data[len("lang_edit_target_"):]

	err := h.service.DB.UpdateUserTargetLanguage(user.ID, langCode)
	if err != nil {
		return err
	}

	user.TargetLanguageCode = langCode
	langName := h.service.Localizer.GetLanguageName(langCode, user.InterfaceLanguageCode)

	// –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è —è–∑—ã–∫–æ–º
	title := h.service.Localizer.GetWithParams(user.InterfaceLanguageCode, "choose_level_title", map[string]string{
		"language": langName,
	})

	keyboard := h.createLanguageLevelKeyboardWithPrefix(user.InterfaceLanguageCode, langCode, "edit_level_", false)
	// –î–æ–±–∞–≤–ª—è–µ–º save/cancel
	saveRow := h.createSaveEditsKeyboard(user.InterfaceLanguageCode).InlineKeyboard[0]
	keyboard.InlineKeyboard = append(keyboard.InlineKeyboard, []tgbotapi.InlineKeyboardButton{saveRow[0], saveRow[1]})

	editMsg := tgbotapi.NewEditMessageTextAndMarkup(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		title,
		keyboard,
	)
	_, err = h.bot.Request(editMsg)
	return err
}

func (h *TelegramHandler) handleEditInterestSelection(callback *tgbotapi.CallbackQuery, user *models.User, interestIDStr string) error {
	interestID, err := strconv.Atoi(interestIDStr)
	if err != nil {
		log.Printf("Error parsing interest ID: %v", err)
		return err
	}

	userID := int64(user.ID)

	// –ï—Å–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –Ω–µ—Ç, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –µ–≥–æ
	if _, exists := h.editInterestsTemp[userID]; !exists {
		selectedInterests, err := h.service.DB.GetUserSelectedInterests(user.ID)
		if err != nil {
			log.Printf("Error getting user interests, using empty list: %v", err)
			selectedInterests = []int{}
		}
		h.editInterestsTemp[userID] = make([]int, len(selectedInterests))
		copy(h.editInterestsTemp[userID], selectedInterests)
	}

	// –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∏–Ω—Ç–µ—Ä–µ—Å –≤ –≤—Ä–µ–º–µ–Ω–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (toggle)
	isCurrentlySelected := false
	for i, id := range h.editInterestsTemp[userID] {
		if id == interestID {
			// –£–±–∏—Ä–∞–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞
			h.editInterestsTemp[userID] = append(h.editInterestsTemp[userID][:i], h.editInterestsTemp[userID][i+1:]...)
			isCurrentlySelected = true
			break
		}
	}

	if !isCurrentlySelected {
		// –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫
		h.editInterestsTemp[userID] = append(h.editInterestsTemp[userID], interestID)
	}

	// ‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º edit –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
	interests, _ := h.service.Localizer.GetInterests(user.InterfaceLanguageCode)
	keyboard := h.createEditInterestsKeyboard(interests, h.editInterestsTemp[userID], user.InterfaceLanguageCode)
	text := h.service.Localizer.Get(user.InterfaceLanguageCode, "choose_interests") +
		"\n\n" + h.service.Localizer.Get(user.InterfaceLanguageCode, "save_button") +
		" –∏–ª–∏ " + h.service.Localizer.Get(user.InterfaceLanguageCode, "cancel_button")

	editMsg := tgbotapi.NewEditMessageTextAndMarkup(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		text,
		keyboard,
	)
	_, err = h.bot.Request(editMsg)
	return err
}

func (h *TelegramHandler) handleEditLevelSelection(callback *tgbotapi.CallbackQuery, user *models.User, levelCode string) error {
	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è —è–∑—ã–∫–æ–º
	err := h.service.DB.UpdateUserTargetLanguageLevel(user.ID, levelCode)
	if err != nil {
		return err
	}

	user.TargetLanguageLevel = levelCode

	// –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —è–∑—ã–∫–æ–≤ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
	text := h.service.Localizer.Get(user.InterfaceLanguageCode, "profile_edit_languages") +
		"\n\n" + h.service.Localizer.Get(user.InterfaceLanguageCode, "save_button") +
		" –∏–ª–∏ " + h.service.Localizer.Get(user.InterfaceLanguageCode, "cancel_button")

	keyboard := h.createEditLanguagesKeyboard(
		user.InterfaceLanguageCode,
		user.NativeLanguageCode,
		user.TargetLanguageCode,
		user.TargetLanguageLevel,
	)

	editMsg := tgbotapi.NewEditMessageTextAndMarkup(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		text,
		keyboard,
	)
	_, err = h.bot.Request(editMsg)
	return err
}

// handleEditLevelLang —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —É—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è —è–∑—ã–∫–æ–º
func (h *TelegramHandler) handleEditLevelLang(callback *tgbotapi.CallbackQuery, user *models.User) error {
	langName := h.service.Localizer.GetLanguageName(user.TargetLanguageCode, user.InterfaceLanguageCode)
	title := h.service.Localizer.GetWithParams(user.InterfaceLanguageCode, "choose_level_title", map[string]string{
		"language": langName,
	})

	keyboard := h.createLanguageLevelKeyboardWithPrefix(user.InterfaceLanguageCode, user.TargetLanguageCode, "edit_level_", false)
	// –î–æ–±–∞–≤–ª—è–µ–º save/cancel
	saveRow := h.createSaveEditsKeyboard(user.InterfaceLanguageCode).InlineKeyboard[0]
	keyboard.InlineKeyboard = append(keyboard.InlineKeyboard, []tgbotapi.InlineKeyboardButton{saveRow[0], saveRow[1]})

	editMsg := tgbotapi.NewEditMessageTextAndMarkup(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		title,
		keyboard,
	)
	_, err := h.bot.Request(editMsg)
	return err
}
