package telegram

import (
	"fmt"
	"log"
	"strconv"
	"strings"

	"language-exchange-bot/internal/core"
	"language-exchange-bot/internal/models"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type TelegramHandler struct {
	bot     *tgbotapi.BotAPI
	service *core.BotService
}

func NewTelegramHandler(bot *tgbotapi.BotAPI, service *core.BotService) *TelegramHandler {
	return &TelegramHandler{
		bot:     bot,
		service: service,
	}
}

func (h *TelegramHandler) HandleUpdate(update tgbotapi.Update) error {
	if update.Message != nil {
		return h.handleMessage(update.Message)
	}
	if update.CallbackQuery != nil {
		return h.handleCallbackQuery(update.CallbackQuery)
	}
	return nil
}

func (h *TelegramHandler) handleMessage(message *tgbotapi.Message) error {
	user, err := h.service.HandleUserRegistration(
		message.From.ID,
		message.From.UserName,
		message.From.FirstName,
		message.From.LanguageCode,
	)
	if err != nil {
		log.Printf("Error handling user registration: %v", err)
		return err
	}

	if message.IsCommand() {
		return h.handleCommand(message, user)
	}
	return h.handleState(message, user)
}

func (h *TelegramHandler) handleCommand(message *tgbotapi.Message, user *models.User) error {
	switch message.Command() {
	case "start":
		return h.handleStartCommand(message, user)
	case "status":
		return h.handleStatusCommand(message, user)
	case "reset":
		return h.handleResetCommand(message, user)
	case "language":
		return h.handleLanguageCommand(message, user)
	case "profile":
		return h.handleProfileCommand(message, user)
	default:
		return h.sendMessage(message.Chat.ID, h.service.Localizer.Get(user.InterfaceLanguageCode, "unknown_command"))
	}
}

func (h *TelegramHandler) handleStartCommand(message *tgbotapi.Message, user *models.User) error {

	completed, err := h.service.IsProfileCompleted(user)
	if err == nil && completed {
		summary, serr := h.service.BuildProfileSummary(user)
		if serr != nil {
			log.Printf("profile summary error: %v", serr)
		}
		text := summary + "\n\n" + h.service.Localizer.Get(user.InterfaceLanguageCode, "profile_actions")
		msg := tgbotapi.NewMessage(message.Chat.ID, text)
		msg.ReplyMarkup = h.createProfileMenuKeyboard(user.InterfaceLanguageCode)
		_, sendErr := h.bot.Send(msg)
		return sendErr
	}

	welcomeText := h.service.GetWelcomeMessage(user)
	languagePrompt := h.service.GetLanguagePrompt(user, "native")
	fullText := welcomeText + "\n\n" + languagePrompt

	keyboard := h.createLanguageKeyboard(user.InterfaceLanguageCode, "native", "", false)
	msg := tgbotapi.NewMessage(message.Chat.ID, fullText)
	msg.ReplyMarkup = keyboard
	if _, err := h.bot.Send(msg); err != nil {
		return err
	}

	_ = h.service.DB.UpdateUserState(user.ID, models.StateWaitingLanguage)
	_ = h.service.DB.UpdateUserStatus(user.ID, models.StatusFilling)
	return nil
}

func (h *TelegramHandler) handleStatusCommand(message *tgbotapi.Message, user *models.User) error {
	statusText := fmt.Sprintf(
		"üìä %s:\n\n"+
			"üÜî ID: %d\n"+
			"üìù %s: %s\n"+
			"üîÑ %s: %s\n"+
			"üìà %s: %d%%\n"+
			"üåê %s: %s",
		h.service.Localizer.Get(user.InterfaceLanguageCode, "your_status"),
		user.ID,
		h.service.Localizer.Get(user.InterfaceLanguageCode, "status"),
		user.Status,
		h.service.Localizer.Get(user.InterfaceLanguageCode, "state"),
		user.State,
		h.service.Localizer.Get(user.InterfaceLanguageCode, "profile_completion"),
		user.ProfileCompletionLevel,
		h.service.Localizer.Get(user.InterfaceLanguageCode, "interface_language"),
		user.InterfaceLanguageCode,
	)
	return h.sendMessage(message.Chat.ID, statusText)
}

func (h *TelegramHandler) handleResetCommand(message *tgbotapi.Message, user *models.User) error {
	return h.sendMessage(message.Chat.ID, h.service.Localizer.Get(user.InterfaceLanguageCode, "profile_reset"))
}

func (h *TelegramHandler) handleLanguageCommand(message *tgbotapi.Message, user *models.User) error {
	text := h.service.Localizer.Get(user.InterfaceLanguageCode, "choose_interface_language")
	keyboard := h.createLanguageKeyboard(user.InterfaceLanguageCode, "interface", "", true)
	msg := tgbotapi.NewMessage(message.Chat.ID, text)
	msg.ReplyMarkup = keyboard
	_, err := h.bot.Send(msg)
	return err
}

func (h *TelegramHandler) handleState(message *tgbotapi.Message, user *models.User) error {
	switch user.State {
	case models.StateWaitingLanguage,
		models.StateWaitingInterests,
		models.StateWaitingTime:
		return h.sendMessage(message.Chat.ID, h.service.Localizer.Get(user.InterfaceLanguageCode, "use_menu_above"))
	default:
		return h.sendMessage(message.Chat.ID, h.service.Localizer.Get(user.InterfaceLanguageCode, "unknown_command"))
	}
}

// –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–æ–≤—ã—Ö –∫–æ–ª–±—ç–∫–æ–≤ –≤ —Ä–æ—É—Ç–µ—Ä–µ
func (h *TelegramHandler) handleCallbackQuery(callback *tgbotapi.CallbackQuery) error {
	user, err := h.service.HandleUserRegistration(
		callback.From.ID,
		callback.From.UserName,
		callback.From.FirstName,
		callback.From.LanguageCode,
	)
	if err != nil {
		log.Printf("Error handling user registration: %v", err)
		return err
	}

	data := callback.Data
	_, _ = h.bot.Request(tgbotapi.NewCallback(callback.ID, ""))

	switch {
	case strings.HasPrefix(data, "lang_native_"):
		return h.handleNativeLanguageCallback(callback, user)
	case strings.HasPrefix(data, "lang_target_"):
		return h.handleTargetLanguageCallback(callback, user)
	case strings.HasPrefix(data, "lang_interface_"):
		langCode := strings.TrimPrefix(data, "lang_interface_")
		return h.handleInterfaceLanguageSelection(callback, user, langCode)
	case strings.HasPrefix(data, "interest_"):
		interestID := strings.TrimPrefix(data, "interest_")
		return h.handleInterestSelection(callback, user, interestID)
	case data == "profile_show":
		return h.handleProfileShow(callback, user)
	case data == "profile_reset_ask":
		return h.handleProfileResetAsk(callback, user)
	case data == "profile_reset_yes":
		return h.handleProfileResetYes(callback, user)
	case data == "profile_reset_no":
		return h.handleProfileResetNo(callback, user)
	case data == "interests_continue":
		return h.handleInterestsContinue(callback, user)
	case data == "languages_continue_filling":
		return h.handleLanguagesContinueFilling(callback, user)
	case data == "languages_reselect":
		return h.handleLanguagesReselect(callback, user)
	case strings.HasPrefix(data, "level_"):
		levelCode := strings.TrimPrefix(data, "level_")
		return h.handleLanguageLevelSelection(callback, user, levelCode)
	case data == "back_to_previous_step":
		return h.handleBackToPreviousStep(callback, user)
	default:
		return nil
	}
}

func (h *TelegramHandler) handleInterestsContinue(callback *tgbotapi.CallbackQuery, user *models.User) error {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω—ã –ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã
	selectedInterests, err := h.service.DB.GetUserSelectedInterests(user.ID)
	if err != nil {
		log.Printf("Error getting selected interests: %v", err)
		return err
	}

	// –ï—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞, —Å–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	if len(selectedInterests) == 0 {
		warningMsg := "‚ùó " + h.service.Localizer.Get(user.InterfaceLanguageCode, "choose_at_least_one_interest")
		if warningMsg == "choose_at_least_one_interest" { // fallback if key doesn't exist
			warningMsg = "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–Ω—Ç–µ—Ä–µ—Å"
		}

		editMsg := tgbotapi.NewEditMessageText(
			callback.Message.Chat.ID,
			callback.Message.MessageID,
			warningMsg,
		)
		_, err := h.bot.Request(editMsg)
		return err
	}

	// –ï—Å–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã –≤—ã–±—Ä–∞–Ω—ã, –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
	completedMsg := h.service.Localizer.Get(user.InterfaceLanguageCode, "profile_completed")
	editMsg := tgbotapi.NewEditMessageText(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		completedMsg,
	)
	_, err = h.bot.Request(editMsg)
	if err != nil {
		return err
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	h.service.DB.UpdateUserState(user.ID, models.StateActive)
	h.service.DB.UpdateUserStatus(user.ID, models.StatusActive)
	return nil
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–æ–≤
func (h *TelegramHandler) handleLanguagesContinueFilling(callback *tgbotapi.CallbackQuery, user *models.User) error {
	// –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –≤—ã–±–æ—Ä—É –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
	err := h.service.DB.ClearUserInterests(user.ID)
	if err != nil {
		log.Printf("Warning: could not clear user interests: %v", err)
	}

	// –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è —è–∑—ã–∫–æ–º
	langName := h.service.Localizer.GetLanguageName(user.TargetLanguageCode, user.InterfaceLanguageCode)
	title := h.service.Localizer.GetWithParams(user.InterfaceLanguageCode, "choose_level_title", map[string]string{
		"language": langName,
	})

	keyboard := h.createLanguageLevelKeyboard(user.InterfaceLanguageCode, user.TargetLanguageCode)
	editMsg := tgbotapi.NewEditMessageTextAndMarkup(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		title,
		keyboard,
	)
	_, err = h.bot.Request(editMsg)
	return err
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–æ–≤
func (h *TelegramHandler) handleLanguagesReselect(callback *tgbotapi.CallbackQuery, user *models.User) error {
	// –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —è–∑—ã–∫–æ–≤
	user.NativeLanguageCode = ""
	user.TargetLanguageCode = ""
	user.TargetLanguageLevel = ""

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	_ = h.service.DB.UpdateUserNativeLanguage(user.ID, "")
	_ = h.service.DB.UpdateUserTargetLanguage(user.ID, "")
	_ = h.service.DB.UpdateUserTargetLanguageLevel(user.ID, "")

	// –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Ä–æ–¥–Ω–æ–π —è–∑—ã–∫ —Å–Ω–æ–≤–∞
	text := h.service.Localizer.Get(user.InterfaceLanguageCode, "choose_native_language")
	keyboard := h.createLanguageKeyboard(user.InterfaceLanguageCode, "native", "", true)
	editMsg := tgbotapi.NewEditMessageTextAndMarkup(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		text,
		keyboard,
	)
	_, err := h.bot.Request(editMsg)
	return err
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è –≤–ª–∞–¥–µ–Ω–∏—è —è–∑—ã–∫–æ–º
func (h *TelegramHandler) handleLanguageLevelSelection(callback *tgbotapi.CallbackQuery, user *models.User, levelCode string) error {
	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è —è–∑—ã–∫–æ–º
	err := h.service.DB.UpdateUserTargetLanguageLevel(user.ID, levelCode)
	if err != nil {
		return err
	}

	user.TargetLanguageLevel = levelCode

	// –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è
	levelName := h.service.Localizer.Get(user.InterfaceLanguageCode, "choose_level_"+levelCode)

	// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≤—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è
	confirmMsg := fmt.Sprintf("%s: %s\n\n%s",
		h.service.Localizer.Get(user.InterfaceLanguageCode, "level_updated"),
		levelName,
		h.service.Localizer.Get(user.InterfaceLanguageCode, "choose_interests"))

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏ —Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
	interests, _ := h.service.Localizer.GetInterests(user.InterfaceLanguageCode)
	keyboard := h.createInterestsKeyboard(interests, []int{}, user.InterfaceLanguageCode)

	// –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
	editMsg := tgbotapi.NewEditMessageTextAndMarkup(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		confirmMsg,
		keyboard,
	)
	_, err = h.bot.Request(editMsg)
	return err
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
func (h *TelegramHandler) handleBackToPreviousStep(callback *tgbotapi.CallbackQuery, user *models.User) error {
	// –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É
	switch user.State {
	case models.StateWaitingTargetLanguage:
		// –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ä–æ–¥–Ω–æ–≥–æ —è–∑—ã–∫–∞
		user.NativeLanguageCode = ""
		_ = h.service.DB.UpdateUserNativeLanguage(user.ID, "")

		text := h.service.Localizer.Get(user.InterfaceLanguageCode, "choose_native_language")
		keyboard := h.createLanguageKeyboard(user.InterfaceLanguageCode, "native", "", true)
		editMsg := tgbotapi.NewEditMessageTextAndMarkup(
			callback.Message.Chat.ID,
			callback.Message.MessageID,
			text,
			keyboard,
		)
		_, err := h.bot.Request(editMsg)
		return err

	case models.StateWaitingLanguageLevel:
		// –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –∏–∑—É—á–∞–µ–º–æ–≥–æ —è–∑—ã–∫–∞
		if user.NativeLanguageCode == "ru" {
			// –ï—Å–ª–∏ —Ä–æ–¥–Ω–æ–π —è–∑—ã–∫ —Ä—É—Å—Å–∫–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –≤—ã–±–æ—Ä—É –∏–∑—É—á–∞–µ–º–æ–≥–æ —è–∑—ã–∫–∞
			user.TargetLanguageCode = ""
			_ = h.service.DB.UpdateUserTargetLanguage(user.ID, "")

			text := h.service.Localizer.Get(user.InterfaceLanguageCode, "choose_target_language")
			// –ò—Å–∫–ª—é—á–∞–µ–º —Ä—É—Å—Å–∫–∏–π –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–∑—É—á–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤
			keyboard := h.createLanguageKeyboard(user.InterfaceLanguageCode, "target", "ru", true)
			editMsg := tgbotapi.NewEditMessageTextAndMarkup(
				callback.Message.Chat.ID,
				callback.Message.MessageID,
				text,
				keyboard,
			)
			_, err := h.bot.Request(editMsg)
			return err
		} else {
			// –ï—Å–ª–∏ —Ä–æ–¥–Ω–æ–π —è–∑—ã–∫ –Ω–µ —Ä—É—Å—Å–∫–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–æ–≤
			user.TargetLanguageCode = ""
			_ = h.service.DB.UpdateUserTargetLanguage(user.ID, "")

			// –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —è–∑—ã–∫–æ–≤
			nativeLangName := h.service.Localizer.GetLanguageName(user.NativeLanguageCode, user.InterfaceLanguageCode)
			targetLangName := h.service.Localizer.GetLanguageName("ru", user.InterfaceLanguageCode)

			confirmMsg := h.service.Localizer.GetWithParams(user.InterfaceLanguageCode, "languages_selected_confirmation", map[string]string{
				"native":      h.service.Localizer.Get(user.InterfaceLanguageCode, "languages_selected_native"),
				"native_name": nativeLangName,
				"target":      h.service.Localizer.Get(user.InterfaceLanguageCode, "languages_selected_target"),
				"target_name": targetLangName,
			})

			keyboard := h.createLanguageConfirmationKeyboard(user.InterfaceLanguageCode)
			editMsg := tgbotapi.NewEditMessageTextAndMarkup(
				callback.Message.Chat.ID,
				callback.Message.MessageID,
				confirmMsg,
				keyboard,
			)
			_, err := h.bot.Request(editMsg)
			return err
		}

	case models.StateWaitingInterests:
		// –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —É—Ä–æ–≤–Ω—è –≤–ª–∞–¥–µ–Ω–∏—è —è–∑—ã–∫–æ–º
		user.TargetLanguageLevel = ""
		_ = h.service.DB.UpdateUserTargetLanguageLevel(user.ID, "")

		// –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è —è–∑—ã–∫–æ–º
		langName := h.service.Localizer.GetLanguageName(user.TargetLanguageCode, user.InterfaceLanguageCode)
		title := h.service.Localizer.GetWithParams(user.InterfaceLanguageCode, "choose_level_title", map[string]string{
			"language": langName,
		})

		keyboard := h.createLanguageLevelKeyboard(user.InterfaceLanguageCode, user.TargetLanguageCode)
		editMsg := tgbotapi.NewEditMessageTextAndMarkup(
			callback.Message.Chat.ID,
			callback.Message.MessageID,
			title,
			keyboard,
		)
		_, err := h.bot.Request(editMsg)
		return err

	default:
		// –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –≤—ã–±–æ—Ä—É —Ä–æ–¥–Ω–æ–≥–æ —è–∑—ã–∫–∞
		user.NativeLanguageCode = ""
		user.TargetLanguageCode = ""
		user.TargetLanguageLevel = ""

		_ = h.service.DB.UpdateUserNativeLanguage(user.ID, "")
		_ = h.service.DB.UpdateUserTargetLanguage(user.ID, "")
		_ = h.service.DB.UpdateUserTargetLanguageLevel(user.ID, "")

		text := h.service.Localizer.Get(user.InterfaceLanguageCode, "choose_native_language")
		keyboard := h.createLanguageKeyboard(user.InterfaceLanguageCode, "native", "", true)
		editMsg := tgbotapi.NewEditMessageTextAndMarkup(
			callback.Message.Chat.ID,
			callback.Message.MessageID,
			text,
			keyboard,
		)
		_, err := h.bot.Request(editMsg)
		return err
	}
}

// ‚ú® –í—ã–±–æ—Ä —Ä–æ–¥–Ω–æ–≥–æ —è–∑—ã–∫–∞
func (h *TelegramHandler) handleNativeLanguageCallback(callback *tgbotapi.CallbackQuery, user *models.User) error {
	langCode := callback.Data[len("lang_native_"):]

	err := h.service.DB.UpdateUserNativeLanguage(user.ID, langCode)
	if err != nil {
		return err
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Ä–∞–≤–Ω—ã–º —Ä–æ–¥–Ω–æ–º—É —è–∑—ã–∫—É
	err = h.service.DB.UpdateUserInterfaceLanguage(user.ID, langCode)
	if err != nil {
		log.Printf("Warning: could not update interface language: %v", err)
		// –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
	}
	user.NativeLanguageCode = langCode
	user.InterfaceLanguageCode = langCode

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	h.service.DB.UpdateUserState(user.ID, models.StateWaitingLanguage)

	// –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
	return h.proceedToNextOnboardingStep(callback, user, langCode)
}

// proceedToNextOnboardingStep –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ä–æ–¥–Ω–æ–≥–æ —è–∑—ã–∫–∞
func (h *TelegramHandler) proceedToNextOnboardingStep(callback *tgbotapi.CallbackQuery, user *models.User, nativeLangCode string) error {
	if nativeLangCode == "ru" {
		// –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ä—É—Å—Å–∫–∏–π –∫–∞–∫ —Ä–æ–¥–Ω–æ–π, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –∏–∑—É—á–∞–µ–º—ã–π —è–∑—ã–∫
		text := h.service.Localizer.Get(user.InterfaceLanguageCode, "choose_target_language")

		// –ò—Å–∫–ª—é—á–∞–µ–º —Ä—É—Å—Å–∫–∏–π –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–∑—É—á–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤
		keyboard := h.createLanguageKeyboard(user.InterfaceLanguageCode, "target", "ru", true)
		editMsg := tgbotapi.NewEditMessageTextAndMarkup(callback.Message.Chat.ID, callback.Message.MessageID, text, keyboard)
		_, err := h.bot.Request(editMsg)
		if err != nil {
			return err
		}

		// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –∏–∑—É—á–∞–µ–º–æ–≥–æ —è–∑—ã–∫–∞
		h.service.DB.UpdateUserState(user.ID, models.StateWaitingTargetLanguage)
		return nil
	} else {
		// –î–ª—è –≤—Å–µ—Ö –¥—Ä—É–≥–∏—Ö —è–∑—ã–∫–æ–≤ –∫–∞–∫ —Ä–æ–¥–Ω—ã—Ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä—É—Å—Å–∫–∏–π –∫–∞–∫ –∏–∑—É—á–∞–µ–º—ã–π
		err := h.service.DB.UpdateUserTargetLanguage(user.ID, "ru")
		if err != nil {
			return err
		}
		user.TargetLanguageCode = "ru"

		// –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è —Ä—É—Å—Å–∫–∏–º —è–∑—ã–∫–æ–º
		langName := h.service.Localizer.GetLanguageName(user.TargetLanguageCode, user.InterfaceLanguageCode)
		title := h.service.Localizer.GetWithParams(user.InterfaceLanguageCode, "choose_level_title", map[string]string{
			"language": langName,
		})

		keyboard := h.createLanguageLevelKeyboard(user.InterfaceLanguageCode, user.TargetLanguageCode)
		editMsg := tgbotapi.NewEditMessageTextAndMarkup(
			callback.Message.Chat.ID,
			callback.Message.MessageID,
			title,
			keyboard,
		)
		_, err = h.bot.Request(editMsg)
		if err != nil {
			return err
		}

		// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è
		h.service.DB.UpdateUserState(user.ID, models.StateWaitingLanguageLevel)
		return nil
	}
}

func (h *TelegramHandler) handleTargetLanguageCallback(callback *tgbotapi.CallbackQuery, user *models.User) error {
	langCode := callback.Data[len("lang_target_"):]
	err := h.service.DB.UpdateUserTargetLanguage(user.ID, langCode)
	if err != nil {
		return err
	}

	// ‚úÖ –û–ß–ò–©–ê–ï–ú –°–¢–ê–†–´–ï –ò–ù–¢–ï–†–ï–°–´ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –≤—ã–±–æ—Ä—É –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
	err = h.service.DB.ClearUserInterests(user.ID)
	if err != nil {
		log.Printf("Warning: could not clear user interests: %v", err)
	}

	user.TargetLanguageCode = langCode
	langName := h.service.Localizer.GetLanguageName(langCode, user.InterfaceLanguageCode)

	// –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è —è–∑—ã–∫–æ–º
	title := h.service.Localizer.GetWithParams(user.InterfaceLanguageCode, "choose_level_title", map[string]string{
		"language": langName,
	})

	keyboard := h.createLanguageLevelKeyboard(user.InterfaceLanguageCode, langCode)
	editMsg := tgbotapi.NewEditMessageTextAndMarkup(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		title,
		keyboard,
	)
	_, err = h.bot.Request(editMsg)
	return err
}

func (h *TelegramHandler) handleInterfaceLanguageSelection(callback *tgbotapi.CallbackQuery, user *models.User, langCode string) error {
	if err := h.service.DB.UpdateUserInterfaceLanguage(user.ID, langCode); err != nil {
		log.Printf("Error updating interface language: %v", err)
		return err
	}
	langName := h.service.Localizer.GetLanguageName(langCode, langCode)
	text := fmt.Sprintf("‚úÖ %s: %s",
		h.service.Localizer.Get(langCode, "language_updated"),
		langName,
	)
	return h.sendMessage(callback.Message.Chat.ID, text)
}

func (h *TelegramHandler) handleInterestSelection(callback *tgbotapi.CallbackQuery, user *models.User, interestIDStr string) error {
	interestID, err := strconv.Atoi(interestIDStr)
	if err != nil {
		log.Printf("Error parsing interest ID: %v", err)
		return err
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	selectedInterests, err := h.service.DB.GetUserSelectedInterests(user.ID)
	if err != nil {
		log.Printf("Error getting user interests, using empty list: %v", err)
		selectedInterests = []int{} // fallback
	}

	// –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∏–Ω—Ç–µ—Ä–µ—Å (toggle)
	isCurrentlySelected := false
	for i, id := range selectedInterests {
		if id == interestID {
			// –£–±–∏—Ä–∞–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞
			selectedInterests = append(selectedInterests[:i], selectedInterests[i+1:]...)
			isCurrentlySelected = true
			break
		}
	}

	if !isCurrentlySelected {
		// –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫
		selectedInterests = append(selectedInterests, interestID)
		err = h.service.DB.SaveUserInterest(user.ID, interestID, false)
	} else {
		// –£–¥–∞–ª—è–µ–º –∏–Ω—Ç–µ—Ä–µ—Å –∏–∑ –ë–î
		err = h.service.DB.RemoveUserInterest(user.ID, interestID)
	}

	if err != nil {
		log.Printf("Error updating user interest: %v", err)
		return err
	}

	// ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É - –Ω–∏–∫–∞–∫–∏—Ö –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
	interests, _ := h.service.Localizer.GetInterests(user.InterfaceLanguageCode)
	keyboard := h.createInterestsKeyboard(interests, selectedInterests, user.InterfaceLanguageCode)

	editMsg := tgbotapi.NewEditMessageReplyMarkup(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		keyboard,
	)
	_, err = h.bot.Request(editMsg)
	return err
}

func (h *TelegramHandler) sendTargetLanguageMenu(chatID int64, user *models.User) error {
	// –ò—Å–∫–ª—é—á–∞–µ–º —Ä–æ–¥–Ω–æ–π —è–∑—ã–∫ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–∑—É—á–∞–µ–º—ã—Ö
	excludeLang := user.NativeLanguageCode
	if excludeLang == "" {
		excludeLang = "ru" // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–∫–ª—é—á–∞–µ–º —Ä—É—Å—Å–∫–∏–π
	}

	keyboard := h.createLanguageKeyboard(user.InterfaceLanguageCode, "target", excludeLang, true)
	text := h.service.Localizer.Get(user.InterfaceLanguageCode, "choose_target_language")
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ReplyMarkup = keyboard
	_, err := h.bot.Send(msg)
	return err
}

// –í createInterestsKeyboard –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
func (h *TelegramHandler) sendInterestsMenu(chatID int64, user *models.User) error {
	interests, err := h.service.Localizer.GetInterests(user.InterfaceLanguageCode)
	if err != nil {
		return err
	}

	// –ó–∞–≥—Ä—É–∂–∞–µ–º —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	selectedInterests, err := h.service.DB.GetUserSelectedInterests(user.ID)
	if err != nil {
		log.Printf("Error loading user interests: %v", err)
		selectedInterests = []int{} // fallback –Ω–∞ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
	}

	keyboard := h.createInterestsKeyboard(interests, selectedInterests, user.InterfaceLanguageCode)
	text := h.service.Localizer.Get(user.InterfaceLanguageCode, "choose_interests")
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ReplyMarkup = keyboard
	_, err = h.bot.Send(msg)
	return err
}

func (h *TelegramHandler) sendMessage(chatID int64, text string) error {
	msg := tgbotapi.NewMessage(chatID, text)
	_, err := h.bot.Send(msg)
	return err
}

func (h *TelegramHandler) createProfileMenuKeyboard(interfaceLang string) tgbotapi.InlineKeyboardMarkup {
	// –õ–µ–π–±–ª—ã –º–æ–∂–Ω–æ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ Localizer –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏
	show := tgbotapi.NewInlineKeyboardButtonData(
		h.service.Localizer.Get(interfaceLang, "profile_show"),
		"profile_show",
	)
	reconfig := tgbotapi.NewInlineKeyboardButtonData(
		h.service.Localizer.Get(interfaceLang, "profile_reconfigure"),
		"profile_reset_ask",
	)
	buttons := [][]tgbotapi.InlineKeyboardButton{
		{show},
		{reconfig},
	}
	return tgbotapi.NewInlineKeyboardMarkup(buttons...)
}

func (h *TelegramHandler) createResetConfirmKeyboard(interfaceLang string) tgbotapi.InlineKeyboardMarkup {
	yes := tgbotapi.NewInlineKeyboardButtonData(
		h.service.Localizer.Get(interfaceLang, "profile_reset_yes"),
		"profile_reset_yes",
	)
	no := tgbotapi.NewInlineKeyboardButtonData(
		h.service.Localizer.Get(interfaceLang, "profile_reset_no"),
		"profile_reset_no",
	)
	return tgbotapi.NewInlineKeyboardMarkup([][]tgbotapi.InlineKeyboardButton{{yes}, {no}}...)
}

// –ö–æ–º–∞–Ω–¥–∞ /profile ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç.
func (h *TelegramHandler) handleProfileCommand(message *tgbotapi.Message, user *models.User) error {
	summary, err := h.service.BuildProfileSummary(user)
	if err != nil {
		return h.sendMessage(message.Chat.ID, h.service.Localizer.Get(user.InterfaceLanguageCode, "unknown_command"))
	}
	text := summary + "\n\n" + h.service.Localizer.Get(user.InterfaceLanguageCode, "profile_actions")
	msg := tgbotapi.NewMessage(message.Chat.ID, text)
	msg.ReplyMarkup = h.createProfileMenuKeyboard(user.InterfaceLanguageCode)
	_, err = h.bot.Send(msg)
	return err
}

// –ö–æ–ª–±—ç–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è: –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
func (h *TelegramHandler) handleProfileShow(callback *tgbotapi.CallbackQuery, user *models.User) error {
	summary, err := h.service.BuildProfileSummary(user)
	if err != nil {
		return err
	}
	text := summary + "\n\n" + h.service.Localizer.Get(user.InterfaceLanguageCode, "profile_actions")
	edit := tgbotapi.NewEditMessageTextAndMarkup(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		text,
		h.createProfileMenuKeyboard(user.InterfaceLanguageCode),
	)
	_, err = h.bot.Request(edit)
	return err
}

// –°–ø—Ä–æ—Å–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞
func (h *TelegramHandler) handleProfileResetAsk(callback *tgbotapi.CallbackQuery, user *models.User) error {
	title := h.service.Localizer.Get(user.InterfaceLanguageCode, "profile_reset_title")
	warn := h.service.Localizer.Get(user.InterfaceLanguageCode, "profile_reset_warning")
	text := fmt.Sprintf("%s\n\n%s", title, warn)
	edit := tgbotapi.NewEditMessageTextAndMarkup(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		text,
		h.createResetConfirmKeyboard(user.InterfaceLanguageCode),
	)
	_, err := h.bot.Request(edit)
	return err
}

// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞
func (h *TelegramHandler) handleProfileResetYes(callback *tgbotapi.CallbackQuery, user *models.User) error {
	if err := h.service.DB.ResetUserProfile(user.ID); err != nil {
		return err
	}
	// –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ø–∞–º—è—Ç–∏ –±–∞–∑–æ–≤—ã–µ –ø–æ–ª—è
	user.NativeLanguageCode = ""
	user.TargetLanguageCode = ""
	user.State = models.StateWaitingLanguage
	user.Status = models.StatusFilling
	user.ProfileCompletionLevel = 0

	done := h.service.Localizer.Get(user.InterfaceLanguageCode, "profile_reset_done")
	// –ü—Ä–µ–¥–ª–æ–∂–∏–º —Å—Ä–∞–∑—É –Ω–∞—á–∞—Ç—å —Å –≤—ã–±–æ—Ä–∞ —Ä–æ–¥–Ω–æ–≥–æ —è–∑—ã–∫–∞
	next := h.service.GetLanguagePrompt(user, "native")
	text := done + "\n\n" + next

	edit := tgbotapi.NewEditMessageTextAndMarkup(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		text,
		h.createLanguageKeyboard(user.InterfaceLanguageCode, "native", "", true),
	)
	_, err := h.bot.Request(edit)
	return err
}

// –û—Ç–º–µ–Ω–∞ —Å–±—Ä–æ—Å–∞ ‚Äî –≤–µ—Ä–Ω—ë–º—Å—è –≤ –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è
func (h *TelegramHandler) handleProfileResetNo(callback *tgbotapi.CallbackQuery, user *models.User) error {
	return h.handleProfileShow(callback, user)
}
