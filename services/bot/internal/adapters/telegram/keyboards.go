package telegram

import (
	"fmt"
	"sort"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func (h *TelegramHandler) createLanguageKeyboard(interfaceLang, keyboardType string, excludeLang string, showBackButton bool) tgbotapi.InlineKeyboardMarkup {
	type langOption struct{ code, flag string }
	languages := []langOption{
		{"en", "üá∫üá∏"}, {"ru", "üá∑üá∫"}, {"es", "üá™üá∏"}, {"zh", "üá®üá≥"},
	}

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º Map –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
	uniqueButtons := make(map[string]tgbotapi.InlineKeyboardButton)

	for _, lang := range languages {
		// –ò—Å–∫–ª—é—á–∞–µ–º —É–∫–∞–∑–∞–Ω–Ω—ã–π —è–∑—ã–∫ –∏–∑ —Å–ø–∏—Å–∫–∞
		if lang.code == excludeLang {
			continue
		}

		name := h.service.Localizer.GetLanguageName(lang.code, interfaceLang)
		label := fmt.Sprintf("%s %s", lang.flag, name)
		callbackData := fmt.Sprintf("lang_%s_%s", keyboardType, lang.code)

		// –ò–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ callback data (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —è–∑—ã–∫–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç)
		if _, exists := uniqueButtons[callbackData]; !exists {
			button := tgbotapi.NewInlineKeyboardButtonData(label, callbackData)
			uniqueButtons[callbackData] = button
		}
	}

	// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º map –≤ –º–∞—Å—Å–∏–≤ –∫–Ω–æ–ø–æ–∫
	var buttons [][]tgbotapi.InlineKeyboardButton
	for _, button := range uniqueButtons {
		buttons = append(buttons, []tgbotapi.InlineKeyboardButton{button})
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥", –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
	if showBackButton {
		backButton := tgbotapi.NewInlineKeyboardButtonData(
			h.service.Localizer.Get(interfaceLang, "back_button"),
			"back_to_previous_step",
		)
		buttons = append(buttons, []tgbotapi.InlineKeyboardButton{backButton})
	}

	return tgbotapi.NewInlineKeyboardMarkup(buttons...)
}

func (h *TelegramHandler) createInterestsKeyboard(interests map[int]string, selectedInterests []int, interfaceLang string) tgbotapi.InlineKeyboardMarkup {
	var buttonRows [][]tgbotapi.InlineKeyboardButton

	// –°–æ–∑–¥–∞—ë–º –º–∞–ø—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
	selectedMap := make(map[int]bool)
	for _, id := range selectedInterests {
		selectedMap[id] = true
	}

	// –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ ID –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
	var sortedIDs []int
	for id := range interests {
		sortedIDs = append(sortedIDs, id)
	}
	sort.Ints(sortedIDs)

	// –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥ –¥–ª—è –±–æ–ª–µ–µ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ –≤–∏–¥–∞
	var currentRow []tgbotapi.InlineKeyboardButton

	for _, id := range sortedIDs {
		name := interests[id]
		var label string
		if selectedMap[id] {
			label = "‚úÖ " + name
		} else {
			label = name
		}

		button := tgbotapi.NewInlineKeyboardButtonData(label, fmt.Sprintf("interest_%d", id))
		currentRow = append(currentRow, button)

		// –ö–æ–≥–¥–∞ –≤ —Ä—è–¥—É 2 –∫–Ω–æ–ø–∫–∏, –¥–æ–±–∞–≤–ª—è–µ–º —Ä—è–¥ –ø–æ–ª–Ω–æ—Å—Ç—å—é
		if len(currentRow) == 2 {
			buttonRows = append(buttonRows, currentRow)
			currentRow = []tgbotapi.InlineKeyboardButton{}
		}
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä—è–¥–∞
	if len(currentRow) > 0 {
		buttonRows = append(buttonRows, currentRow)
	}

	// –ù–∏–∂–Ω–∏–π –±–ª–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
	var controlRow []tgbotapi.InlineKeyboardButton

	// –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" –≤—Å–µ–≥–¥–∞ –≤–∏–¥–Ω–∞
	continueText := h.service.Localizer.Get(interfaceLang, "interests_continue")
	continueButton := tgbotapi.NewInlineKeyboardButtonData(
		continueText,
		"interests_continue",
	)
	controlRow = append(controlRow, continueButton)

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
	backButton := tgbotapi.NewInlineKeyboardButtonData(
		h.service.Localizer.Get(interfaceLang, "back_button"),
		"back_to_previous_step",
	)
	controlRow = append(controlRow, backButton)

	buttonRows = append(buttonRows, controlRow)

	return tgbotapi.NewInlineKeyboardMarkup(buttonRows...)
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–æ–≤
func (h *TelegramHandler) createLanguageConfirmationKeyboard(interfaceLang string) tgbotapi.InlineKeyboardMarkup {
	continueButton := tgbotapi.NewInlineKeyboardButtonData(
		h.service.Localizer.Get(interfaceLang, "languages_continue_filling"),
		"languages_continue_filling",
	)
	reselectButton := tgbotapi.NewInlineKeyboardButtonData(
		h.service.Localizer.Get(interfaceLang, "languages_reselect"),
		"languages_reselect",
	)

	// –¢–æ–ª—å–∫–æ –¥–≤–µ –∫–Ω–æ–ø–∫–∏ –±–µ–∑ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
	buttons := [][]tgbotapi.InlineKeyboardButton{
		{continueButton},
		{reselectButton},
	}

	return tgbotapi.NewInlineKeyboardMarkup(buttons...)
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è –≤–ª–∞–¥–µ–Ω–∏—è —è–∑—ã–∫–æ–º
func (h *TelegramHandler) createLanguageLevelKeyboard(interfaceLang, languageCode string) tgbotapi.InlineKeyboardMarkup {
	levels := []struct {
		code, key string
	}{
		{"beginner", "choose_level_beginner"},
		{"elementary", "choose_level_elementary"},
		{"intermediate", "choose_level_intermediate"},
		{"upper_intermediate", "choose_level_upper_intermediate"},
		{"advanced", "choose_level_advanced"},
	}

	var buttons [][]tgbotapi.InlineKeyboardButton
	for _, level := range levels {
		label := h.service.Localizer.Get(interfaceLang, level.key)
		button := tgbotapi.NewInlineKeyboardButtonData(label, fmt.Sprintf("level_%s", level.code))
		buttons = append(buttons, []tgbotapi.InlineKeyboardButton{button})
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
	backButton := tgbotapi.NewInlineKeyboardButtonData(
		h.service.Localizer.Get(interfaceLang, "back_button"),
		"back_to_previous_step",
	)
	buttons = append(buttons, []tgbotapi.InlineKeyboardButton{backButton})

	return tgbotapi.NewInlineKeyboardMarkup(buttons...)
}
