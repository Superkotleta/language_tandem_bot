package telegram

import (
	"fmt"
	"sort"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func (h *TelegramHandler) createLanguageKeyboard(interfaceLang, keyboardType string) tgbotapi.InlineKeyboardMarkup {
	type langOption struct{ code, flag string }
	languages := []langOption{
		{"en", "üá∫üá∏"}, {"ru", "üá∑üá∫"}, {"es", "üá™üá∏"}, {"zh", "üá®üá≥"},
	}

	var buttons [][]tgbotapi.InlineKeyboardButton
	for _, lang := range languages {
		name := h.service.Localizer.GetLanguageName(lang.code, interfaceLang)
		label := fmt.Sprintf("%s %s", lang.flag, name)
		button := tgbotapi.NewInlineKeyboardButtonData(label, fmt.Sprintf("lang_%s_%s", keyboardType, lang.code))
		buttons = append(buttons, []tgbotapi.InlineKeyboardButton{button})
	}
	return tgbotapi.NewInlineKeyboardMarkup(buttons...)
}

func (h *TelegramHandler) createInterestsKeyboard(interests map[int]string, selectedInterests []int) tgbotapi.InlineKeyboardMarkup {
	var buttons [][]tgbotapi.InlineKeyboardButton

	// ‚úÖ –°–æ–∑–¥–∞—ë–º –º–∞–ø—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
	selectedMap := make(map[int]bool)
	for _, id := range selectedInterests {
		selectedMap[id] = true
	}

	// ‚úÖ –ö–õ–Æ–ß–ï–í–û–ô –§–ò–ö: –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ ID –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
	var sortedIDs []int
	for id := range interests {
		sortedIDs = append(sortedIDs, id)
	}
	// –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é ID
	sort.Ints(sortedIDs)

	// ‚úÖ –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç–∞–±–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
	for _, id := range sortedIDs {
		name := interests[id]
		var label string
		if selectedMap[id] {
			label = "‚úÖ " + name // –ì–∞–ª–æ—á–∫–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
		} else {
			label = name
		}

		button := tgbotapi.NewInlineKeyboardButtonData(label, fmt.Sprintf("interest_%d", id))
		buttons = append(buttons, []tgbotapi.InlineKeyboardButton{button})
	}

	// –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" –µ—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã
	if len(selectedInterests) > 0 {
		continueButton := tgbotapi.NewInlineKeyboardButtonData(
			"‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", "interests_continue",
		)
		buttons = append(buttons, []tgbotapi.InlineKeyboardButton{continueButton})
	}

	return tgbotapi.NewInlineKeyboardMarkup(buttons...)
}
