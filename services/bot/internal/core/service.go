package core

import (
	"database/sql"
	"fmt"
	"language-exchange-bot/internal/database"
	"language-exchange-bot/internal/localization"
	"language-exchange-bot/internal/models"
	"log"
	"strings"
)

type BotService struct {
	DB                       *database.DB
	Localizer                *localization.Localizer
	FeedbackNotificationFunc func(data map[string]interface{}) error // —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
}

func NewBotService(db *database.DB) *BotService {
	return &BotService{
		DB:        db,
		Localizer: localization.NewLocalizer(db.GetConnection()),
	}
}

// SetFeedbackNotificationFunc —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–∞—Ö
func (s *BotService) SetFeedbackNotificationFunc(fn func(map[string]interface{}) error) {
	s.FeedbackNotificationFunc = fn
}

func (s *BotService) DetectLanguage(telegramLangCode string) string {
	switch telegramLangCode {
	case "ru", "ru-RU":
		return "ru"
	case "es", "es-ES", "es-MX":
		return "es"
	case "zh", "zh-CN", "zh-TW":
		return "zh"
	default:
		return "en"
	}
}

func (s *BotService) HandleUserRegistration(telegramID int64, username, firstName, telegramLangCode string) (*models.User, error) {
	user, err := s.DB.FindOrCreateUser(telegramID, username, firstName)
	if err != nil {
		return nil, err
	}

	detected := s.DetectLanguage(telegramLangCode)
	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	if user.Status == models.StatusNew || user.InterfaceLanguageCode == "" {
		// –î–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º Telegram
		// –ï—Å–ª–∏ —è–∑—ã–∫ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—Å—Å–∫–∏–π –∫–∞–∫ –¥–µ—Ñ–æ–ª—Ç –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
		if detected == "" {
			user.InterfaceLanguageCode = "ru"
		} else {
			user.InterfaceLanguageCode = detected
		}
		_ = s.DB.UpdateUserInterfaceLanguage(user.ID, user.InterfaceLanguageCode)
	}
	return user, nil
}

func (s *BotService) GetWelcomeMessage(user *models.User) string {
	return s.Localizer.GetWithParams(user.InterfaceLanguageCode, "welcome_message", map[string]string{
		"name": user.FirstName,
	})
}

func (s *BotService) GetLanguagePrompt(user *models.User, promptType string) string {
	key := "choose_native_language"
	if promptType == "target" {
		key = "choose_target_language"
	}
	return s.Localizer.Get(user.InterfaceLanguageCode, key)
}

func (s *BotService) GetLocalizedLanguageName(langCode, interfaceLangCode string) string {
	return s.Localizer.GetLanguageName(langCode, interfaceLangCode)
}

func (s *BotService) GetLocalizedInterests(langCode string) (map[int]string, error) {
	return s.Localizer.GetInterests(langCode)
}

// IsProfileCompleted –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —è–∑—ã–∫–æ–≤ –∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞.
func (s *BotService) IsProfileCompleted(user *models.User) (bool, error) {
	if user.NativeLanguageCode == "" || user.TargetLanguageCode == "" {
		return false, nil
	}
	ids, err := s.DB.GetUserSelectedInterests(user.ID)
	if err != nil {
		return false, err
	}
	return len(ids) > 0, nil
}

// BuildProfileSummary –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Ä–µ–∑—é–º–µ –ø—Ä–æ—Ñ–∏–ª—è.
func (s *BotService) BuildProfileSummary(user *models.User) (string, error) {
	lang := user.InterfaceLanguageCode
	nativeName := s.Localizer.GetLanguageName(user.NativeLanguageCode, lang)
	targetName := s.Localizer.GetLanguageName(user.TargetLanguageCode, lang)

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–ª–∞–≥–∏ —è–∑—ã–∫–æ–≤
	var nativeFlag, targetFlag string
	switch user.NativeLanguageCode {
	case "ru":
		nativeFlag = "üá∑üá∫"
	case "en":
		nativeFlag = "üá∫üá∏"
	case "es":
		nativeFlag = "üá™üá∏"
	case "zh":
		nativeFlag = "üá®üá≥"
	default:
		nativeFlag = "üåç"
	}

	switch user.TargetLanguageCode {
	case "ru":
		targetFlag = "üá∑üá∫"
	case "en":
		targetFlag = "üá∫üá∏"
	case "es":
		targetFlag = "üá™üá∏"
	case "zh":
		targetFlag = "üá®üá≥"
	default:
		targetFlag = "üåç"
	}

	ids, err := s.DB.GetUserSelectedInterests(user.ID)
	if err != nil {
		ids = []int{}
	}
	allInterests, _ := s.Localizer.GetInterests(lang)

	var picked []string
	for _, id := range ids {
		if name, ok := allInterests[id]; ok {
			picked = append(picked, name)
		}
	}
	interestsLine := fmt.Sprintf("üéØ %s: %d", s.Localizer.Get(lang, "profile_field_interests"), len(picked))
	if len(picked) > 0 {
		interestsLine = fmt.Sprintf("üéØ %s: %d\n‚Ä¢ %s", s.Localizer.Get(lang, "profile_field_interests"), len(picked), strings.Join(picked, ", "))
	}

	title := s.Localizer.Get(lang, "profile_summary_title")
	native := fmt.Sprintf("%s %s: %s", nativeFlag, s.Localizer.Get(lang, "profile_field_native"), nativeName)
	target := fmt.Sprintf("%s %s: %s", targetFlag, s.Localizer.Get(lang, "profile_field_target"), targetName)

	return fmt.Sprintf("%s\n\n%s\n%s\n%s", title, native, target, interestsLine), nil
}

// –ú–µ—Ç–æ–¥—ã —Ä–∞–±–æ—Ç—ã —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é

// SendFeedbackNotification –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ –Ω–æ–≤–æ–º –æ—Ç–∑—ã–≤–µ
func (s *BotService) SendFeedbackNotification(feedbackData map[string]interface{}, admins []int64) error {
	if s.FeedbackNotificationFunc != nil {
		return s.FeedbackNotificationFunc(feedbackData)
	}

	// Fallback: –ª–æ–≥–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
	adminMsg := fmt.Sprintf(`
üìù –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:

üë§ –ò–º—è: %s
ÔøΩÔøΩ Telegram ID: %d

%s

üìù –û—Ç–∑—ã–≤:
%s
`,
		feedbackData["first_name"].(string),
		int64(feedbackData["telegram_id"].(int)),
		func() string {
			if username, ok := feedbackData["username"].(*string); ok && username != nil {
				return fmt.Sprintf("üë§ Username: @%s", *username)
			}
			return "üë§ Username: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
		}(),
		feedbackData["feedback_text"].(string),
	)

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –µ—Å–ª–∏ –µ—Å—Ç—å
	if contactInfo, ok := feedbackData["contact_info"].(*string); ok && contactInfo != nil {
		adminMsg += fmt.Sprintf("\nüìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: %s", *contactInfo)
	}

	// –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
	log.Printf("–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º: %s", adminMsg)

	return nil
}

// ValidateFeedback –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ—Ç–∑—ã–≤–∞ –ø–æ –¥–ª–∏–Ω–µ
func (s *BotService) ValidateFeedback(feedbackText string) error {
	length := len([]rune(feedbackText)) // –£—á–∏—Ç—ã–≤–∞–µ–º Unicode
	if length < 10 {
		return fmt.Errorf("feedback too short: %d characters, minimum 10", length)
	}
	if length > 1000 {
		return fmt.Errorf("feedback too long: %d characters, maximum 1000", length)
	}
	return nil
}

// SaveUserFeedback —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–∑—ã–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
func (s *BotService) SaveUserFeedback(userID int, feedbackText string, contactInfo *string, admins []int64) error {
	// –í–∞–ª–∏–¥–∏—Ä—É–µ–º –æ—Ç–∑—ã–≤
	if err := s.ValidateFeedback(feedbackText); err != nil {
		return err
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
	if err := s.DB.SaveUserFeedback(userID, feedbackText, contactInfo); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: %w", err)
	}

	// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
	userData, err := s.GetUserDataForFeedback(userID)
	if err != nil {
		log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: %v", err)
		return nil // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –±–µ–∑ –æ—à–∏–±–∫–∏
	}

	// –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å –æ—Ç–∑—ã–≤–æ–º
	fbData := userData
	fbData["feedback_text"] = feedbackText
	if contactInfo != nil {
		fbData["contact_info"] = contactInfo
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
	if err := s.SendFeedbackNotification(fbData, admins); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º: %v", err)
		// –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ function callback –µ—Å–ª–∏ –æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
		if s.FeedbackNotificationFunc != nil {
			if err := s.FeedbackNotificationFunc(fbData); err != nil {
				log.Printf("Fallback: —Ç–∞–∫–∂–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ callback: %v", err)
			} else {
				log.Printf("Fallback: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ callback")
			}
		}
	}

	return nil
}

// GetUserDataForFeedback –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –æ—Ç–∑—ã–≤–µ
func (s *BotService) GetUserDataForFeedback(userID int) (map[string]interface{}, error) {
	// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID (–Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ –≤ DB)
	var telegramID int64
	var username, firstName string
	err := s.DB.GetConnection().QueryRow(`
		SELECT telegram_id, username, first_name
		FROM users WHERE id = $1
	`, userID).Scan(&telegramID, &username, &firstName)
	if err != nil {
		return nil, err
	}

	result := map[string]interface{}{
		"telegram_id": telegramID,
		"first_name":  firstName,
	}

	if username != "" {
		result["username"] = username
	}

	return result, nil
}

// GetAllUnprocessedFeedback –ø–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
func (s *BotService) GetAllUnprocessedFeedback() ([]map[string]interface{}, error) {
	return s.DB.GetUnprocessedFeedback()
}

// GetAllFeedback –ø–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –æ—Ç–∑—ã–≤—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
func (s *BotService) GetAllFeedback() ([]map[string]interface{}, error) {
	query := `
        SELECT uf.id, uf.feedback_text, uf.contact_info, uf.created_at,
               uf.is_processed, u.username, u.telegram_id, u.first_name,
               uf.admin_response
        FROM user_feedback uf
        JOIN users u ON uf.user_id = u.id
        ORDER BY uf.created_at DESC
    `

	rows, err := s.DB.GetConnection().Query(query)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var feedbacks []map[string]interface{}
	for rows.Next() {
		var (
			id           int
			feedbackText string
			contactInfo  sql.NullString
			createdAt    sql.NullTime
			isProcessed  bool
			username     sql.NullString
			telegramID   int64
			firstName    string
			adminResp    sql.NullString
		)

		err := rows.Scan(&id, &feedbackText, &contactInfo, &createdAt, &isProcessed,
			&username, &telegramID, &firstName, &adminResp)
		if err != nil {
			continue // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—à–∏–±–æ—á–Ω—ã–µ –∑–∞–ø–∏—Å–∏
		}

		feedback := map[string]interface{}{
			"id":            id,
			"feedback_text": feedbackText,
			"created_at":    createdAt.Time,
			"telegram_id":   telegramID,
			"first_name":    firstName,
			"is_processed":  isProcessed,
		}

		if username.Valid {
			feedback["username"] = username.String
		} else {
			feedback["username"] = nil
		}

		if contactInfo.Valid {
			feedback["contact_info"] = contactInfo.String
		} else {
			feedback["contact_info"] = nil
		}

		if adminResp.Valid {
			feedback["admin_response"] = adminResp.String
		} else {
			feedback["admin_response"] = nil
		}

		feedbacks = append(feedbacks, feedback)
	}

	return feedbacks, nil
}

// UpdateFeedbackStatus –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –æ—Ç–∑—ã–≤–∞ (–æ–±—Ä–∞–±–æ—Ç–∞–Ω/–Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω)
func (s *BotService) UpdateFeedbackStatus(feedbackID int, isProcessed bool) error {
	query := `
		UPDATE user_feedback
		SET is_processed = $1, updated_at = NOW()
		WHERE id = $2
	`

	result, err := s.DB.GetConnection().Exec(query, isProcessed, feedbackID)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–∑—ã–≤–∞: %w", err)
	}

	rowsAffected, err := result.RowsAffected()
	if err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫: %w", err)
	}

	if rowsAffected == 0 {
		return fmt.Errorf("–æ—Ç–∑—ã–≤ —Å ID %d –Ω–µ –Ω–∞–π–¥–µ–Ω", feedbackID)
	}

	return nil
}

// DeleteFeedback —É–¥–∞–ª—è–µ—Ç –æ—Ç–∑—ã–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
func (s *BotService) DeleteFeedback(feedbackID int) error {
	query := `DELETE FROM user_feedback WHERE id = $1`

	result, err := s.DB.GetConnection().Exec(query, feedbackID)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞: %w", err)
	}

	rowsAffected, err := result.RowsAffected()
	if err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫: %w", err)
	}

	if rowsAffected == 0 {
		return fmt.Errorf("–æ—Ç–∑—ã–≤ —Å ID %d –Ω–µ –Ω–∞–π–¥–µ–Ω", feedbackID)
	}

	return nil
}

// MarkFeedbackProcessed –ø–æ–º–µ—á–∞–µ—Ç –æ—Ç–∑—ã–≤ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Å –æ—Ç–≤–µ—Ç–æ–º
func (s *BotService) MarkFeedbackProcessed(feedbackID int, adminResponse string) error {
	return s.DB.MarkFeedbackProcessed(feedbackID, adminResponse)
}
