services:
  postgres:
    image: postgres:15-alpine
    container_name: pg
    env_file:
      - ./.env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # Если init-скрипты в deploy/db-init, меняем монтирование на локальный путь
      - ./db-init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    env_file:
      - ./.env
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@local.host}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-password}
    ports:
      - "8080:80"
    depends_on:
      - postgres
    networks:
      - app-network

  bot:
    build:
      context: ../bot
      dockerfile: Dockerfile
    env_file:
      - ./.env
    environment:
      # Без хардкодов в compose — берём из .env или из окружения рантайма
      TELEGRAM_TOKEN: ${TELEGRAM_TOKEN}
      DATABASE_URL: ${DATABASE_URL}
      DEBUG: ${DEBUG:-false}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge
